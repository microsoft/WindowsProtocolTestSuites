// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReplayCreateDurableHandleV1TestCase : PtfTestClassBase {
        
        public ReplayCreateDurableHandleV1TestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void PreConstraintDelegate1();
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter), "CreateResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter IReplayAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c1;
        
        private IVariable<int> durableHandleResponse;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IReplayAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.IReplayAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c1");
            this.durableHandleResponse = this.Manager.CreateVariable<int>("durableHandleResponse");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS0() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp0);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp0, "c of ReadConfig, state S1");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S2\'");
            int temp5 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S19\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker1)));
                if ((temp1 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS20();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS20();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker1)));
            label0:
;
                goto label4;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S25\'");
                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker3)));
                if ((temp2 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS26();
                    goto label1;
                }
                if ((temp2 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS26();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker3)));
            label1:
;
                goto label4;
            }
            if ((temp5 == 2)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S7\'");
                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker4)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker5)));
                if ((temp3 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS8();
                    goto label2;
                }
                if ((temp3 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS8();
                    goto label2;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker4)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker5)));
            label2:
;
                goto label4;
            }
            if ((temp5 == 3)) {
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S13\'");
                int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker6)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker7)));
                if ((temp4 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label3;
                }
                if ((temp4 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker6)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker7)));
            label3:
;
                goto label4;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2\'.");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S19");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S19");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS20() {
            this.Manager.Comment("reaching state \'S20\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S19");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S19");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S25");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S25");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS26() {
            this.Manager.Comment("reaching state \'S26\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S25");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S25");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS8() {
            this.Manager.Comment("reaching state \'S8\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS14() {
            this.Manager.Comment("reaching state \'S14\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS0CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S101
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS101() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS101");
            this.Manager.Comment("reaching state \'S101\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp6;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp6);
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp6, "c of ReadConfig, state S102");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S103\'");
            int temp11 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S108\'");
                int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker1)));
                if ((temp7 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS109();
                    goto label5;
                }
                if ((temp7 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS110();
                    goto label5;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker1)));
            label5:
;
                goto label9;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S115\'");
                int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker3)));
                if ((temp8 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS116();
                    goto label6;
                }
                if ((temp8 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS116();
                    goto label6;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker3)));
            label6:
;
                goto label9;
            }
            if ((temp11 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label9;
            }
            if ((temp11 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label9;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S103\'.");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S108");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S108");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\", \"[" +
                        "MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of this create context, if RequestedOplockLevel in the create request" +
                        " is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not inclu" +
                        "de a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context wi" +
                        "th a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST i" +
                        "gnore this create context and skip this section\", \"[TestTag] Compatibility\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS109() {
            this.Manager.Comment("reaching state \'S109\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S108");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S108");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\", \"[" +
                        "MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of this create context, if RequestedOplockLevel in the create request" +
                        " is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not inclu" +
                        "de a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context wi" +
                        "th a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST i" +
                        "gnore this create context and skip this section\", \"[TestTag] Compatibility\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS110() {
            this.Manager.Comment("reaching state \'S110\'");
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S115");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS116() {
            this.Manager.Comment("reaching state \'S116\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S115");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS42() {
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                    "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
            this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,InvalidChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S46\'");
            int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker4)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker5)));
            if ((temp9 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS47();
                goto label7;
            }
            if ((temp9 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS47();
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker4)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker5)));
        label7:
;
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S46");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S46");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS47() {
            this.Manager.Comment("reaching state \'S47\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S46");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S46");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS48() {
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                    "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                    "ine whether each Open is to be preserved for reconnect. If any of the following " +
                    "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                    "nect\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                    "pen.IsDurable True\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S52\'");
            int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker6)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker7)));
            if ((temp10 == 0)) {
                this.Manager.Comment("reaching state \'S53\'");
                goto label8;
            }
            if ((temp10 == 1)) {
                this.Manager.Comment("reaching state \'S54\'");
                goto label8;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker6)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker7)));
        label8:
;
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S52");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S52");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS101CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S52");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S52");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S117
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS117() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS117");
            this.Manager.Comment("reaching state \'S117\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp12);
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp12, "c of ReadConfig, state S118");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S119\'");
            int temp15 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
            if ((temp15 == 0)) {
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S124\'");
                int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker1)));
                if ((temp13 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS125();
                    goto label10;
                }
                if ((temp13 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS125();
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker1)));
            label10:
;
                goto label12;
            }
            if ((temp15 == 1)) {
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S130\'");
                int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker3)));
                if ((temp14 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS131();
                    goto label11;
                }
                if ((temp14 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS131();
                    goto label11;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker3)));
            label11:
;
                goto label12;
            }
            if ((temp15 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label12;
            }
            if ((temp15 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label12;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S119\'.");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS125() {
            this.Manager.Comment("reaching state \'S125\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS131() {
            this.Manager.Comment("reaching state \'S131\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS117CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS132() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS132");
            this.Manager.Comment("reaching state \'S132\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp16;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp16);
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp16, "c of ReadConfig, state S133");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S134\'");
            int temp19 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S139\'");
                int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker1)));
                if ((temp17 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS140();
                    goto label13;
                }
                if ((temp17 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS140();
                    goto label13;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker1)));
            label13:
;
                goto label15;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S145\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker3)));
                if ((temp18 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label14;
                }
                if ((temp18 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label14;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker3)));
            label14:
;
                goto label15;
            }
            if ((temp19 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label15;
            }
            if ((temp19 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label15;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S134\'.");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] If the command request does not include FileId, this section MUST be skippe" +
                        "d\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS140() {
            this.Manager.Comment("reaching state \'S140\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] If the command request does not include FileId, this section MUST be skippe" +
                        "d\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S145");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S145");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS146() {
            this.Manager.Comment("reaching state \'S146\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS132CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S145");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S145");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S147
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS147() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS147");
            this.Manager.Comment("reaching state \'S147\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp20);
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp20, "c of ReadConfig, state S148");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S149\'");
            int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
            if ((temp22 == 0)) {
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S154\'");
                int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker1)));
                if ((temp21 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS20();
                    goto label16;
                }
                if ((temp21 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS20();
                    goto label16;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker1)));
            label16:
;
                goto label17;
            }
            if ((temp22 == 1)) {
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S159\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker2))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS41();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker2)));
                }
                goto label17;
            }
            if ((temp22 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label17;
            }
            if ((temp22 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label17;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S149\'.");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect " +
                        "belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUS" +
                        "TER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUS" +
                        "T set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dial" +
                        "ect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Reques" +
                        "tedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSI" +
                        "STENT bit is not set in the Flags field of this create context, if RequestedOplo" +
                        "ckLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the " +
                        "create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUE" +
                        "ST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HAND" +
                        "LE_CACHING, the server MUST ignore this create context and skip this section\", \"" +
                        "[TestTag] Compatibility\", \"[TestInfo] If the command request does not include Fi" +
                        "leId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, r" +
                        "equest command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect " +
                        "belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUS" +
                        "TER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUS" +
                        "T set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dial" +
                        "ect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Reques" +
                        "tedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSI" +
                        "STENT bit is not set in the Flags field of this create context, if RequestedOplo" +
                        "ckLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the " +
                        "create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUE" +
                        "ST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HAND" +
                        "LE_CACHING, the server MUST ignore this create context and skip this section\", \"" +
                        "[TestTag] Compatibility\", \"[TestInfo] If the command request does not include Fi" +
                        "leId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, r" +
                        "equest command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS147CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS41() {
            this.Manager.Comment("reaching state \'S41\'");
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS160() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS160");
            this.Manager.Comment("reaching state \'S160\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp23;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp23);
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp23, "c of ReadConfig, state S161");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S162\'");
            int temp25 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S167\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS168();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker)));
                }
                goto label19;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S173\'");
                int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker2)));
                if ((temp24 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS100();
                    goto label18;
                }
                if ((temp24 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS100();
                    goto label18;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker2)));
            label18:
;
                goto label19;
            }
            if ((temp25 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label19;
            }
            if ((temp25 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label19;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S162\'.");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S167");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S167");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS168() {
            this.Manager.Comment("reaching state \'S168\'");
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S173");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S173");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS100() {
            this.Manager.Comment("reaching state \'S100\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS160CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S173");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S173");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS174() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS174");
            this.Manager.Comment("reaching state \'S174\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp26;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp26);
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp26, "c of ReadConfig, state S175");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S176\'");
            int temp28 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
            if ((temp28 == 0)) {
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S181\'");
                int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker1)));
                if ((temp27 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS109();
                    goto label20;
                }
                if ((temp27 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS110();
                    goto label20;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker1)));
            label20:
;
                goto label21;
            }
            if ((temp28 == 1)) {
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S186\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S187\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker2)));
                }
                goto label21;
            }
            if ((temp28 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label21;
            }
            if ((temp28 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label21;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S176\'.");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS174CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S186");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S186");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStat" +
                        "eIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response" +
                        " from Open, as specified in the \"Response Construction\" phase, with the followin" +
                        "g additional steps, and send the response to client\", \"[TestInfo] Open.IsPersist" +
                        "ent is FALSE\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS188() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS188");
            this.Manager.Comment("reaching state \'S188\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp29;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp29);
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp29, "c of ReadConfig, state S189");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S190\'");
            int temp32 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
            if ((temp32 == 0)) {
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S195\'");
                int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker1)));
                if ((temp30 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS196();
                    goto label22;
                }
                if ((temp30 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS196();
                    goto label22;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker1)));
            label22:
;
                goto label24;
            }
            if ((temp32 == 1)) {
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S201\'");
                int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker3)));
                if ((temp31 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS202();
                    goto label23;
                }
                if ((temp31 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS202();
                    goto label23;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker3)));
            label23:
;
                goto label24;
            }
            if ((temp32 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label24;
            }
            if ((temp32 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label24;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S190\'.");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS196() {
            this.Manager.Comment("reaching state \'S196\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS202() {
            this.Manager.Comment("reaching state \'S202\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS188CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S203
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS203() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS203");
            this.Manager.Comment("reaching state \'S203\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp33;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp33);
            this.Manager.Comment("reaching state \'S204\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp33, "c of ReadConfig, state S204");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S205\'");
            int temp36 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
            if ((temp36 == 0)) {
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S210\'");
                int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker1)));
                if ((temp34 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS211();
                    goto label25;
                }
                if ((temp34 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS211();
                    goto label25;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker1)));
            label25:
;
                goto label27;
            }
            if ((temp36 == 1)) {
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S216\'");
                int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker3)));
                if ((temp35 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS217();
                    goto label26;
                }
                if ((temp35 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS217();
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker3)));
            label26:
;
                goto label27;
            }
            if ((temp36 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label27;
            }
            if ((temp36 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label27;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S205\'.");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S210");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S210");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS211() {
            this.Manager.Comment("reaching state \'S211\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S210");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S210");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S216");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\", " +
                        "\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the cre" +
                        "ate process specified in the \"Open Execution\" Phase, and perform the following a" +
                        "dditional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to" +
                        " the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"S" +
                        "uccessful Open Initialization\" phase, the server MUST set Open.IsDurable to TRUE" +
                        ". The server MUST also set Open.DurableOwner to a security descriptor accessible" +
                        " only by the user represented by Open.Session.SecurityContext.\", \"[TestInfo] Ope" +
                        "n.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10: The server MUST skip the con" +
                        "struction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SM" +
                        "B2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and " +
                        "if neither of the following conditions are met:\", \"[MS-SMB2] Open.OplockLevel is" +
                        " equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Open.Lease.LeaseState has SMB2_LE" +
                        "ASE_HANDLE_CACHING bit set\", \"[TestInfo] If the command request does not include" +
                        " FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30," +
                        " request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS217() {
            this.Manager.Comment("reaching state \'S217\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS203CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S216");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\", " +
                        "\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the cre" +
                        "ate process specified in the \"Open Execution\" Phase, and perform the following a" +
                        "dditional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to" +
                        " the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"S" +
                        "uccessful Open Initialization\" phase, the server MUST set Open.IsDurable to TRUE" +
                        ". The server MUST also set Open.DurableOwner to a security descriptor accessible" +
                        " only by the user represented by Open.Session.SecurityContext.\", \"[TestInfo] Ope" +
                        "n.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10: The server MUST skip the con" +
                        "struction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SM" +
                        "B2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and " +
                        "if neither of the following conditions are met:\", \"[MS-SMB2] Open.OplockLevel is" +
                        " equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Open.Lease.LeaseState has SMB2_LE" +
                        "ASE_HANDLE_CACHING bit set\", \"[TestInfo] If the command request does not include" +
                        " FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30," +
                        " request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS218() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS218");
            this.Manager.Comment("reaching state \'S218\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp37;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp37);
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp37, "c of ReadConfig, state S219");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S220\'");
            int temp40 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
            if ((temp40 == 0)) {
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S225\'");
                int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker1)));
                if ((temp38 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS226();
                    goto label28;
                }
                if ((temp38 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS226();
                    goto label28;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker1)));
            label28:
;
                goto label30;
            }
            if ((temp40 == 1)) {
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S231\'");
                int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker3)));
                if ((temp39 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS232();
                    goto label29;
                }
                if ((temp39 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS232();
                    goto label29;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker3)));
            label29:
;
                goto label30;
            }
            if ((temp40 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label30;
            }
            if ((temp40 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label30;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S220\'.");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S225");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S225");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequ" +
                        "est.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MU" +
                        "ST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGu" +
                        "id in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientG" +
                        "uid matches the ClientGuid of the connection that received this request\", \"[Test" +
                        "Info] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If" +
                        " an Open is not found, the server MUST continue the create process specified in " +
                        "the \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-S" +
                        "MB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializa" +
                        "tion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also se" +
                        "t Open.DurableOwner to a security descriptor accessible only by the user represe" +
                        "nted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRU" +
                        "E\", \"[TestInfo] If the command request does not include FileId, this section MUS" +
                        "T be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Crea" +
                        "te\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS226() {
            this.Manager.Comment("reaching state \'S226\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S225");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S225");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequ" +
                        "est.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MU" +
                        "ST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGu" +
                        "id in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientG" +
                        "uid matches the ClientGuid of the connection that received this request\", \"[Test" +
                        "Info] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If" +
                        " an Open is not found, the server MUST continue the create process specified in " +
                        "the \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-S" +
                        "MB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializa" +
                        "tion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also se" +
                        "t Open.DurableOwner to a security descriptor accessible only by the user represe" +
                        "nted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRU" +
                        "E\", \"[TestInfo] If the command request does not include FileId, this section MUS" +
                        "T be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Crea" +
                        "te\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S231");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S231");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS232() {
            this.Manager.Comment("reaching state \'S232\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS218CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S231");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S231");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S233
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS233() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS233");
            this.Manager.Comment("reaching state \'S233\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp41;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp41);
            this.Manager.Comment("reaching state \'S234\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp41, "c of ReadConfig, state S234");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S235\'");
            int temp44 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S240\'");
                int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker1)));
                if ((temp42 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label31;
                }
                if ((temp42 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label31;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker1)));
            label31:
;
                goto label33;
            }
            if ((temp44 == 1)) {
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S246\'");
                int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker3)));
                if ((temp43 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS247();
                    goto label32;
                }
                if ((temp43 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS247();
                    goto label32;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker3)));
            label32:
;
                goto label33;
            }
            if ((temp44 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label33;
            }
            if ((temp44 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label33;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S235\'.");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS241() {
            this.Manager.Comment("reaching state \'S241\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S246");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S246");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S246");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loca" +
                        "te the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in t" +
                        "he SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid mat" +
                        "ches the ClientGuid of the connection that received this request\", \"[TestInfo] O" +
                        "pen is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Ope" +
                        "n is not found, the server MUST continue the create process specified in the \"Op" +
                        "en Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3." +
                        "3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_D" +
                        "URABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" p" +
                        "hase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open." +
                        "DurableOwner to a security descriptor accessible only by the user represented by" +
                        " Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS247() {
            this.Manager.Comment("reaching state \'S247\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS233CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S246");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S246");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S246");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loca" +
                        "te the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in t" +
                        "he SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid mat" +
                        "ches the ClientGuid of the connection that received this request\", \"[TestInfo] O" +
                        "pen is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Ope" +
                        "n is not found, the server MUST continue the create process specified in the \"Op" +
                        "en Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3." +
                        "3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_D" +
                        "URABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" p" +
                        "hase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open." +
                        "DurableOwner to a security descriptor accessible only by the user represented by" +
                        " Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS248() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS248");
            this.Manager.Comment("reaching state \'S248\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp45;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp45);
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp45, "c of ReadConfig, state S249");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S250\'");
            int temp48 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
            if ((temp48 == 0)) {
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S255\'");
                int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker1)));
                if ((temp46 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS256();
                    goto label34;
                }
                if ((temp46 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS257();
                    goto label34;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker1)));
            label34:
;
                goto label36;
            }
            if ((temp48 == 1)) {
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S262\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker3)));
                if ((temp47 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS247();
                    goto label35;
                }
                if ((temp47 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS247();
                    goto label35;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker3)));
            label35:
;
                goto label36;
            }
            if ((temp48 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label36;
            }
            if ((temp48 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label36;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S250\'.");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x " +
                        "dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Reques" +
                        "tedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLe" +
                        "vel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb302, TreeConn" +
                        "ect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_" +
                        "OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in " +
                        "the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request " +
                        "does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState f" +
                        "ield that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST igno" +
                        "re this create context and skip this section\", \"[TestInfo] RequestedOplockLevel " +
                        "is OplockLevelII, LeaseState is LeaseStateIsNone\", \"[TestInfo] If the command re" +
                        "quest does not include FileId, this section MUST be skipped\", \"[TestInfo] Connec" +
                        "tion.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS256() {
            this.Manager.Comment("reaching state \'S256\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x " +
                        "dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Reques" +
                        "tedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLe" +
                        "vel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb302, TreeConn" +
                        "ect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_" +
                        "OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in " +
                        "the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request " +
                        "does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState f" +
                        "ield that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST igno" +
                        "re this create context and skip this section\", \"[TestInfo] RequestedOplockLevel " +
                        "is OplockLevelII, LeaseState is LeaseStateIsNone\", \"[TestInfo] If the command re" +
                        "quest does not include FileId, this section MUST be skipped\", \"[TestInfo] Connec" +
                        "tion.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS257() {
            this.Manager.Comment("reaching state \'S257\'");
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S262");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S262");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS248CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S262");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S262");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S263
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS263() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS263");
            this.Manager.Comment("reaching state \'S263\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp49);
            this.Manager.Comment("reaching state \'S264\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp49, "c of ReadConfig, state S264");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S265\'");
            int temp52 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
            if ((temp52 == 0)) {
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S270\'");
                int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker1)));
                if ((temp50 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label37;
                }
                if ((temp50 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label37;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker1)));
            label37:
;
                goto label39;
            }
            if ((temp52 == 1)) {
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S272\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S275\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker3)));
                if ((temp51 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS276();
                    goto label38;
                }
                if ((temp51 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS277();
                    goto label38;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker3)));
            label38:
;
                goto label39;
            }
            if ((temp52 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label39;
            }
            if ((temp52 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label39;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S265\'.");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker48() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S275");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S275");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S275");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS276() {
            this.Manager.Comment("reaching state \'S276\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS263CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S275");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S275");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S275");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS277() {
            this.Manager.Comment("reaching state \'S277\'");
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S27
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS27() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS27");
            this.Manager.Comment("reaching state \'S27\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp53;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp53);
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp53, "c of ReadConfig, state S28");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S29\'");
            int temp54 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
            if ((temp54 == 0)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S34\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS27CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S35\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS27CreateResponseChecker)));
                }
                goto label40;
            }
            if ((temp54 == 1)) {
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S40\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS27CreateResponseChecker1))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS41();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS27CreateResponseChecker1)));
                }
                goto label40;
            }
            if ((temp54 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label40;
            }
            if ((temp54 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label40;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S29\'.");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS27CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S34");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S34");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS27CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S40");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S40");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker55() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS278() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS278");
            this.Manager.Comment("reaching state \'S278\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp55;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp55);
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp55, "c of ReadConfig, state S279");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S280\'");
            int temp58 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S285\'");
                int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker1)));
                if ((temp56 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS211();
                    goto label41;
                }
                if ((temp56 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS211();
                    goto label41;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker1)));
            label41:
;
                goto label43;
            }
            if ((temp58 == 1)) {
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S290\'");
                int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker3)));
                if ((temp57 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label42;
                }
                if ((temp57 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label42;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker3)));
            label42:
;
                goto label43;
            }
            if ((temp58 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label43;
            }
            if ((temp58 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label43;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S280\'.");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker57() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S290");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S290");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S290");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS278CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S290");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S290");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S290");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S291
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS291() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS291");
            this.Manager.Comment("reaching state \'S291\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp59;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp59);
            this.Manager.Comment("reaching state \'S292\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp59, "c of ReadConfig, state S292");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S293\'");
            int temp62 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)));
            if ((temp62 == 0)) {
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S298\'");
                int temp60 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker1)));
                if ((temp60 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS299();
                    goto label44;
                }
                if ((temp60 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS299();
                    goto label44;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker1)));
            label44:
;
                goto label46;
            }
            if ((temp62 == 1)) {
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S304\'");
                int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker3)));
                if ((temp61 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS131();
                    goto label45;
                }
                if ((temp61 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS131();
                    goto label45;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker3)));
            label45:
;
                goto label46;
            }
            if ((temp62 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label46;
            }
            if ((temp62 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label46;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S293\'.");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S298");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S298");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S298");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loc" +
                        "ate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in " +
                        "the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid ma" +
                        "tches the ClientGuid of the connection that received this request\", \"[TestInfo] " +
                        "Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Op" +
                        "en is not found, the server MUST continue the create process specified in the \"O" +
                        "pen Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3" +
                        ".3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_" +
                        "DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" " +
                        "phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open" +
                        ".DurableOwner to a security descriptor accessible only by the user represented b" +
                        "y Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS299() {
            this.Manager.Comment("reaching state \'S299\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S298");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S298");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S298");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loc" +
                        "ate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in " +
                        "the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid ma" +
                        "tches the ClientGuid of the connection that received this request\", \"[TestInfo] " +
                        "Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Op" +
                        "en is not found, the server MUST continue the create process specified in the \"O" +
                        "pen Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3" +
                        ".3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_" +
                        "DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" " +
                        "phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open" +
                        ".DurableOwner to a security descriptor accessible only by the user represented b" +
                        "y Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS291CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker63() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S305
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS305() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS305");
            this.Manager.Comment("reaching state \'S305\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp63;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp63);
            this.Manager.Comment("reaching state \'S306\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp63, "c of ReadConfig, state S306");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S307\'");
            int temp64 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
            if ((temp64 == 0)) {
                this.Manager.Comment("reaching state \'S308\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S312\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS305CreateResponseChecker))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS168();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS305CreateResponseChecker)));
                }
                goto label47;
            }
            if ((temp64 == 1)) {
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S317\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS305CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S318\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS305CreateResponseChecker1)));
                }
                goto label47;
            }
            if ((temp64 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label47;
            }
            if ((temp64 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label47;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S307\'.");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS305CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S312");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S312");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S312");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS305CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S317");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S317");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S317");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, " +
                        "as specified in the \"Response Construction\" phase, with the following additional" +
                        " steps, and send the response to client\", \"[TestInfo] Open.IsPersistent is FALSE" +
                        "\", \"[TestInfo] If the command request does not include FileId, this section MUST" +
                        " be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S319
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS319() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS319");
            this.Manager.Comment("reaching state \'S319\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp65;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp65);
            this.Manager.Comment("reaching state \'S320\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp65, "c of ReadConfig, state S320");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S321\'");
            int temp68 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
            if ((temp68 == 0)) {
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S325\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S326\'");
                int temp66 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker1)));
                if ((temp66 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS20();
                    goto label48;
                }
                if ((temp66 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS20();
                    goto label48;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker1)));
            label48:
;
                goto label50;
            }
            if ((temp68 == 1)) {
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S329\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S331\'");
                int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker3)));
                if ((temp67 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS131();
                    goto label49;
                }
                if ((temp67 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS131();
                    goto label49;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker3)));
            label49:
;
                goto label50;
            }
            if ((temp68 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label50;
            }
            if ((temp68 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label50;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S321\'.");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S326");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S326");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S326");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S326");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S326");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S326");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S331");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S331");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S331");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS319CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S331");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S331");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S331");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS332() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS332");
            this.Manager.Comment("reaching state \'S332\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp69;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp69);
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp69, "c of ReadConfig, state S333");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S334\'");
            int temp72 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
            if ((temp72 == 0)) {
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S339\'");
                int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker1)));
                if ((temp70 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS84();
                    goto label51;
                }
                if ((temp70 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS85();
                    goto label51;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker1)));
            label51:
;
                goto label53;
            }
            if ((temp72 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label53;
            }
            if ((temp72 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label53;
            }
            if ((temp72 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label53;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S334\'.");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S339");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S339");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S339");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS84() {
            this.Manager.Comment("reaching state \'S84\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S339");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S339");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S339");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS85() {
            this.Manager.Comment("reaching state \'S85\'");
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS340() {
            this.Manager.Comment("reaching state \'S340\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                    "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
            this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("reaching state \'S341\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S342\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S344\'");
            int temp71 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker3)));
            if ((temp71 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS211();
                goto label52;
            }
            if ((temp71 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS211();
                goto label52;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker3)));
        label52:
;
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS332CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker74() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S345
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS345() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS345");
            this.Manager.Comment("reaching state \'S345\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp73;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp73);
            this.Manager.Comment("reaching state \'S346\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp73, "c of ReadConfig, state S346");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S347\'");
            int temp76 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
            if ((temp76 == 0)) {
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S352\'");
                int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker1)));
                if ((temp74 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label54;
                }
                if ((temp74 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label54;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker1)));
            label54:
;
                goto label56;
            }
            if ((temp76 == 1)) {
                this.Manager.Comment("reaching state \'S353\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S354\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S355\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S356\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S357\'");
                int temp75 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker3)));
                if ((temp75 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS358();
                    goto label55;
                }
                if ((temp75 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS358();
                    goto label55;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker3)));
            label55:
;
                goto label56;
            }
            if ((temp76 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label56;
            }
            if ((temp76 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label56;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S347\'.");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S352");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S352");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S352");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S352");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker77() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in" +
                        " GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the Clien" +
                        "tGuid of the connection that received this request\", \"[TestInfo] Open is not NUL" +
                        "L and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found" +
                        ", the server MUST continue the create process specified in the \"Open Execution\" " +
                        "Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The " +
                        "server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_" +
                        "REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the serv" +
                        "er MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner t" +
                        "o a security descriptor accessible only by the user represented by Open.Session." +
                        "SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "SPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of the request and if neither of the following conditions are met" +
                        ":\", \"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2]" +
                        " Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo] If th" +
                        "e command request does not include FileId, this section MUST be skipped\", \"[Test" +
                        "Info] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS358() {
            this.Manager.Comment("reaching state \'S358\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS345CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in" +
                        " GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the Clien" +
                        "tGuid of the connection that received this request\", \"[TestInfo] Open is not NUL" +
                        "L and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found" +
                        ", the server MUST continue the create process specified in the \"Open Execution\" " +
                        "Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The " +
                        "server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_" +
                        "REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the serv" +
                        "er MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner t" +
                        "o a security descriptor accessible only by the user represented by Open.Session." +
                        "SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "SPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of the request and if neither of the following conditions are met" +
                        ":\", \"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2]" +
                        " Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo] If th" +
                        "e command request does not include FileId, this section MUST be skipped\", \"[Test" +
                        "Info] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker78() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S359
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS359() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS359");
            this.Manager.Comment("reaching state \'S359\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp77;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp77);
            this.Manager.Comment("reaching state \'S360\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp77, "c of ReadConfig, state S360");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S361\'");
            int temp80 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)));
            if ((temp80 == 0)) {
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S366\'");
                int temp78 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker1)));
                if ((temp78 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS256();
                    goto label57;
                }
                if ((temp78 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS257();
                    goto label57;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker1)));
            label57:
;
                goto label59;
            }
            if ((temp80 == 1)) {
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S368\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S369\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S371\'");
                int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker3)));
                if ((temp79 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS276();
                    goto label58;
                }
                if ((temp79 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS277();
                    goto label58;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker3)));
            label58:
;
                goto label59;
            }
            if ((temp80 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label59;
            }
            if ((temp80 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label59;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S361\'.");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker81() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S371");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S371");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\", \"" +
                        "[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the " +
                        "Flags field of this create context, if RequestedOplockLevel in the create reques" +
                        "t is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not incl" +
                        "ude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context w" +
                        "ith a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST " +
                        "ignore this create context and skip this section\", \"[TestTag] Compatibility\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS359CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S371");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S371");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\", \"" +
                        "[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the " +
                        "Flags field of this create context, if RequestedOplockLevel in the create reques" +
                        "t is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not incl" +
                        "ude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context w" +
                        "ith a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST " +
                        "ignore this create context and skip this section\", \"[TestTag] Compatibility\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS372() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS372");
            this.Manager.Comment("reaching state \'S372\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp81;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp81);
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp81, "c of ReadConfig, state S373");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S374\'");
            int temp84 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)));
            if ((temp84 == 0)) {
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S378\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S379\'");
                int temp82 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker1)));
                if ((temp82 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS196();
                    goto label60;
                }
                if ((temp82 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS196();
                    goto label60;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker1)));
            label60:
;
                goto label62;
            }
            if ((temp84 == 1)) {
                this.Manager.Comment("reaching state \'S380\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceBoundaryValid,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S384\'");
                int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker3)));
                if ((temp83 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS84();
                    goto label61;
                }
                if ((temp83 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS85();
                    goto label61;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker3)));
            label61:
;
                goto label62;
            }
            if ((temp84 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label62;
            }
            if ((temp84 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label62;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S374\'.");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker84() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS372CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S385
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS385() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS385");
            this.Manager.Comment("reaching state \'S385\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp85;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp85);
            this.Manager.Comment("reaching state \'S386\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp85, "c of ReadConfig, state S386");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S387\'");
            int temp88 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)));
            if ((temp88 == 0)) {
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S392\'");
                int temp86 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker1)));
                if ((temp86 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label63;
                }
                if ((temp86 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS241();
                    goto label63;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker1)));
            label63:
;
                goto label65;
            }
            if ((temp88 == 1)) {
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S394\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S395\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S397\'");
                int temp87 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker3)));
                if ((temp87 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS116();
                    goto label64;
                }
                if ((temp87 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS116();
                    goto label64;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker3)));
            label64:
;
                goto label65;
            }
            if ((temp88 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label65;
            }
            if ((temp88 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label65;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S387\'.");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker88() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S392");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S392");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S392");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S392");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S392");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S392");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S397");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSIST" +
                        "ENT bit is not set in the Flags field of this create context, if RequestedOplock" +
                        "Level in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the cr" +
                        "eate request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST" +
                        "_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE" +
                        "_CACHING, the server MUST ignore this create context and skip this section\", \"[T" +
                        "estTag] Compatibility\", \"[TestInfo] If the command request does not include File" +
                        "Id, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS385CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S397");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSIST" +
                        "ENT bit is not set in the Flags field of this create context, if RequestedOplock" +
                        "Level in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the cr" +
                        "eate request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST" +
                        "_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE" +
                        "_CACHING, the server MUST ignore this create context and skip this section\", \"[T" +
                        "estTag] Compatibility\", \"[TestInfo] If the command request does not include File" +
                        "Id, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS398() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS398");
            this.Manager.Comment("reaching state \'S398\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp89;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp89);
            this.Manager.Comment("reaching state \'S399\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp89, "c of ReadConfig, state S399");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S400\'");
            int temp92 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)));
            if ((temp92 == 0)) {
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S405\'");
                int temp90 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker1)));
                if ((temp90 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS196();
                    goto label66;
                }
                if ((temp90 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS196();
                    goto label66;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker1)));
            label66:
;
                goto label68;
            }
            if ((temp92 == 1)) {
                this.Manager.Comment("reaching state \'S406\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S407\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S408\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S410\'");
                int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker3)));
                if ((temp91 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label67;
                }
                if ((temp91 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label67;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker3)));
            label67:
;
                goto label68;
            }
            if ((temp92 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label68;
            }
            if ((temp92 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label68;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S400\'.");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S410");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S410");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S410");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS398CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S410");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S410");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S410");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker94() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker95() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S411
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS411() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS411");
            this.Manager.Comment("reaching state \'S411\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp93;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp93);
            this.Manager.Comment("reaching state \'S412\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp93, "c of ReadConfig, state S412");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S413\'");
            int temp96 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)));
            if ((temp96 == 0)) {
                this.Manager.Comment("reaching state \'S414\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S415\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S416\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S417\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S418\'");
                int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker1)));
                if ((temp94 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS109();
                    goto label69;
                }
                if ((temp94 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS110();
                    goto label69;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker1)));
            label69:
;
                goto label71;
            }
            if ((temp96 == 1)) {
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S421\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S423\'");
                int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker3)));
                if ((temp95 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label70;
                }
                if ((temp95 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label70;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker3)));
            label70:
;
                goto label71;
            }
            if ((temp96 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label71;
            }
            if ((temp96 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label71;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S413\'.");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker96() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S418");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S418");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S418");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S418");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S423");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S423");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S423");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS411CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S423");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S423");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S423");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker99() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS424() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS424");
            this.Manager.Comment("reaching state \'S424\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp97;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp97);
            this.Manager.Comment("reaching state \'S425\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp97, "c of ReadConfig, state S425");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S426\'");
            int temp99 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)));
            if ((temp99 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label73;
            }
            if ((temp99 == 1)) {
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S430\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S431\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS63();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker)));
                }
                goto label73;
            }
            if ((temp99 == 2)) {
                this.Manager.Comment("reaching state \'S432\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S433\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S434\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S435\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S436\'");
                int temp98 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker2)));
                if ((temp98 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS217();
                    goto label72;
                }
                if ((temp98 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS217();
                    goto label72;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker2)));
            label72:
;
                goto label73;
            }
            if ((temp99 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label73;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S426\'.");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker100() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S431");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S431");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S431");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS63() {
            this.Manager.Comment("reaching state \'S63\'");
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S436");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS424CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S436");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker103() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S437
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS437() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS437");
            this.Manager.Comment("reaching state \'S437\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp100;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp100);
            this.Manager.Comment("reaching state \'S438\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp100, "c of ReadConfig, state S438");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S439\'");
            int temp103 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
            if ((temp103 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label76;
            }
            if ((temp103 == 1)) {
                this.Manager.Comment("reaching state \'S440\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S441\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S444\'");
                int temp101 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker1)));
                if ((temp101 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS211();
                    goto label74;
                }
                if ((temp101 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS211();
                    goto label74;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker1)));
            label74:
;
                goto label76;
            }
            if ((temp103 == 2)) {
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S446\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S448\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S449\'");
                int temp102 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker3)));
                if ((temp102 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label75;
                }
                if ((temp102 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS146();
                    goto label75;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker3)));
            label75:
;
                goto label76;
            }
            if ((temp103 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label76;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S439\'.");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S444");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S444");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S444");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S444");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S444");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S444");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S449");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S449");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S449");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS437CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S449");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S449");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S449");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S450
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS450() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS450");
            this.Manager.Comment("reaching state \'S450\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp104;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp104);
            this.Manager.Comment("reaching state \'S451\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp104, "c of ReadConfig, state S451");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S452\'");
            int temp106 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
            if ((temp106 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label78;
            }
            if ((temp106 == 1)) {
                this.Manager.Comment("reaching state \'S453\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S454\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S455\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S456\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S457\'");
                int temp105 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker1)));
                if ((temp105 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS256();
                    goto label77;
                }
                if ((temp105 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS257();
                    goto label77;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker1)));
            label77:
;
                goto label78;
            }
            if ((temp106 == 2)) {
                this.Manager.Comment("reaching state \'S458\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S461\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S462\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S463\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker2)));
                }
                goto label78;
            }
            if ((temp106 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label78;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S452\'.");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S457");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S457");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S457");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1" +
                        "\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in " +
                        "the Flags field of this create context, if RequestedOplockLevel in the create re" +
                        "quest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not " +
                        "include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create conte" +
                        "xt with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server M" +
                        "UST ignore this create context and skip this section\", \"[TestTag] Compatibility\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S457");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S457");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S457");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1" +
                        "\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in " +
                        "the Flags field of this create context, if RequestedOplockLevel in the create re" +
                        "quest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not " +
                        "include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create conte" +
                        "xt with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server M" +
                        "UST ignore this create context and skip this section\", \"[TestTag] Compatibility\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker110() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS450CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S462");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S462");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S462");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create r" +
                        "esponse from Open, as specified in the \"Response Construction\" phase, with the f" +
                        "ollowing additional steps, and send the response to client\", \"[TestInfo] Open.Is" +
                        "Persistent is FALSE\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS464() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS464");
            this.Manager.Comment("reaching state \'S464\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp107;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp107);
            this.Manager.Comment("reaching state \'S465\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp107, "c of ReadConfig, state S465");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S466\'");
            int temp110 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)));
            if ((temp110 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label81;
            }
            if ((temp110 == 1)) {
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S469\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S470\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S471\'");
                int temp108 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker1)));
                if ((temp108 == 0)) {
                    this.Manager.Comment("reaching state \'S472\'");
                    goto label79;
                }
                if ((temp108 == 1)) {
                    this.Manager.Comment("reaching state \'S473\'");
                    goto label79;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker1)));
            label79:
;
                goto label81;
            }
            if ((temp110 == 2)) {
                this.Manager.Comment("reaching state \'S474\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S475\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S476\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S477\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S478\'");
                int temp109 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker3)));
                if ((temp109 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS100();
                    goto label80;
                }
                if ((temp109 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS100();
                    goto label80;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker3)));
            label80:
;
                goto label81;
            }
            if ((temp110 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label81;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S466\'.");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S471");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S471");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker114() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S478");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S478");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S478");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS464CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S478");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S478");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S478");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker115() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S479
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS479() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS479");
            this.Manager.Comment("reaching state \'S479\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp111;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp111);
            this.Manager.Comment("reaching state \'S480\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp111, "c of ReadConfig, state S480");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S481\'");
            int temp112 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
            if ((temp112 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label82;
            }
            if ((temp112 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label82;
            }
            if ((temp112 == 2)) {
                this.Manager.Comment("reaching state \'S482\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S483\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S484\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S485\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S486\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS479CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S487\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS479CreateResponseChecker)));
                }
                goto label82;
            }
            if ((temp112 == 3)) {
                this.Manager.Comment("reaching state \'S488\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S489\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S490\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S491\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S492\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS479CreateResponseChecker1))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS493();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS479CreateResponseChecker1)));
                }
                goto label82;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S481\'.");
        label82:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker118() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS479CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S486");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S486");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S486");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS479CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S492");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S492");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S492");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS493() {
            this.Manager.Comment("reaching state \'S493\'");
        }
        #endregion
        
        #region Test Starting in S494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS494() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS494");
            this.Manager.Comment("reaching state \'S494\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp113;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp113);
            this.Manager.Comment("reaching state \'S495\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp113, "c of ReadConfig, state S495");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S496\'");
            int temp114 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker122)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker123)));
            if ((temp114 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label83;
            }
            if ((temp114 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label83;
            }
            if ((temp114 == 2)) {
                this.Manager.Comment("reaching state \'S497\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S498\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S499\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S500\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S501\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS494CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S502\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS494CreateResponseChecker)));
                }
                goto label83;
            }
            if ((temp114 == 3)) {
                this.Manager.Comment("reaching state \'S503\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S504\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S505\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S506\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S507\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS494CreateResponseChecker1))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS493();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS494CreateResponseChecker1)));
                }
                goto label83;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S496\'.");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker121() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker122() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS494CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLeve" +
                        "l is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open" +
                        " in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the Cl" +
                        "ientGuid of the connection that received this request\", \"[TestInfo] Open is not " +
                        "NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not fo" +
                        "und, the server MUST continue the create process specified in the \"Open Executio" +
                        "n\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: T" +
                        "he server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HAND" +
                        "LE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the s" +
                        "erver MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwne" +
                        "r to a security descriptor accessible only by the user represented by Open.Sessi" +
                        "on.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Re" +
                        "quested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateIncludeH" +
                        "\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Ope" +
                        "n, as specified in the \"Response Construction\" phase, with the following additio" +
                        "nal steps, and send the response to client\", \"[TestInfo] Open.IsPersistent is FA" +
                        "LSE\", \"[TestInfo] If the command request does not include FileId, this section M" +
                        "UST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Cr" +
                        "eate\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker123() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS494CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S507");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S507");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S507");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"" +
                        ", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the c" +
                        "reate process specified in the \"Open Execution\" Phase, and perform the following" +
                        " additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid " +
                        "to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the " +
                        "\"Successful Open Initialization\" phase, the server MUST set Open.IsDurable to TR" +
                        "UE. The server MUST also set Open.DurableOwner to a security descriptor accessib" +
                        "le only by the user represented by Open.Session.SecurityContext.\", \"[TestInfo] O" +
                        "pen.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is OplockLevelL" +
                        "easeV1, Open.leaseState is LeaseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The serve" +
                        "r MUST construct the create response from Open, as specified in the \"Response Co" +
                        "nstruction\" phase, with the following additional steps, and send the response to" +
                        " client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[TestInfo] If the command re" +
                        "quest does not include FileId, this section MUST be skipped\", \"[TestInfo] Connec" +
                        "tion.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS508() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS508");
            this.Manager.Comment("reaching state \'S508\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp115;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp115);
            this.Manager.Comment("reaching state \'S509\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp115, "c of ReadConfig, state S509");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S510\'");
            int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker124)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker125)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker126)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker127)));
            if ((temp117 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label85;
            }
            if ((temp117 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label85;
            }
            if ((temp117 == 2)) {
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S512\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S513\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S514\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S515\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS516();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker)));
                }
                goto label85;
            }
            if ((temp117 == 3)) {
                this.Manager.Comment("reaching state \'S517\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S521\'");
                int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker2)));
                if ((temp116 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS522();
                    goto label84;
                }
                if ((temp116 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS522();
                    goto label84;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker2)));
            label84:
;
                goto label85;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S510\'.");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker124() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker125() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker126() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S515");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S515");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S515");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST " +
                        "locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid " +
                        "in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid" +
                        " matches the ClientGuid of the connection that received this request\", \"[TestInf" +
                        "o] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an" +
                        " Open is not found, the server MUST continue the create process specified in the" +
                        " \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2" +
                        "] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREA" +
                        "TE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializatio" +
                        "n\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set O" +
                        "pen.DurableOwner to a security descriptor accessible only by the user represente" +
                        "d by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"," +
                        " \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open," +
                        " as specified in the \"Response Construction\" phase, with the following additiona" +
                        "l steps, and send the response to client\", \"[TestInfo] Open.IsPersistent is FALS" +
                        "E\", \"[TestInfo] If the command request does not include FileId, this section MUS" +
                        "T be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Crea" +
                        "te\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS516() {
            this.Manager.Comment("reaching state \'S516\'");
        }
        
        private void PreConstraintChecker127() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S521");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S521");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStat" +
                        "eNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS522() {
            this.Manager.Comment("reaching state \'S522\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS508CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S521");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S521");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStat" +
                        "eNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S523
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS523() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS523");
            this.Manager.Comment("reaching state \'S523\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp118;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp118);
            this.Manager.Comment("reaching state \'S524\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp118, "c of ReadConfig, state S524");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S525\'");
            int temp120 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker128)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker129)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker130)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker131)));
            if ((temp120 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label87;
            }
            if ((temp120 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label87;
            }
            if ((temp120 == 2)) {
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S530\'");
                int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker1)));
                if ((temp119 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS531();
                    goto label86;
                }
                if ((temp119 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS532();
                    goto label86;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker1)));
            label86:
;
                goto label87;
            }
            if ((temp120 == 3)) {
                this.Manager.Comment("reaching state \'S533\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S534\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S536\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S537\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker2))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS538();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker2)));
                }
                goto label87;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S525\'.");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker128() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker129() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker130() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S530");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS531() {
            this.Manager.Comment("reaching state \'S531\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S530");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS532() {
            this.Manager.Comment("reaching state \'S532\'");
        }
        
        private void PreConstraintChecker131() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS523CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S537");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S537");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S537");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS538() {
            this.Manager.Comment("reaching state \'S538\'");
        }
        #endregion
        
        #region Test Starting in S539
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS539() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS539");
            this.Manager.Comment("reaching state \'S539\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp121;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp121);
            this.Manager.Comment("reaching state \'S540\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp121, "c of ReadConfig, state S540");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S541\'");
            int temp124 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker132)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker133)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker134)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker135)));
            if ((temp124 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label90;
            }
            if ((temp124 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label90;
            }
            if ((temp124 == 2)) {
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S543\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S544\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S545\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S546\'");
                int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker1)));
                if ((temp122 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS547();
                    goto label88;
                }
                if ((temp122 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS547();
                    goto label88;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker1)));
            label88:
;
                goto label90;
            }
            if ((temp124 == 3)) {
                this.Manager.Comment("reaching state \'S548\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S552\'");
                int temp123 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker3)));
                if ((temp123 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS553();
                    goto label89;
                }
                if ((temp123 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS554();
                    goto label89;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker3)));
            label89:
;
                goto label90;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S541\'.");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker132() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker133() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker134() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S546");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S546");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S546");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST con" +
                        "tinue the create process specified in the \"Open Execution\" Phase, and perform th" +
                        "e following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open." +
                        "CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SM" +
                        "B2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDu" +
                        "rable to TRUE. The server MUST also set Open.DurableOwner to a security descript" +
                        "or accessible only by the user represented by Open.Session.SecurityContext.\", \"[" +
                        "TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is O" +
                        "plockLevelLeaseV2, Open.leaseState is LeaseStateNotIncludeH\", \"[TestInfo] If the" +
                        " command request does not include FileId, this section MUST be skipped\", \"[TestI" +
                        "nfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS547() {
            this.Manager.Comment("reaching state \'S547\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S546");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S546");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S546");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST con" +
                        "tinue the create process specified in the \"Open Execution\" Phase, and perform th" +
                        "e following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open." +
                        "CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SM" +
                        "B2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDu" +
                        "rable to TRUE. The server MUST also set Open.DurableOwner to a security descript" +
                        "or accessible only by the user represented by Open.Session.SecurityContext.\", \"[" +
                        "TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is O" +
                        "plockLevelLeaseV2, Open.leaseState is LeaseStateNotIncludeH\", \"[TestInfo] If the" +
                        " command request does not include FileId, this section MUST be skipped\", \"[TestI" +
                        "nfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker135() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S552");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S552");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS553() {
            this.Manager.Comment("reaching state \'S553\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS539CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S552");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S552");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS554() {
            this.Manager.Comment("reaching state \'S554\'");
        }
        #endregion
        
        #region Test Starting in S55
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS55() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS55");
            this.Manager.Comment("reaching state \'S55\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp125;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp125);
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp125, "c of ReadConfig, state S56");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S57\'");
            int temp126 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker136)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker137)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker138)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker139)));
            if ((temp126 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label91;
            }
            if ((temp126 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label91;
            }
            if ((temp126 == 2)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S62\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS55CreateResponseChecker))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS63();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS55CreateResponseChecker)));
                }
                goto label91;
            }
            if ((temp126 == 3)) {
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S68\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS55CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S69\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS55CreateResponseChecker1)));
                }
                goto label91;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S57\'.");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker136() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker137() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker138() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS55CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S62");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S62");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST con" +
                        "tinue the create process specified in the \"Open Execution\" Phase, and perform th" +
                        "e following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open." +
                        "CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SM" +
                        "B2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDu" +
                        "rable to TRUE. The server MUST also set Open.DurableOwner to a security descript" +
                        "or accessible only by the user represented by Open.Session.SecurityContext.\", \"[" +
                        "TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is O" +
                        "plockLevelLeaseV2, Open.leaseState is LeaseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10" +
                        ": The server MUST construct the create response from Open, as specified in the \"" +
                        "Response Construction\" phase, with the following additional steps, and send the " +
                        "response to client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[TestInfo] If the" +
                        " command request does not include FileId, this section MUST be skipped\", \"[TestI" +
                        "nfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker139() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS55CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S68");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLev" +
                        "elLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST cont" +
                        "inue the create process specified in the \"Open Execution\" Phase, and perform the" +
                        " following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.C" +
                        "reateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB" +
                        "2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDur" +
                        "able to TRUE. The server MUST also set Open.DurableOwner to a security descripto" +
                        "r accessible only by the user represented by Open.Session.SecurityContext.\", \"[T" +
                        "estInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is Op" +
                        "lockLevelLeaseV2, Open.leaseState is LeaseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10:" +
                        " The server MUST construct the create response from Open, as specified in the \"R" +
                        "esponse Construction\" phase, with the following additional steps, and send the r" +
                        "esponse to client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[TestInfo] If the " +
                        "command request does not include FileId, this section MUST be skipped\", \"[TestIn" +
                        "fo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S555
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS555() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS555");
            this.Manager.Comment("reaching state \'S555\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp127;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp127);
            this.Manager.Comment("reaching state \'S556\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp127, "c of ReadConfig, state S556");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S557\'");
            int temp129 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker140)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker141)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker142)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker143)));
            if ((temp129 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label93;
            }
            if ((temp129 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label93;
            }
            if ((temp129 == 2)) {
                this.Manager.Comment("reaching state \'S558\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S559\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S560\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S561\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S562\'");
                int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker1)));
                if ((temp128 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS563();
                    goto label92;
                }
                if ((temp128 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS563();
                    goto label92;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker1)));
            label92:
;
                goto label93;
            }
            if ((temp129 == 3)) {
                this.Manager.Comment("reaching state \'S564\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S566\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S567\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S568\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S569\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker2)));
                }
                goto label93;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S557\'.");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker140() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker141() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker142() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S562");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S562");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S562");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"," +
                        " \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the cr" +
                        "eate process specified in the \"Open Execution\" Phase, and perform the following " +
                        "additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid t" +
                        "o the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"" +
                        "Successful Open Initialization\" phase, the server MUST set Open.IsDurable to TRU" +
                        "E. The server MUST also set Open.DurableOwner to a security descriptor accessibl" +
                        "e only by the user represented by Open.Session.SecurityContext.\", \"[TestInfo] Op" +
                        "en.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10: The server MUST skip the co" +
                        "nstruction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the S" +
                        "MB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and" +
                        " if neither of the following conditions are met:\", \"[MS-SMB2] Open.OplockLevel i" +
                        "s equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Open.Lease.LeaseState has SMB2_L" +
                        "EASE_HANDLE_CACHING bit set\", \"[TestInfo] If the command request does not includ" +
                        "e FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30" +
                        "2, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS563() {
            this.Manager.Comment("reaching state \'S563\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S562");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S562");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S562");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"," +
                        " \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the cr" +
                        "eate process specified in the \"Open Execution\" Phase, and perform the following " +
                        "additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid t" +
                        "o the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"" +
                        "Successful Open Initialization\" phase, the server MUST set Open.IsDurable to TRU" +
                        "E. The server MUST also set Open.DurableOwner to a security descriptor accessibl" +
                        "e only by the user represented by Open.Session.SecurityContext.\", \"[TestInfo] Op" +
                        "en.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10: The server MUST skip the co" +
                        "nstruction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the S" +
                        "MB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and" +
                        " if neither of the following conditions are met:\", \"[MS-SMB2] Open.OplockLevel i" +
                        "s equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Open.Lease.LeaseState has SMB2_L" +
                        "EASE_HANDLE_CACHING bit set\", \"[TestInfo] If the command request does not includ" +
                        "e FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30" +
                        "2, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker143() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS555CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S568");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S568");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S568");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS570() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS570");
            this.Manager.Comment("reaching state \'S570\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp130;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp130);
            this.Manager.Comment("reaching state \'S571\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp130, "c of ReadConfig, state S571");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S572\'");
            int temp133 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker144)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker145)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker146)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker147)));
            if ((temp133 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label96;
            }
            if ((temp133 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label96;
            }
            if ((temp133 == 2)) {
                this.Manager.Comment("reaching state \'S573\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S574\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S575\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceBoundaryValid,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S576\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S577\'");
                int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker1)));
                if ((temp131 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS578();
                    goto label94;
                }
                if ((temp131 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS578();
                    goto label94;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker1)));
            label94:
;
                goto label96;
            }
            if ((temp133 == 3)) {
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S582\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S583\'");
                int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker3)));
                if ((temp132 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS584();
                    goto label95;
                }
                if ((temp132 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS584();
                    goto label95;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker3)));
            label95:
;
                goto label96;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S572\'.");
        label96:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker144() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker145() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker146() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S577");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S577");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS578() {
            this.Manager.Comment("reaching state \'S578\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S577");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S577");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker147() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S583");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S583");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S583");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x d" +
                        "ialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Request" +
                        "edOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLev" +
                        "el to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb30, TreeConnec" +
                        "t.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OP" +
                        "LOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDL" +
                        "E_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Du" +
                        "rableHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is Oplo" +
                        "ckLevelII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST cont" +
                        "inue the create process specified in the \"Open Execution\" Phase, and perform the" +
                        " following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.C" +
                        "reateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB" +
                        "2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDur" +
                        "able to TRUE. The server MUST also set Open.DurableOwner to a security descripto" +
                        "r accessible only by the user represented by Open.Session.SecurityContext.\", \"[T" +
                        "estInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request does" +
                        " not include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Diale" +
                        "ct is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS584() {
            this.Manager.Comment("reaching state \'S584\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS570CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S583");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S583");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S583");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x d" +
                        "ialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Request" +
                        "edOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLev" +
                        "el to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb30, TreeConnec" +
                        "t.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OP" +
                        "LOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDL" +
                        "E_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Du" +
                        "rableHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is Oplo" +
                        "ckLevelII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST cont" +
                        "inue the create process specified in the \"Open Execution\" Phase, and perform the" +
                        " following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.C" +
                        "reateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB" +
                        "2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDur" +
                        "able to TRUE. The server MUST also set Open.DurableOwner to a security descripto" +
                        "r accessible only by the user represented by Open.Session.SecurityContext.\", \"[T" +
                        "estInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request does" +
                        " not include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Diale" +
                        "ct is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S585
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS585() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS585");
            this.Manager.Comment("reaching state \'S585\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp134;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp134);
            this.Manager.Comment("reaching state \'S586\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp134, "c of ReadConfig, state S586");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S587\'");
            int temp137 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker148)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker149)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker150)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker151)));
            if ((temp137 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label99;
            }
            if ((temp137 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label99;
            }
            if ((temp137 == 2)) {
                this.Manager.Comment("reaching state \'S588\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S590\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S591\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S592\'");
                int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker1)));
                if ((temp135 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label97;
                }
                if ((temp135 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label97;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker1)));
            label97:
;
                goto label99;
            }
            if ((temp137 == 3)) {
                this.Manager.Comment("reaching state \'S593\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S594\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S595\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S596\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S597\'");
                int temp136 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker3)));
                if ((temp136 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS598();
                    goto label98;
                }
                if ((temp136 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS598();
                    goto label98;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker3)));
            label98:
;
                goto label99;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S587\'.");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker148() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker149() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker150() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S592");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S592");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S592");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S592");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S592");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S592");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker151() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S597");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S597");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS598() {
            this.Manager.Comment("reaching state \'S598\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS585CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S597");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S597");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S599
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS599() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS599");
            this.Manager.Comment("reaching state \'S599\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp138;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp138);
            this.Manager.Comment("reaching state \'S600\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp138, "c of ReadConfig, state S600");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S601\'");
            int temp141 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker152)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker153)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker154)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker155)));
            if ((temp141 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label102;
            }
            if ((temp141 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label102;
            }
            if ((temp141 == 2)) {
                this.Manager.Comment("reaching state \'S602\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S603\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S604\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S606\'");
                int temp139 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker1)));
                if ((temp139 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label100;
                }
                if ((temp139 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label100;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker1)));
            label100:
;
                goto label102;
            }
            if ((temp141 == 3)) {
                this.Manager.Comment("reaching state \'S608\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S609\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S610\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S611\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S612\'");
                int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker3)));
                if ((temp140 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS613();
                    goto label101;
                }
                if ((temp140 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS613();
                    goto label101;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker3)));
            label101:
;
                goto label102;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S601\'.");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker152() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker153() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker154() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S606");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S606");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS607() {
            this.Manager.Comment("reaching state \'S607\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S606");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S606");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker155() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS613() {
            this.Manager.Comment("reaching state \'S613\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS599CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS614() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS614");
            this.Manager.Comment("reaching state \'S614\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp142;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp142);
            this.Manager.Comment("reaching state \'S615\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp142, "c of ReadConfig, state S615");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S616\'");
            int temp144 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker156)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker157)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker158)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker159)));
            if ((temp144 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label104;
            }
            if ((temp144 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label104;
            }
            if ((temp144 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label104;
            }
            if ((temp144 == 3)) {
                this.Manager.Comment("reaching state \'S617\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S618\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S619\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S620\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S621\'");
                int temp143 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS614CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS614CreateResponseChecker1)));
                if ((temp143 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS578();
                    goto label103;
                }
                if ((temp143 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS578();
                    goto label103;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS614CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS614CreateResponseChecker1)));
            label103:
;
                goto label104;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S616\'.");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker156() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker157() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker158() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker159() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS614CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S621");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S621");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S621");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS614CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S621");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S621");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S621");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S622
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS622() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS622");
            this.Manager.Comment("reaching state \'S622\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp145;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp145);
            this.Manager.Comment("reaching state \'S623\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp145, "c of ReadConfig, state S623");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S624\'");
            int temp148 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker160)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker161)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker162)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker163)));
            if ((temp148 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label107;
            }
            if ((temp148 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label107;
            }
            if ((temp148 == 2)) {
                this.Manager.Comment("reaching state \'S625\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S626\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S628\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S629\'");
                int temp146 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker1)));
                if ((temp146 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS630();
                    goto label105;
                }
                if ((temp146 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS630();
                    goto label105;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker1)));
            label105:
;
                goto label107;
            }
            if ((temp148 == 3)) {
                ReplayCreateDurableHandleV1TestCaseS631();
                goto label107;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S624\'.");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker160() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker161() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker162() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S629");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S629");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS630() {
            this.Manager.Comment("reaching state \'S630\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S629");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S629");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker163() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS631() {
            this.Manager.Comment("reaching state \'S631\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                    "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Comment("reaching state \'S632\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S633\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                    "ine whether each Open is to be preserved for reconnect. If any of the following " +
                    "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                    "nect\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                    "pen.IsDurable True\"");
            this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                    "tions:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
            this.Manager.Comment("reaching state \'S634\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S635\'");
            int temp147 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker3)));
            if ((temp147 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS578();
                goto label106;
            }
            if ((temp147 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS578();
                goto label106;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker3)));
        label106:
;
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S635");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S635");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS622CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S635");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S635");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S636
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS636() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS636");
            this.Manager.Comment("reaching state \'S636\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp149;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp149);
            this.Manager.Comment("reaching state \'S637\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp149, "c of ReadConfig, state S637");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S638\'");
            int temp152 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker164)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker165)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker166)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker167)));
            if ((temp152 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label110;
            }
            if ((temp152 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label110;
            }
            if ((temp152 == 2)) {
                this.Manager.Comment("reaching state \'S639\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S640\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S641\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S642\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S643\'");
                int temp150 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker1)));
                if ((temp150 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS644();
                    goto label108;
                }
                if ((temp150 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS644();
                    goto label108;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker1)));
            label108:
;
                goto label110;
            }
            if ((temp152 == 3)) {
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S647\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S649\'");
                int temp151 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker3)));
                if ((temp151 == 0)) {
                    this.Manager.Comment("reaching state \'S650\'");
                    goto label109;
                }
                if ((temp151 == 1)) {
                    this.Manager.Comment("reaching state \'S651\'");
                    goto label109;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker3)));
            label109:
;
                goto label110;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S638\'.");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker164() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker165() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker166() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S643");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S643");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S643");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[TestInfo] If the command request does not include FileId, this section MUST be" +
                        " skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS644() {
            this.Manager.Comment("reaching state \'S644\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S643");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S643");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S643");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[TestInfo] If the command request does not include FileId, this section MUST be" +
                        " skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker167() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS636CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS652() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS652");
            this.Manager.Comment("reaching state \'S652\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp153;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp153);
            this.Manager.Comment("reaching state \'S653\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp153, "c of ReadConfig, state S653");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S654\'");
            int temp156 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker168)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker169)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker170)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker171)));
            if ((temp156 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label113;
            }
            if ((temp156 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label113;
            }
            if ((temp156 == 2)) {
                this.Manager.Comment("reaching state \'S655\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S658\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S659\'");
                int temp154 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker1)));
                if ((temp154 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS660();
                    goto label111;
                }
                if ((temp154 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS660();
                    goto label111;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker1)));
            label111:
;
                goto label113;
            }
            if ((temp156 == 3)) {
                this.Manager.Comment("reaching state \'S661\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S662\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S663\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S664\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S665\'");
                int temp155 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker3)));
                if ((temp155 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label112;
                }
                if ((temp155 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label112;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker3)));
            label112:
;
                goto label113;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S654\'.");
        label113:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker168() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker169() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker170() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S659");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS660() {
            this.Manager.Comment("reaching state \'S660\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S659");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker171() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S665");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S665");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS666() {
            this.Manager.Comment("reaching state \'S666\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS652CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S665");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S665");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S667
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS667() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS667");
            this.Manager.Comment("reaching state \'S667\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp157;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp157);
            this.Manager.Comment("reaching state \'S668\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp157, "c of ReadConfig, state S668");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S669\'");
            int temp160 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker172)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker173)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker174)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker175)));
            if ((temp160 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label116;
            }
            if ((temp160 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label116;
            }
            if ((temp160 == 2)) {
                this.Manager.Comment("reaching state \'S670\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S671\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S672\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S673\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S674\'");
                int temp158 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker1)));
                if ((temp158 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS675();
                    goto label114;
                }
                if ((temp158 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS675();
                    goto label114;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker1)));
            label114:
;
                goto label116;
            }
            if ((temp160 == 3)) {
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S677\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S678\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceBoundaryValid,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S679\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S680\'");
                int temp159 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker3)));
                if ((temp159 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label115;
                }
                if ((temp159 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label115;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker3)));
            label115:
;
                goto label116;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S669\'.");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker172() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker173() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker174() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S674");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S674");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS675() {
            this.Manager.Comment("reaching state \'S675\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S674");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S674");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker175() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S680");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S680");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS667CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S680");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S680");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S681
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS681() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS681");
            this.Manager.Comment("reaching state \'S681\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp161;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp161);
            this.Manager.Comment("reaching state \'S682\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp161, "c of ReadConfig, state S682");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S683\'");
            int temp164 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker176)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker177)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker178)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker179)));
            if ((temp164 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label119;
            }
            if ((temp164 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label119;
            }
            if ((temp164 == 2)) {
                this.Manager.Comment("reaching state \'S684\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S685\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S686\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S687\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S688\'");
                int temp162 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker1)));
                if ((temp162 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS563();
                    goto label117;
                }
                if ((temp162 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS563();
                    goto label117;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker1)));
            label117:
;
                goto label119;
            }
            if ((temp164 == 3)) {
                this.Manager.Comment("reaching state \'S689\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S690\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S691\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S692\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S693\'");
                int temp163 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker3)));
                if ((temp163 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label118;
                }
                if ((temp163 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label118;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker3)));
            label118:
;
                goto label119;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S683\'.");
        label119:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker176() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker177() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker178() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S688");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S688");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S688");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velNone\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST contin" +
                        "ue the create process specified in the \"Open Execution\" Phase, and perform the f" +
                        "ollowing additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.Cre" +
                        "ateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2]" +
                        " In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDurab" +
                        "le to TRUE. The server MUST also set Open.DurableOwner to a security descriptor " +
                        "accessible only by the user represented by Open.Session.SecurityContext.\", \"[Tes" +
                        "tInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request does n" +
                        "ot include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect" +
                        " is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S688");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S688");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S688");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velNone\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST contin" +
                        "ue the create process specified in the \"Open Execution\" Phase, and perform the f" +
                        "ollowing additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.Cre" +
                        "ateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2]" +
                        " In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDurab" +
                        "le to TRUE. The server MUST also set Open.DurableOwner to a security descriptor " +
                        "accessible only by the user represented by Open.Session.SecurityContext.\", \"[Tes" +
                        "tInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request does n" +
                        "ot include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect" +
                        " is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker179() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S693");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS694() {
            this.Manager.Comment("reaching state \'S694\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS681CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S693");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S695
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS695() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS695");
            this.Manager.Comment("reaching state \'S695\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp165;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp165);
            this.Manager.Comment("reaching state \'S696\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp165, "c of ReadConfig, state S696");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S697\'");
            int temp168 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker180)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker181)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker182)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker183)));
            if ((temp168 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label122;
            }
            if ((temp168 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label122;
            }
            if ((temp168 == 2)) {
                this.Manager.Comment("reaching state \'S698\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S699\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S700\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S701\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S702\'");
                int temp166 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker1)));
                if ((temp166 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label120;
                }
                if ((temp166 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label120;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker1)));
            label120:
;
                goto label122;
            }
            if ((temp168 == 3)) {
                this.Manager.Comment("reaching state \'S703\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S704\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S705\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S707\'");
                int temp167 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker3)));
                if ((temp167 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS708();
                    goto label121;
                }
                if ((temp167 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS708();
                    goto label121;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker3)));
            label121:
;
                goto label122;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S697\'.");
        label122:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker180() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker181() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker182() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S702");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S702");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S702");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S702");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker183() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S707");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S707");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS708() {
            this.Manager.Comment("reaching state \'S708\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS695CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S707");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S707");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS70() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS70");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp169;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp169);
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp169, "c of ReadConfig, state S71");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S72\'");
            int temp172 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker184)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker185)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker186)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker187)));
            if ((temp172 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label125;
            }
            if ((temp172 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label125;
            }
            if ((temp172 == 2)) {
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceBoundaryValid,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S77\'");
                int temp170 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker1)));
                if ((temp170 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS78();
                    goto label123;
                }
                if ((temp170 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS78();
                    goto label123;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker1)));
            label123:
;
                goto label125;
            }
            if ((temp172 == 3)) {
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S83\'");
                int temp171 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker3)));
                if ((temp171 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS84();
                    goto label124;
                }
                if ((temp171 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS85();
                    goto label124;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker3)));
            label124:
;
                goto label125;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S72\'.");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker184() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker185() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker186() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S77");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S77");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS78() {
            this.Manager.Comment("reaching state \'S78\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S77");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S77");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker187() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS70CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S709
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS709() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS709");
            this.Manager.Comment("reaching state \'S709\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp173;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp173);
            this.Manager.Comment("reaching state \'S710\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp173, "c of ReadConfig, state S710");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S711\'");
            int temp176 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker188)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker189)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker190)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker191)));
            if ((temp176 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label128;
            }
            if ((temp176 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label128;
            }
            if ((temp176 == 2)) {
                this.Manager.Comment("reaching state \'S712\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S713\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S714\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S715\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S716\'");
                int temp174 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker1)));
                if ((temp174 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS717();
                    goto label126;
                }
                if ((temp174 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS717();
                    goto label126;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker1)));
            label126:
;
                goto label128;
            }
            if ((temp176 == 3)) {
                this.Manager.Comment("reaching state \'S718\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S719\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S720\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S721\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S722\'");
                int temp175 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker3)));
                if ((temp175 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS584();
                    goto label127;
                }
                if ((temp175 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS584();
                    goto label127;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker3)));
            label127:
;
                goto label128;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S711\'.");
        label128:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker188() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker189() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker190() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locat" +
                        "e the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in th" +
                        "e SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matc" +
                        "hes the ClientGuid of the connection that received this request\", \"[TestInfo] Op" +
                        "en is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open" +
                        " is not found, the server MUST continue the create process specified in the \"Ope" +
                        "n Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3" +
                        ".5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DU" +
                        "RABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" ph" +
                        "ase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.D" +
                        "urableOwner to a security descriptor accessible only by the user represented by " +
                        "Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Te" +
                        "stInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseSta" +
                        "teNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this" +
                        " section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request com" +
                        "mand is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS717() {
            this.Manager.Comment("reaching state \'S717\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locat" +
                        "e the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in th" +
                        "e SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matc" +
                        "hes the ClientGuid of the connection that received this request\", \"[TestInfo] Op" +
                        "en is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open" +
                        " is not found, the server MUST continue the create process specified in the \"Ope" +
                        "n Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3" +
                        ".5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DU" +
                        "RABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" ph" +
                        "ase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.D" +
                        "urableOwner to a security descriptor accessible only by the user represented by " +
                        "Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Te" +
                        "stInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseSta" +
                        "teNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this" +
                        " section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request com" +
                        "mand is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker191() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S722");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S722");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S722");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loca" +
                        "te the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in t" +
                        "he SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid mat" +
                        "ches the ClientGuid of the connection that received this request\", \"[TestInfo] O" +
                        "pen is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Ope" +
                        "n is not found, the server MUST continue the create process specified in the \"Op" +
                        "en Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3." +
                        "3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_D" +
                        "URABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" p" +
                        "hase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open." +
                        "DurableOwner to a security descriptor accessible only by the user represented by" +
                        " Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS709CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S722");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S722");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S722");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loca" +
                        "te the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in t" +
                        "he SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid mat" +
                        "ches the ClientGuid of the connection that received this request\", \"[TestInfo] O" +
                        "pen is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Ope" +
                        "n is not found, the server MUST continue the create process specified in the \"Op" +
                        "en Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3." +
                        "3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_D" +
                        "URABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" p" +
                        "hase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open." +
                        "DurableOwner to a security descriptor accessible only by the user represented by" +
                        " Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S723
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS723() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS723");
            this.Manager.Comment("reaching state \'S723\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp177;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp177);
            this.Manager.Comment("reaching state \'S724\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp177, "c of ReadConfig, state S724");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S725\'");
            int temp179 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker192)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker193)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker194)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker195)));
            if ((temp179 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label130;
            }
            if ((temp179 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label130;
            }
            if ((temp179 == 2)) {
                this.Manager.Comment("reaching state \'S726\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S729\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S730\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S731\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker)));
                }
                goto label130;
            }
            if ((temp179 == 3)) {
                this.Manager.Comment("reaching state \'S732\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S733\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S734\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S735\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S736\'");
                int temp178 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker2)));
                if ((temp178 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS553();
                    goto label129;
                }
                if ((temp178 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS554();
                    goto label129;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker1)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker2)));
            label129:
;
                goto label130;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S725\'.");
        label130:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker192() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker193() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker194() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S730");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S730");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S730");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locat" +
                        "e the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in th" +
                        "e SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matc" +
                        "hes the ClientGuid of the connection that received this request\", \"[TestInfo] Op" +
                        "en is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open" +
                        " is not found, the server MUST continue the create process specified in the \"Ope" +
                        "n Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3" +
                        ".5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DU" +
                        "RABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" ph" +
                        "ase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.D" +
                        "urableOwner to a security descriptor accessible only by the user represented by " +
                        "Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Te" +
                        "stInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseSta" +
                        "teIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create respons" +
                        "e from Open, as specified in the \"Response Construction\" phase, with the followi" +
                        "ng additional steps, and send the response to client\", \"[TestInfo] Open.IsPersis" +
                        "tent is FALSE\", \"[TestInfo] If the command request does not include FileId, this" +
                        " section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request com" +
                        "mand is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker195() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S736");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S736");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S736");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS723CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S736");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S736");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S736");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S737
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS737() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS737");
            this.Manager.Comment("reaching state \'S737\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp180;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp180);
            this.Manager.Comment("reaching state \'S738\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp180, "c of ReadConfig, state S738");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S739\'");
            int temp183 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker196)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker197)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker198)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker199)));
            if ((temp183 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label133;
            }
            if ((temp183 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label133;
            }
            if ((temp183 == 2)) {
                this.Manager.Comment("reaching state \'S740\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S741\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S742\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S743\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S744\'");
                int temp181 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker1)));
                if ((temp181 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS675();
                    goto label131;
                }
                if ((temp181 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS675();
                    goto label131;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker1)));
            label131:
;
                goto label133;
            }
            if ((temp183 == 3)) {
                this.Manager.Comment("reaching state \'S745\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S746\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S747\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S748\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S749\'");
                int temp182 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker3)));
                if ((temp182 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS750();
                    goto label132;
                }
                if ((temp182 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS750();
                    goto label132;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker3)));
            label132:
;
                goto label133;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S739\'.");
        label133:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker196() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker197() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker198() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S744");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S744");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S744");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S744");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S744");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S744");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker199() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S749");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S749");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S749");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS750() {
            this.Manager.Comment("reaching state \'S750\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS737CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S749");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S749");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S749");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S751
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS751() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS751");
            this.Manager.Comment("reaching state \'S751\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp184;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp184);
            this.Manager.Comment("reaching state \'S752\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp184, "c of ReadConfig, state S752");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S753\'");
            int temp187 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker200)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker201)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker202)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker203)));
            if ((temp187 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label136;
            }
            if ((temp187 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label136;
            }
            if ((temp187 == 2)) {
                this.Manager.Comment("reaching state \'S754\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S755\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S756\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S757\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S758\'");
                int temp185 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker1)));
                if ((temp185 == 0)) {
                    this.Manager.Comment("reaching state \'S759\'");
                    goto label134;
                }
                if ((temp185 == 1)) {
                    this.Manager.Comment("reaching state \'S760\'");
                    goto label134;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker1)));
            label134:
;
                goto label136;
            }
            if ((temp187 == 3)) {
                this.Manager.Comment("reaching state \'S761\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S762\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S763\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S764\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S765\'");
                int temp186 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker3)));
                if ((temp186 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label135;
                }
                if ((temp186 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label135;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker3)));
            label135:
;
                goto label136;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S753\'.");
        label136:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker200() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker201() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker202() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S758");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S758");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker203() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S765");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS751CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S765");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S766
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS766() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS766");
            this.Manager.Comment("reaching state \'S766\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp188;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp188);
            this.Manager.Comment("reaching state \'S767\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp188, "c of ReadConfig, state S767");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S768\'");
            int temp190 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker204)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker205)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker206)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker207)));
            if ((temp190 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label138;
            }
            if ((temp190 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label138;
            }
            if ((temp190 == 2)) {
                this.Manager.Comment("reaching state \'S769\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S770\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S771\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S772\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S773\'");
                int temp189 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker1)));
                if ((temp189 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label137;
                }
                if ((temp189 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label137;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker1)));
            label137:
;
                goto label138;
            }
            if ((temp190 == 3)) {
                this.Manager.Comment("reaching state \'S774\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S775\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S776\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S777\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S778\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker2))) != -1)) {
                    ReplayCreateDurableHandleV1TestCaseS538();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker2)));
                }
                goto label138;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S768\'.");
        label138:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker204() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker205() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker206() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S773");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S773");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S773");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S773");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S773");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S773");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker207() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS766CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S778");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S778");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S778");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Le" +
                        "aseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create r" +
                        "esponse from Open, as specified in the \"Response Construction\" phase, with the f" +
                        "ollowing additional steps, and send the response to client\", \"[TestInfo] Open.Is" +
                        "Persistent is FALSE\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S779
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS779() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS779");
            this.Manager.Comment("reaching state \'S779\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp191;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp191);
            this.Manager.Comment("reaching state \'S780\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp191, "c of ReadConfig, state S780");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S781\'");
            int temp194 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker208)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker209)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker210)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker211)));
            if ((temp194 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label141;
            }
            if ((temp194 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label141;
            }
            if ((temp194 == 2)) {
                this.Manager.Comment("reaching state \'S782\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S783\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S784\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S785\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S786\'");
                int temp192 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker1)));
                if ((temp192 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label139;
                }
                if ((temp192 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS14();
                    goto label139;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker1)));
            label139:
;
                goto label141;
            }
            if ((temp194 == 3)) {
                this.Manager.Comment("reaching state \'S787\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S788\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S789\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S790\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S791\'");
                int temp193 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker3)));
                if ((temp193 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label140;
                }
                if ((temp193 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label140;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker3)));
            label140:
;
                goto label141;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S781\'.");
        label141:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker208() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker209() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker210() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S786");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S786");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S786");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S786");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S786");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S786");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker211() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S791");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S791");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requeste" +
                        "dOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_" +
                        "PERSISTENT bit is not set in the Flags field of this create context, if Requeste" +
                        "dOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if" +
                        " the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_" +
                        "REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE" +
                        "_HANDLE_CACHING, the server MUST ignore this create context and skip this sectio" +
                        "n\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inclu" +
                        "de FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb3" +
                        "0, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS779CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S791");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S791");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requeste" +
                        "dOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_" +
                        "PERSISTENT bit is not set in the Flags field of this create context, if Requeste" +
                        "dOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if" +
                        " the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_" +
                        "REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE" +
                        "_HANDLE_CACHING, the server MUST ignore this create context and skip this sectio" +
                        "n\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inclu" +
                        "de FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb3" +
                        "0, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S792
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS792() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS792");
            this.Manager.Comment("reaching state \'S792\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp195;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp195);
            this.Manager.Comment("reaching state \'S793\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp195, "c of ReadConfig, state S793");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S794\'");
            int temp198 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker212)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker213)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker214)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker215)));
            if ((temp198 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label144;
            }
            if ((temp198 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label144;
            }
            if ((temp198 == 2)) {
                this.Manager.Comment("reaching state \'S795\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S796\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S797\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S798\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S799\'");
                int temp196 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker1)));
                if ((temp196 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label142;
                }
                if ((temp196 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label142;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker1)));
            label142:
;
                goto label144;
            }
            if ((temp198 == 3)) {
                this.Manager.Comment("reaching state \'S800\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S801\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S802\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S803\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S804\'");
                int temp197 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker3)));
                if ((temp197 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS805();
                    goto label143;
                }
                if ((temp197 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS805();
                    goto label143;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker3)));
            label143:
;
                goto label144;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S794\'.");
        label144:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker212() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker213() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker214() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S799");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S799");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S799");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S799");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S799");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S799");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker215() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S804");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S804");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT" +
                        " bit is not set in the Flags field of this create context, if RequestedOplockLev" +
                        "el in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the creat" +
                        "e request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LE" +
                        "ASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CA" +
                        "CHING, the server MUST ignore this create context and skip this section\", \"[Test" +
                        "Tag] Compatibility\", \"[TestInfo] If the command request does not include FileId," +
                        " this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request" +
                        " command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS805() {
            this.Manager.Comment("reaching state \'S805\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS792CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S804");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S804");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT" +
                        " bit is not set in the Flags field of this create context, if RequestedOplockLev" +
                        "el in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the creat" +
                        "e request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LE" +
                        "ASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CA" +
                        "CHING, the server MUST ignore this create context and skip this section\", \"[Test" +
                        "Tag] Compatibility\", \"[TestInfo] If the command request does not include FileId," +
                        " this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request" +
                        " command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S806
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS806() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS806");
            this.Manager.Comment("reaching state \'S806\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp199;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp199);
            this.Manager.Comment("reaching state \'S807\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp199, "c of ReadConfig, state S807");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S808\'");
            int temp202 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker216)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker217)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker218)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker219)));
            if ((temp202 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label147;
            }
            if ((temp202 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label147;
            }
            if ((temp202 == 2)) {
                this.Manager.Comment("reaching state \'S809\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S810\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S811\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S812\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S813\'");
                int temp200 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker1)));
                if ((temp200 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS675();
                    goto label145;
                }
                if ((temp200 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS675();
                    goto label145;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker1)));
            label145:
;
                goto label147;
            }
            if ((temp202 == 3)) {
                this.Manager.Comment("reaching state \'S814\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S815\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S816\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S817\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S818\'");
                int temp201 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker3)));
                if ((temp201 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label146;
                }
                if ((temp201 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS666();
                    goto label146;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker3)));
            label146:
;
                goto label147;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S808\'.");
        label147:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker216() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker217() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker218() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S813");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S813");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S813");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S813");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker219() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S818");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S818");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S818");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS806CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S818");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S818");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S818");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S819
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS819() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS819");
            this.Manager.Comment("reaching state \'S819\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp203;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp203);
            this.Manager.Comment("reaching state \'S820\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp203, "c of ReadConfig, state S820");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S821\'");
            int temp206 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker220)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker221)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker222)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker223)));
            if ((temp206 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label150;
            }
            if ((temp206 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label150;
            }
            if ((temp206 == 2)) {
                this.Manager.Comment("reaching state \'S822\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S823\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S824\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S825\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S826\'");
                int temp204 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker1)));
                if ((temp204 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label148;
                }
                if ((temp204 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS607();
                    goto label148;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker1)));
            label148:
;
                goto label150;
            }
            if ((temp206 == 3)) {
                this.Manager.Comment("reaching state \'S827\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S828\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S829\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S830\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S831\'");
                int temp205 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker3)));
                if ((temp205 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS630();
                    goto label149;
                }
                if ((temp205 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS630();
                    goto label149;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker3)));
            label149:
;
                goto label150;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S821\'.");
        label150:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker220() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker221() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker222() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S826");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S826");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S826");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S826");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker223() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S831");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S831");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S831");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS819CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S831");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S831");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S831");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S832
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS832() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS832");
            this.Manager.Comment("reaching state \'S832\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp207;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp207);
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp207, "c of ReadConfig, state S833");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S834\'");
            int temp210 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker224)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker225)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker226)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker227)));
            if ((temp210 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label153;
            }
            if ((temp210 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label153;
            }
            if ((temp210 == 2)) {
                this.Manager.Comment("reaching state \'S835\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S836\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S837\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S838\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S839\'");
                int temp208 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker1)));
                if ((temp208 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS516();
                    goto label151;
                }
                if ((temp208 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS516();
                    goto label151;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker1)));
            label151:
;
                goto label153;
            }
            if ((temp210 == 3)) {
                this.Manager.Comment("reaching state \'S840\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S841\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S842\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S843\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S844\'");
                int temp209 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker3)));
                if ((temp209 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label152;
                }
                if ((temp209 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label152;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker3)));
            label152:
;
                goto label153;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S834\'.");
        label153:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker224() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker225() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker226() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S839");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S839");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S839");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loc" +
                        "ate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in " +
                        "the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid ma" +
                        "tches the ClientGuid of the connection that received this request\", \"[TestInfo] " +
                        "Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Op" +
                        "en is not found, the server MUST continue the create process specified in the \"O" +
                        "pen Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3" +
                        ".3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_" +
                        "DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" " +
                        "phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open" +
                        ".DurableOwner to a security descriptor accessible only by the user represented b" +
                        "y Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S839");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S839");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S839");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loc" +
                        "ate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in " +
                        "the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid ma" +
                        "tches the ClientGuid of the connection that received this request\", \"[TestInfo] " +
                        "Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Op" +
                        "en is not found, the server MUST continue the create process specified in the \"O" +
                        "pen Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3" +
                        ".3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_" +
                        "DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" " +
                        "phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open" +
                        ".DurableOwner to a security descriptor accessible only by the user represented b" +
                        "y Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker227() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S844");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S844");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S844");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS832CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S844");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S844");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S844");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S845
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS845() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS845");
            this.Manager.Comment("reaching state \'S845\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp211;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp211);
            this.Manager.Comment("reaching state \'S846\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp211, "c of ReadConfig, state S846");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S847\'");
            int temp214 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker228)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker229)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker230)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker231)));
            if ((temp214 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label156;
            }
            if ((temp214 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label156;
            }
            if ((temp214 == 2)) {
                this.Manager.Comment("reaching state \'S848\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S849\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S850\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S851\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S852\'");
                int temp212 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker1)));
                if ((temp212 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS531();
                    goto label154;
                }
                if ((temp212 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS532();
                    goto label154;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker1)));
            label154:
;
                goto label156;
            }
            if ((temp214 == 3)) {
                this.Manager.Comment("reaching state \'S853\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S854\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S855\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S856\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S857\'");
                int temp213 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker3)));
                if ((temp213 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS630();
                    goto label155;
                }
                if ((temp213 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS630();
                    goto label155;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker3)));
            label155:
;
                goto label156;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S847\'.");
        label156:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker228() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker229() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker230() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S852");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S852");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S852");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S852");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S852");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S852");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker231() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S857");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S857");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S857");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS845CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S857");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S857");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S857");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S858
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS858() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS858");
            this.Manager.Comment("reaching state \'S858\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp215;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp215);
            this.Manager.Comment("reaching state \'S859\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp215, "c of ReadConfig, state S859");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S860\'");
            int temp218 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker232)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker233)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker234)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker235)));
            if ((temp218 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label159;
            }
            if ((temp218 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label159;
            }
            if ((temp218 == 2)) {
                this.Manager.Comment("reaching state \'S861\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S862\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S863\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S864\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S865\'");
                int temp216 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker1)));
                if ((temp216 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS532();
                    goto label157;
                }
                if ((temp216 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS563();
                    goto label157;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker1)));
            label157:
;
                goto label159;
            }
            if ((temp218 == 3)) {
                this.Manager.Comment("reaching state \'S866\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S867\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S868\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S869\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S870\'");
                int temp217 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker3)));
                if ((temp217 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label158;
                }
                if ((temp217 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label158;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker3)));
            label158:
;
                goto label159;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S860\'.");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker232() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker233() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker234() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker235() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S870");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S870");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S870");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS858CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S870");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S870");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S870");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS86() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS86");
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp219;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp219);
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp219, "c of ReadConfig, state S87");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S88\'");
            int temp222 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker236)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker237)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker238)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker239)));
            if ((temp222 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS42();
                goto label162;
            }
            if ((temp222 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label162;
            }
            if ((temp222 == 2)) {
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S93\'");
                int temp220 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker1)));
                if ((temp220 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS94();
                    goto label160;
                }
                if ((temp220 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS94();
                    goto label160;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker1)));
            label160:
;
                goto label162;
            }
            if ((temp222 == 3)) {
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S99\'");
                int temp221 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker3)));
                if ((temp221 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS100();
                    goto label161;
                }
                if ((temp221 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS100();
                    goto label161;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker3)));
            label161:
;
                goto label162;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S88\'.");
        label162:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker236() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker237() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker238() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUS" +
                        "T locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGui" +
                        "d in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGu" +
                        "id matches the ClientGuid of the connection that received this request\", \"[TestI" +
                        "nfo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If " +
                        "an Open is not found, the server MUST continue the create process specified in t" +
                        "he \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SM" +
                        "B2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializat" +
                        "ion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set" +
                        " Open.DurableOwner to a security descriptor accessible only by the user represen" +
                        "ted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE" +
                        "\", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is L" +
                        "easeStateNotIncludeH\", \"[TestInfo] If the command request does not include FileI" +
                        "d, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS94() {
            this.Manager.Comment("reaching state \'S94\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUS" +
                        "T locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGui" +
                        "d in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGu" +
                        "id matches the ClientGuid of the connection that received this request\", \"[TestI" +
                        "nfo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If " +
                        "an Open is not found, the server MUST continue the create process specified in t" +
                        "he \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SM" +
                        "B2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializat" +
                        "ion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set" +
                        " Open.DurableOwner to a security descriptor accessible only by the user represen" +
                        "ted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE" +
                        "\", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is L" +
                        "easeStateNotIncludeH\", \"[TestInfo] If the command request does not include FileI" +
                        "d, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker239() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS86CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S871
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS871() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS871");
            this.Manager.Comment("reaching state \'S871\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp223;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp223);
            this.Manager.Comment("reaching state \'S872\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp223, "c of ReadConfig, state S872");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S873\'");
            int temp226 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker240)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker241)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker242)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker243)));
            if ((temp226 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label165;
            }
            if ((temp226 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label165;
            }
            if ((temp226 == 2)) {
                this.Manager.Comment("reaching state \'S874\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,DurableHandl" +
                        "eV1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S875\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S876\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelBatch, Open.OplockState is not Held, O" +
                        "pen.IsDurable True\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S877\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S878\'");
                int temp224 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker1)));
                if ((temp224 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS578();
                    goto label163;
                }
                if ((temp224 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS578();
                    goto label163;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker1)));
            label163:
;
                goto label165;
            }
            if ((temp226 == 3)) {
                this.Manager.Comment("reaching state \'S879\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S880\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S881\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelII, Open.OplockState is not Held, Open" +
                        ".IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S882\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S883\'");
                int temp225 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker3)));
                if ((temp225 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS805();
                    goto label164;
                }
                if ((temp225 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS805();
                    goto label164;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker3)));
            label164:
;
                goto label165;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S873\'.");
        label165:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker240() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker241() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker242() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker243() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S883");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S883");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S883");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS871CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S883");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S883");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S883");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S884
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS884() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS884");
            this.Manager.Comment("reaching state \'S884\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp227;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp227);
            this.Manager.Comment("reaching state \'S885\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp227, "c of ReadConfig, state S885");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S886\'");
            int temp230 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker244)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker245)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker246)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker247)));
            if ((temp230 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label168;
            }
            if ((temp230 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label168;
            }
            if ((temp230 == 2)) {
                this.Manager.Comment("reaching state \'S887\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. This permits the client to use Open.DurableFileId to request a reopen of the file on a subsequent request as specified in section 3.3.5.9.7. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext.""");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S891\'");
                int temp228 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker1)));
                if ((temp228 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS892();
                    goto label166;
                }
                if ((temp228 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS892();
                    goto label166;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker1)));
            label166:
;
                goto label168;
            }
            if ((temp230 == 3)) {
                this.Manager.Comment("reaching state \'S893\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S894\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S895\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S896\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S897\'");
                int temp229 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker3)));
                if ((temp229 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS898();
                    goto label167;
                }
                if ((temp229 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS898();
                    goto label167;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker2)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker3)));
            label167:
;
                goto label168;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S886\'.");
        label168:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker244() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker245() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker246() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS892() {
            this.Manager.Comment("reaching state \'S892\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateNotIncludeH\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker247() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S897");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S897");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS898() {
            this.Manager.Comment("reaching state \'S898\'");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS884CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S897");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S897");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S899
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateDurableHandleV1TestCaseS899() {
            this.Manager.BeginTest("ReplayCreateDurableHandleV1TestCaseS899");
            this.Manager.Comment("reaching state \'S899\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp231;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp231);
            this.Manager.Comment("reaching state \'S900\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp231, "c of ReadConfig, state S900");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S901\'");
            int temp233 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker248)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker249)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker250)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker251)));
            if ((temp233 == 0)) {
                ReplayCreateDurableHandleV1TestCaseS340();
                goto label170;
            }
            if ((temp233 == 1)) {
                ReplayCreateDurableHandleV1TestCaseS48();
                goto label170;
            }
            if ((temp233 == 2)) {
                ReplayCreateDurableHandleV1TestCaseS631();
                goto label170;
            }
            if ((temp233 == 3)) {
                this.Manager.Comment("reaching state \'S902\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,DurableHandle" +
                        "V1,NonCAShare,OplockLevelBatch,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                        "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                        "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                        "CK_LEVEL_II\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
                this.Manager.Checkpoint("\"[TestInfo] Create context is ignored and skipped due to above conditions\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S903\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S904\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S905\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S906\'");
                int temp232 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS899CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS899CreateResponseChecker1)));
                if ((temp232 == 0)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label169;
                }
                if ((temp232 == 1)) {
                    ReplayCreateDurableHandleV1TestCaseS694();
                    goto label169;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS899CreateResponseChecker)), new ExpectedEvent(ReplayCreateDurableHandleV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateDurableHandleV1TestCaseS899CreateResponseChecker1)));
            label169:
;
                goto label170;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S901\'.");
        label170:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker248() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker249() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker250() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker251() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS899CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S906");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S906");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateDurableHandleV1TestCaseS899CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S906");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S906");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
    }
}
