// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DurableHandleV1PreparedWithLeaseV1ReconnectTestCase : PtfTestClassBase {
        
        public DurableHandleV1PreparedWithLeaseV1ReconnectTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void OpenResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void PreConstraintDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig).MakeByRefType());
        
        static System.Reflection.EventInfo OpenResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "OpenResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter IHandleAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c1;
        
        private IVariable<int> durableHandleResponseContext;
        
        private IVariable<int> leaseResponseContext;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IHandleAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter))));
            this.Manager.Subscribe(OpenResponseInfo, this.IHandleAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c1");
            this.durableHandleResponseContext = this.Manager.CreateVariable<int>("durableHandleResponseContext");
            this.leaseResponseContext = this.Manager.CreateVariable<int>("leaseResponseContext");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker3)));
            if ((temp10 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S4\'");
                int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
                if ((temp3 == 0)) {
                    this.Manager.Comment("reaching state \'S13\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S14\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S15\'");
                    int temp1 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)));
                    if ((temp1 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        this.Manager.Comment("reaching state \'S16\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S17\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S18\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS19();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker)));
                        }
                        goto label0;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S15\'.");
                label0:
;
                    goto label2;
                }
                if ((temp3 == 1)) {
                    this.Manager.Comment("reaching state \'S5\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S6\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS7();
                    goto label2;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S4\'.");
            label2:
;
                goto label9;
            }
            if ((temp10 == 1)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S22\'");
                int temp6 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S23\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S24\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS25();
                    goto label5;
                }
                if ((temp6 == 1)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S33\'");
                    int temp5 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
                    if ((temp5 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label4;
                    }
                    if ((temp5 == 1)) {
                        this.Manager.Comment("reaching state \'S34\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S35\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S36\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker3))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS37();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker3)));
                        }
                        goto label4;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S33\'.");
                label4:
;
                    goto label5;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S22\'.");
            label5:
;
                goto label9;
            }
            if ((temp10 == 2)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S40\'");
                int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
                if ((temp9 == 0)) {
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S43\'");
                    int temp7 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)));
                    if ((temp7 == 0)) {
                        this.Manager.Comment("reaching state \'S44\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                                "id)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S45\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S46\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker4))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS47();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker4)));
                        }
                        goto label6;
                    }
                    if ((temp7 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS48();
                        goto label6;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S43\'.");
                label6:
;
                    goto label8;
                }
                if ((temp9 == 1)) {
                    this.Manager.Comment("reaching state \'S49\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S50\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS51();
                    goto label8;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S40\'.");
            label8:
;
                goto label9;
            }
            if ((temp10 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS12() {
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S12\'.");
        }
        
        private void PreConstraintChecker2() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS7() {
            this.Manager.Comment("reaching state \'S7\'");
            int temp2 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
            if ((temp2 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS12();
                goto label1;
            }
            if ((temp2 == 1)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                        "eGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S10\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S11\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker1)));
                }
                goto label1;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S7\'.");
        label1:
;
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker5() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
            int temp4 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                        "id)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S28\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker2))) != -1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS29();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker2)));
                }
                goto label3;
            }
            if ((temp4 == 1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30();
                goto label3;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S25\'.");
        label3:
;
        }
        
        private void PreConstraintChecker7() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S28");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S28");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S28");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS29() {
            this.Manager.Comment("reaching state \'S29\'");
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30() {
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S30\'.");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker11() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker13() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S46");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S46");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S46");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS47() {
            this.Manager.Comment("reaching state \'S47\'");
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS48() {
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S48\'.");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
            int temp8 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
            if ((temp8 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS48();
                goto label7;
            }
            if ((temp8 == 1)) {
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                        ")\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S54\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker5))) != -1)) {
                    this.Manager.Comment("reaching state \'S55\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker5)));
                }
                goto label7;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S51\'.");
        label7:
;
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker17() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S54");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S54");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S54");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56() {
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S56\'.");
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126");
            this.Manager.Comment("reaching state \'S126\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp11;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp11);
            this.Manager.AddReturn(ReadConfigInfo, null, temp11);
            this.Manager.Comment("reaching state \'S127\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker3)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S130\'");
                int temp13 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)));
                if ((temp13 == 0)) {
                    this.Manager.Comment("reaching state \'S131\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S132\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S133\'");
                    int temp12 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)));
                    if ((temp12 == 0)) {
                        this.Manager.Comment("reaching state \'S134\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S135\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S136\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS137();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker)));
                        }
                        goto label10;
                    }
                    if ((temp12 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS70();
                        goto label10;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S133\'.");
                label10:
;
                    goto label11;
                }
                if ((temp13 == 1)) {
                    this.Manager.Comment("reaching state \'S138\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S139\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S140\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS141();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker1)));
                    }
                    goto label11;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S130\'.");
            label11:
;
                goto label15;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S144\'");
                int temp15 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
                if ((temp15 == 0)) {
                    this.Manager.Comment("reaching state \'S145\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S146\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS51();
                    goto label13;
                }
                if ((temp15 == 1)) {
                    this.Manager.Comment("reaching state \'S147\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S148\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S149\'");
                    int temp14 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)));
                    if ((temp14 == 0)) {
                        this.Manager.Comment("reaching state \'S150\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S151\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S152\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S153\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker2)));
                        }
                        goto label12;
                    }
                    if ((temp14 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS48();
                        goto label12;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S149\'.");
                label12:
;
                    goto label13;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S144\'.");
            label13:
;
                goto label15;
            }
            if ((temp17 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label15;
            }
            if ((temp17 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker19() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S136");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S136");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S136");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS137() {
            this.Manager.Comment("reaching state \'S137\'");
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS70() {
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S70\'.");
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S140");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S140");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S140");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS141() {
            this.Manager.Comment("reaching state \'S141\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker24() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect is ""2.100"", the server supports leasing, and Open.Lease is not NULL, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE create context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect is \"2.100\", the server supports leasing, and Ope" +
                    "n.Lease is not NULL, then the server MUST construct an SMB2_CREATE_RESPONSE_LEAS" +
                    "E create context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88() {
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                    "leV1,LeaseV1)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                    "UST set Open.IsDurable to TRUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S90\'");
            int temp16 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
            if ((temp16 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91();
                goto label14;
            }
            if ((temp16 == 1)) {
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                        ")\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S97\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker4))) != -1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS98();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker4)));
                }
                goto label14;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S90\'.");
        label14:
;
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91() {
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                    "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                    ")\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S93\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker3))) != -1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS94();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker3)));
            }
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S93");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS94() {
            this.Manager.Comment("reaching state \'S94\'");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS126OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S97");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S97");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S97");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS98() {
            this.Manager.Comment("reaching state \'S98\'");
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154");
            this.Manager.Comment("reaching state \'S154\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp18;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp18);
            this.Manager.AddReturn(ReadConfigInfo, null, temp18);
            this.Manager.Comment("reaching state \'S155\'");
            int temp26 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker3)));
            if ((temp26 == 0)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S158\'");
                int temp21 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
                if ((temp21 == 0)) {
                    this.Manager.Comment("reaching state \'S159\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S160\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS161();
                    goto label18;
                }
                if ((temp21 == 1)) {
                    this.Manager.Comment("reaching state \'S167\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S168\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S169\'");
                    int temp20 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)));
                    if ((temp20 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS166();
                        goto label17;
                    }
                    if ((temp20 == 1)) {
                        this.Manager.Comment("reaching state \'S170\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S171\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S172\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker1))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS173();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker1)));
                        }
                        goto label17;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S169\'.");
                label17:
;
                    goto label18;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S158\'.");
            label18:
;
                goto label23;
            }
            if ((temp26 == 1)) {
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S176\'");
                int temp24 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)));
                if ((temp24 == 0)) {
                    this.Manager.Comment("reaching state \'S177\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S178\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S179\'");
                    int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)));
                    if ((temp22 == 0)) {
                        this.Manager.Comment("reaching state \'S180\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S181\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S182\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker2))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS183();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker2)));
                        }
                        goto label19;
                    }
                    if ((temp22 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS184();
                        goto label19;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S179\'.");
                label19:
;
                    goto label21;
                }
                if ((temp24 == 1)) {
                    this.Manager.Comment("reaching state \'S185\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S186\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S187\'");
                    int temp23 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
                    if ((temp23 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS184();
                        goto label20;
                    }
                    if ((temp23 == 1)) {
                        this.Manager.Comment("reaching state \'S188\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S189\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S190\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker3))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS191();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker3)));
                        }
                        goto label20;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S187\'.");
                label20:
;
                    goto label21;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S176\'.");
            label21:
;
                goto label23;
            }
            if ((temp26 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label23;
            }
            if ((temp26 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S155");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS161() {
            this.Manager.Comment("reaching state \'S161\'");
            int temp19 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                        ")\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S164\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S165\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker)));
                }
                goto label16;
            }
            if ((temp19 == 1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS166();
                goto label16;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S161\'.");
        label16:
;
        }
        
        private void PreConstraintChecker29() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S164");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S164");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S164");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S164");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS166() {
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S166\'.");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker33() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S172");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S172");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S172");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS173() {
            this.Manager.Comment("reaching state \'S173\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S155");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker35() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S182");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S182");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S182");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS183() {
            this.Manager.Comment("reaching state \'S183\'");
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS184() {
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S184\'.");
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker39() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S190");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S190");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S190");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS191() {
            this.Manager.Comment("reaching state \'S191\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S155");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192() {
            this.Manager.Comment("reaching state \'S192\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                    "leV1,LeaseV1)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                    "UST set Open.IsDurable to TRUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S194\'");
            int temp25 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)));
            if ((temp25 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS123();
                goto label22;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                        ")\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S197\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker5))) != -1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS198();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker5)));
                }
                goto label22;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S194\'.");
        label22:
;
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS123() {
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                    "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                    ")\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S125\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker4))) != -1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS87();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker4)));
            }
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S125");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S125");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S125");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS87() {
            this.Manager.Comment("reaching state \'S87\'");
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S197");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S197");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S197");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS198() {
            this.Manager.Comment("reaching state \'S198\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS154ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S155");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S199
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199");
            this.Manager.Comment("reaching state \'S199\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp27;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp27);
            this.Manager.AddReturn(ReadConfigInfo, null, temp27);
            this.Manager.Comment("reaching state \'S200\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker3)));
            if ((temp33 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label29;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S203\'");
                int temp29 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)));
                if ((temp29 == 0)) {
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S206\'");
                    int temp28 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)));
                    if ((temp28 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS166();
                        goto label24;
                    }
                    if ((temp28 == 1)) {
                        this.Manager.Comment("reaching state \'S207\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S208\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S209\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S210\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker)));
                        }
                        goto label24;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S206\'.");
                label24:
;
                    goto label25;
                }
                if ((temp29 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS211();
                    goto label25;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S203\'.");
            label25:
;
                goto label29;
            }
            if ((temp33 == 2)) {
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S217\'");
                int temp32 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)));
                if ((temp32 == 0)) {
                    this.Manager.Comment("reaching state \'S218\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S219\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S220\'");
                    int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)));
                    if ((temp31 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS184();
                        goto label27;
                    }
                    if ((temp31 == 1)) {
                        this.Manager.Comment("reaching state \'S221\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S222\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S223\'");
                        int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker3)));
                        if ((temp30 == 0)) {
                            this.Manager.Comment("reaching state \'S224\'");
                            goto label26;
                        }
                        if ((temp30 == 1)) {
                            this.Manager.Comment("reaching state \'S225\'");
                            goto label26;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker3)));
                    label26:
;
                        goto label27;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S220\'.");
                label27:
;
                    goto label28;
                }
                if ((temp32 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91();
                    goto label28;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S217\'.");
            label28:
;
                goto label29;
            }
            if ((temp33 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker44() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S209");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S209");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S209");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS211() {
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                    "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                    ")\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S212\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S213\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker1))) != -1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS214();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker1)));
            }
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S213");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S213");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS214() {
            this.Manager.Comment("reaching state \'S214\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker48() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S223");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S223");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the ser" +
                    "ver MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S223");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S223");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the ser" +
                    "ver MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS199ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S200");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226");
            this.Manager.Comment("reaching state \'S226\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp34;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp34);
            this.Manager.AddReturn(ReadConfigInfo, null, temp34);
            this.Manager.Comment("reaching state \'S227\'");
            int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker3)));
            if ((temp38 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label33;
            }
            if ((temp38 == 1)) {
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S230\'");
                int temp35 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
                if ((temp35 == 0)) {
                    this.Manager.Comment("reaching state \'S231\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S232\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S233\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS214();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker)));
                    }
                    goto label30;
                }
                if ((temp35 == 1)) {
                    this.Manager.Comment("reaching state \'S234\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S235\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S236\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS237();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker1)));
                    }
                    goto label30;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S230\'.");
            label30:
;
                goto label33;
            }
            if ((temp38 == 2)) {
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S240\'");
                int temp37 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)));
                if ((temp37 == 0)) {
                    this.Manager.Comment("reaching state \'S241\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S242\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S243\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker2))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS94();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker2)));
                    }
                    goto label32;
                }
                if ((temp37 == 1)) {
                    this.Manager.Comment("reaching state \'S244\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S245\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S246\'");
                    int temp36 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
                    if ((temp36 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS184();
                        goto label31;
                    }
                    if ((temp36 == 1)) {
                        this.Manager.Comment("reaching state \'S247\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S248\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S249\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S250\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker3)));
                        }
                        goto label31;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S246\'.");
                label31:
;
                    goto label32;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S240\'.");
            label32:
;
                goto label33;
            }
            if ((temp38 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S227");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S227");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S236");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S236");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S236");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS237() {
            this.Manager.Comment("reaching state \'S237\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S227");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S243");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S243");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S243");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S243");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker55() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S249");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S249");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S249");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS226ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S227");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S251
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251");
            this.Manager.Comment("reaching state \'S251\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp39;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp39);
            this.Manager.AddReturn(ReadConfigInfo, null, temp39);
            this.Manager.Comment("reaching state \'S252\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker3)));
            if ((temp41 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label35;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S255\'");
                int temp40 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)));
                if ((temp40 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS211();
                    goto label34;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S256\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S257\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S258\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS237();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251OpenResponseChecker)));
                    }
                    goto label34;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S255\'.");
            label34:
;
                goto label35;
            }
            if ((temp41 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label35;
            }
            if ((temp41 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S252");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S252");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker57() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S258");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S258");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S258");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S252");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS251ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S252");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S259
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259");
            this.Manager.Comment("reaching state \'S259\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp42);
            this.Manager.AddReturn(ReadConfigInfo, null, temp42);
            this.Manager.Comment("reaching state \'S260\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker3)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S263\'");
                int temp43 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
                if ((temp43 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS123();
                    goto label36;
                }
                if ((temp43 == 1)) {
                    this.Manager.Comment("reaching state \'S264\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S265\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S266\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS198();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259OpenResponseChecker)));
                    }
                    goto label36;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S263\'.");
            label36:
;
                goto label38;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S269\'");
                int temp44 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)));
                if ((temp44 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS211();
                    goto label37;
                }
                if ((temp44 == 1)) {
                    this.Manager.Comment("reaching state \'S270\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S271\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S272\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS237();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259OpenResponseChecker1)));
                    }
                    goto label37;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S269\'.");
            label37:
;
                goto label38;
            }
            if ((temp45 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label38;
            }
            if ((temp45 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S266");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S266");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S266");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S266");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S272");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S272");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S272");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S272");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS259ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S273
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273");
            this.Manager.Comment("reaching state \'S273\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp46);
            this.Manager.AddReturn(ReadConfigInfo, null, temp46);
            this.Manager.Comment("reaching state \'S274\'");
            int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker3)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S277\'");
                int temp47 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)));
                if ((temp47 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS123();
                    goto label39;
                }
                if ((temp47 == 1)) {
                    this.Manager.Comment("reaching state \'S278\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S279\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S280\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS198();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273OpenResponseChecker)));
                    }
                    goto label39;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S277\'.");
            label39:
;
                goto label41;
            }
            if ((temp49 == 1)) {
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S283\'");
                int temp48 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)));
                if ((temp48 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS211();
                    goto label40;
                }
                if ((temp48 == 1)) {
                    this.Manager.Comment("reaching state \'S284\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S285\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S286\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS237();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273OpenResponseChecker1)));
                    }
                    goto label40;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S283\'.");
            label40:
;
                goto label41;
            }
            if ((temp49 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label41;
            }
            if ((temp49 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker63() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S280");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S280");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S280");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S286");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S286");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S286");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS273ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S287
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287");
            this.Manager.Comment("reaching state \'S287\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp50;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp50);
            this.Manager.AddReturn(ReadConfigInfo, null, temp50);
            this.Manager.Comment("reaching state \'S288\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker3)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S291\'");
                int temp51 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
                if ((temp51 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS123();
                    goto label42;
                }
                if ((temp51 == 1)) {
                    this.Manager.Comment("reaching state \'S292\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S293\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S294\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS198();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287OpenResponseChecker)));
                    }
                    goto label42;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S291\'.");
            label42:
;
                goto label44;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S297\'");
                int temp52 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)));
                if ((temp52 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS211();
                    goto label43;
                }
                if ((temp52 == 1)) {
                    this.Manager.Comment("reaching state \'S298\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                            "id)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S299\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S300\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS237();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287OpenResponseChecker1)));
                    }
                    goto label43;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S297\'.");
            label43:
;
                goto label44;
            }
            if ((temp53 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label44;
            }
            if ((temp53 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S288");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S294");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S288");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S300");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S300");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S288");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS287ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S288");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S301
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301");
            this.Manager.Comment("reaching state \'S301\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp54);
            this.Manager.AddReturn(ReadConfigInfo, null, temp54);
            this.Manager.Comment("reaching state \'S302\'");
            int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker3)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S305\'");
                int temp55 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
                if ((temp55 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS123();
                    goto label45;
                }
                if ((temp55 == 1)) {
                    this.Manager.Comment("reaching state \'S306\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                            "id)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S307\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S308\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS198();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301OpenResponseChecker)));
                    }
                    goto label45;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S305\'.");
            label45:
;
                goto label48;
            }
            if ((temp58 == 1)) {
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S311\'");
                int temp57 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)));
                if ((temp57 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS211();
                    goto label47;
                }
                if ((temp57 == 1)) {
                    this.Manager.Comment("reaching state \'S312\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S313\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS314();
                    goto label47;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S311\'.");
            label47:
;
                goto label48;
            }
            if ((temp58 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label48;
            }
            if ((temp58 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S308");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS314() {
            this.Manager.Comment("reaching state \'S314\'");
            int temp56 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
            if ((temp56 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS166();
                goto label46;
            }
            if ((temp56 == 1)) {
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                        "id)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S317\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301OpenResponseChecker1))) != -1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS173();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301OpenResponseChecker1)));
                }
                goto label46;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S314\'.");
        label46:
;
        }
        
        private void PreConstraintChecker74() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker75() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S317");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S317");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S317");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S317");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS301ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318");
            this.Manager.Comment("reaching state \'S318\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp59;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp59);
            this.Manager.AddReturn(ReadConfigInfo, null, temp59);
            this.Manager.Comment("reaching state \'S319\'");
            int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker3)));
            if ((temp65 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label54;
            }
            if ((temp65 == 1)) {
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S322\'");
                int temp62 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
                if ((temp62 == 0)) {
                    this.Manager.Comment("reaching state \'S323\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S325\'");
                    int temp60 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)));
                    if ((temp60 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label49;
                    }
                    if ((temp60 == 1)) {
                        this.Manager.Comment("reaching state \'S326\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S327\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S328\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S329\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker)));
                        }
                        goto label49;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S325\'.");
                label49:
;
                    goto label51;
                }
                if ((temp62 == 1)) {
                    this.Manager.Comment("reaching state \'S330\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S331\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S332\'");
                    int temp61 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)));
                    if ((temp61 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label50;
                    }
                    if ((temp61 == 1)) {
                        this.Manager.Comment("reaching state \'S333\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S334\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S335\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker1))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS37();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker1)));
                        }
                        goto label50;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S332\'.");
                label50:
;
                    goto label51;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S322\'.");
            label51:
;
                goto label54;
            }
            if ((temp65 == 2)) {
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S338\'");
                int temp64 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)));
                if ((temp64 == 0)) {
                    this.Manager.Comment("reaching state \'S339\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S340\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S341\'");
                    int temp63 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)));
                    if ((temp63 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label52;
                    }
                    if ((temp63 == 1)) {
                        this.Manager.Comment("reaching state \'S342\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S343\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S344\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker2))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS345();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker2)));
                        }
                        goto label52;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S341\'.");
                label52:
;
                    goto label53;
                }
                if ((temp64 == 1)) {
                    this.Manager.Comment("reaching state \'S346\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S347\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS7();
                    goto label53;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S338\'.");
            label53:
;
                goto label54;
            }
            if ((temp65 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker77() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker78() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker81() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S335");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S335");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S335");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S335");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker84() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S344");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S344");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS345() {
            this.Manager.Comment("reaching state \'S345\'");
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS318ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348");
            this.Manager.Comment("reaching state \'S348\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp66;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp66);
            this.Manager.AddReturn(ReadConfigInfo, null, temp66);
            this.Manager.Comment("reaching state \'S349\'");
            int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker3)));
            if ((temp70 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label58;
            }
            if ((temp70 == 1)) {
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S352\'");
                int temp68 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)));
                if ((temp68 == 0)) {
                    this.Manager.Comment("reaching state \'S353\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S354\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S355\'");
                    int temp67 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)));
                    if ((temp67 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label55;
                    }
                    if ((temp67 == 1)) {
                        this.Manager.Comment("reaching state \'S356\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S357\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S358\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS29();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker)));
                        }
                        goto label55;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S355\'.");
                label55:
;
                    goto label56;
                }
                if ((temp68 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label56;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S352\'.");
            label56:
;
                goto label58;
            }
            if ((temp70 == 2)) {
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S365\'");
                int temp69 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)));
                if ((temp69 == 0)) {
                    this.Manager.Comment("reaching state \'S366\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S367\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S368\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker2))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS98();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker2)));
                    }
                    goto label57;
                }
                if ((temp69 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91();
                    goto label57;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S365\'.");
            label57:
;
                goto label58;
            }
            if ((temp70 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S349");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S349");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker88() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S358");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S358");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S358");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359() {
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                    "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                    ")\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S360\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S361\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker1))) != -1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS362();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker1)));
            }
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S361");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS362() {
            this.Manager.Comment("reaching state \'S362\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S349");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S368");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S368");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S368");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS348ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S349");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S369
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369");
            this.Manager.Comment("reaching state \'S369\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp71;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp71);
            this.Manager.AddReturn(ReadConfigInfo, null, temp71);
            this.Manager.Comment("reaching state \'S370\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker3)));
            if ((temp75 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label62;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S373\'");
                int temp74 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)));
                if ((temp74 == 0)) {
                    this.Manager.Comment("reaching state \'S374\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S375\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S376\'");
                    int temp73 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)));
                    if ((temp73 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label60;
                    }
                    if ((temp73 == 1)) {
                        this.Manager.Comment("reaching state \'S377\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S378\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S379\'");
                        int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker1)));
                        if ((temp72 == 0)) {
                            this.Manager.Comment("reaching state \'S380\'");
                            goto label59;
                        }
                        if ((temp72 == 1)) {
                            this.Manager.Comment("reaching state \'S381\'");
                            goto label59;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker1)));
                    label59:
;
                        goto label60;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S376\'.");
                label60:
;
                    goto label61;
                }
                if ((temp74 == 1)) {
                    this.Manager.Comment("reaching state \'S382\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S383\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S384\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker2))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS362();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker2)));
                    }
                    goto label61;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S373\'.");
            label61:
;
                goto label62;
            }
            if ((temp75 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label62;
            }
            if ((temp75 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label62;
            }
            throw new InvalidOperationException("never reached");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S370");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S370");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker94() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the ser" +
                    "ver MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the ser" +
                    "ver MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker95() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S384");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S370");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS369ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S370");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S385
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385");
            this.Manager.Comment("reaching state \'S385\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp76);
            this.Manager.AddReturn(ReadConfigInfo, null, temp76);
            this.Manager.Comment("reaching state \'S386\'");
            int temp80 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker3)));
            if ((temp80 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label66;
            }
            if ((temp80 == 1)) {
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S389\'");
                int temp78 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)));
                if ((temp78 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label64;
                }
                if ((temp78 == 1)) {
                    this.Manager.Comment("reaching state \'S390\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S391\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S392\'");
                    int temp77 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)));
                    if ((temp77 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label63;
                    }
                    if ((temp77 == 1)) {
                        this.Manager.Comment("reaching state \'S393\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S394\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S395\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS29();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385OpenResponseChecker)));
                        }
                        goto label63;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S392\'.");
                label63:
;
                    goto label64;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S389\'.");
            label64:
;
                goto label66;
            }
            if ((temp80 == 2)) {
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S397\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S398\'");
                int temp79 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)));
                if ((temp79 == 0)) {
                    this.Manager.Comment("reaching state \'S399\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S400\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S401\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS98();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385OpenResponseChecker1)));
                    }
                    goto label65;
                }
                if ((temp79 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91();
                    goto label65;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S398\'.");
            label65:
;
                goto label66;
            }
            if ((temp80 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker96() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker99() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S395");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker100() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S401");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S401");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S401");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS385ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402");
            this.Manager.Comment("reaching state \'S402\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp81;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp81);
            this.Manager.AddReturn(ReadConfigInfo, null, temp81);
            this.Manager.Comment("reaching state \'S403\'");
            int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker3)));
            if ((temp84 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label69;
            }
            if ((temp84 == 1)) {
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S405\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S406\'");
                int temp82 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)));
                if ((temp82 == 0)) {
                    this.Manager.Comment("reaching state \'S407\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S408\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S409\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS141();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker)));
                    }
                    goto label67;
                }
                if ((temp82 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS71();
                    goto label67;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S406\'.");
            label67:
;
                goto label69;
            }
            if ((temp84 == 2)) {
                this.Manager.Comment("reaching state \'S410\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S412\'");
                int temp83 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)));
                if ((temp83 == 0)) {
                    this.Manager.Comment("reaching state \'S413\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S414\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S415\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker2))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS98();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker2)));
                    }
                    goto label68;
                }
                if ((temp83 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91();
                    goto label68;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S412\'.");
            label68:
;
                goto label69;
            }
            if ((temp84 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label69;
            }
            throw new InvalidOperationException("never reached");
        label69:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S409");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S409");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S409");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S409");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker103() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS71() {
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                    "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                    ")\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S73\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker1))) != -1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS74();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker1)));
            }
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S73");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S73");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S73");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS74() {
            this.Manager.Comment("reaching state \'S74\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S415");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S415");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S415");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S415");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS402ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416");
            this.Manager.Comment("reaching state \'S416\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp85;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp85);
            this.Manager.AddReturn(ReadConfigInfo, null, temp85);
            this.Manager.Comment("reaching state \'S417\'");
            int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker3)));
            if ((temp88 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label72;
            }
            if ((temp88 == 1)) {
                this.Manager.Comment("reaching state \'S418\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S420\'");
                int temp86 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
                if ((temp86 == 0)) {
                    this.Manager.Comment("reaching state \'S421\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S422\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S423\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS141();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416OpenResponseChecker)));
                    }
                    goto label70;
                }
                if ((temp86 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS71();
                    goto label70;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S420\'.");
            label70:
;
                goto label72;
            }
            if ((temp88 == 2)) {
                this.Manager.Comment("reaching state \'S424\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S425\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S426\'");
                int temp87 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)));
                if ((temp87 == 0)) {
                    this.Manager.Comment("reaching state \'S427\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                            "id)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S428\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S429\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS98();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416OpenResponseChecker1)));
                    }
                    goto label71;
                }
                if ((temp87 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91();
                    goto label71;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S426\'.");
            label71:
;
                goto label72;
            }
            if ((temp88 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S417");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S417");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S423");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S423");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S423");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S423");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S417");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S429");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S429");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS416ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S417");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430");
            this.Manager.Comment("reaching state \'S430\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp89;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp89);
            this.Manager.AddReturn(ReadConfigInfo, null, temp89);
            this.Manager.Comment("reaching state \'S431\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker3)));
            if ((temp93 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label76;
            }
            if ((temp93 == 1)) {
                this.Manager.Comment("reaching state \'S432\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S433\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S434\'");
                int temp90 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
                if ((temp90 == 0)) {
                    this.Manager.Comment("reaching state \'S435\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S436\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S437\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS141();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430OpenResponseChecker)));
                    }
                    goto label73;
                }
                if ((temp90 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS71();
                    goto label73;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S434\'.");
            label73:
;
                goto label76;
            }
            if ((temp93 == 2)) {
                this.Manager.Comment("reaching state \'S438\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S439\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S440\'");
                int temp92 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)));
                if ((temp92 == 0)) {
                    this.Manager.Comment("reaching state \'S441\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S442\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS443();
                    goto label75;
                }
                if ((temp92 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS91();
                    goto label75;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S440\'.");
            label75:
;
                goto label76;
            }
            if ((temp93 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label76;
            }
            throw new InvalidOperationException("never reached");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S431");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S431");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker110() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S437");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S437");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S437");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S437");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S431");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS443() {
            this.Manager.Comment("reaching state \'S443\'");
            int temp91 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)));
            if ((temp91 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS184();
                goto label74;
            }
            if ((temp91 == 1)) {
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                        "id)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S446\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430OpenResponseChecker1))) != -1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430OpenResponseChecker1)));
                }
                goto label74;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S443\'.");
        label74:
;
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker114() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S446");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker115() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS430ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S431");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S447
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447");
            this.Manager.Comment("reaching state \'S447\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp94;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp94);
            this.Manager.AddReturn(ReadConfigInfo, null, temp94);
            this.Manager.Comment("reaching state \'S448\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker3)));
            if ((temp97 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label79;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S449\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S451\'");
                int temp95 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)));
                if ((temp95 == 0)) {
                    this.Manager.Comment("reaching state \'S452\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                            "id)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S453\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S454\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS141();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker)));
                    }
                    goto label77;
                }
                if ((temp95 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS71();
                    goto label77;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S451\'.");
            label77:
;
                goto label79;
            }
            if ((temp97 == 2)) {
                this.Manager.Comment("reaching state \'S455\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S456\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S457\'");
                int temp96 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S458\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S459\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S460\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS461();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker1)));
                    }
                    goto label78;
                }
                if ((temp96 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462();
                    goto label78;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S457\'.");
            label78:
;
                goto label79;
            }
            if ((temp97 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S448");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S448");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S454");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S454");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S454");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S454");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S448");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker118() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S460");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S460");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S460");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S460");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS461() {
            this.Manager.Comment("reaching state \'S461\'");
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462() {
            this.Manager.Comment("reaching state \'S462\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                    "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                    ")\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S463\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S464\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker2))) != -1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS465();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker2)));
            }
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S464");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S464");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S464");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS465() {
            this.Manager.Comment("reaching state \'S465\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS447ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S448");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466");
            this.Manager.Comment("reaching state \'S466\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp98;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp98);
            this.Manager.AddReturn(ReadConfigInfo, null, temp98);
            this.Manager.Comment("reaching state \'S467\'");
            int temp102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker3)));
            if ((temp102 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label83;
            }
            if ((temp102 == 1)) {
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S469\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S470\'");
                int temp100 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker123)));
                if ((temp100 == 0)) {
                    this.Manager.Comment("reaching state \'S471\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S472\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S473\'");
                    int temp99 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker122)));
                    if ((temp99 == 0)) {
                        this.Manager.Comment("reaching state \'S474\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S475\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S476\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS477();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker)));
                        }
                        goto label80;
                    }
                    if ((temp99 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS70();
                        goto label80;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S473\'.");
                label80:
;
                    goto label81;
                }
                if ((temp100 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS71();
                    goto label81;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S470\'.");
            label81:
;
                goto label83;
            }
            if ((temp102 == 2)) {
                this.Manager.Comment("reaching state \'S478\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S479\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S480\'");
                int temp101 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker124)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker125)));
                if ((temp101 == 0)) {
                    this.Manager.Comment("reaching state \'S481\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S482\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S483\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS461();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker1)));
                    }
                    goto label82;
                }
                if ((temp101 == 1)) {
                    this.Manager.Comment("reaching state \'S484\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S485\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S486\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker2))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS465();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker2)));
                    }
                    goto label82;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S480\'.");
            label82:
;
                goto label83;
            }
            if ((temp102 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker121() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S476");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S476");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S476");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS477() {
            this.Manager.Comment("reaching state \'S477\'");
        }
        
        private void PreConstraintChecker122() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker123() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker124() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S483");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S483");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S483");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S483");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker125() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S486");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S486");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S486");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S486");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS466ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S487
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487");
            this.Manager.Comment("reaching state \'S487\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp103;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp103);
            this.Manager.AddReturn(ReadConfigInfo, null, temp103);
            this.Manager.Comment("reaching state \'S488\'");
            int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker3)));
            if ((temp106 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label86;
            }
            if ((temp106 == 1)) {
                this.Manager.Comment("reaching state \'S489\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S490\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S491\'");
                int temp104 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker126)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker127)));
                if ((temp104 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label84;
                }
                if ((temp104 == 1)) {
                    this.Manager.Comment("reaching state \'S492\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S493\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S494\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS495();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487OpenResponseChecker)));
                    }
                    goto label84;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S491\'.");
            label84:
;
                goto label86;
            }
            if ((temp106 == 2)) {
                this.Manager.Comment("reaching state \'S496\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S497\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S498\'");
                int temp105 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker128)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker129)));
                if ((temp105 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462();
                    goto label85;
                }
                if ((temp105 == 1)) {
                    this.Manager.Comment("reaching state \'S499\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S500\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S501\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS461();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487OpenResponseChecker1)));
                    }
                    goto label85;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S498\'.");
            label85:
;
                goto label86;
            }
            if ((temp106 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label86;
            }
            throw new InvalidOperationException("never reached");
        label86:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S488");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S488");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker126() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker127() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S494");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S494");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S494");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S494");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS495() {
            this.Manager.Comment("reaching state \'S495\'");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S488");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker128() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker129() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS487ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S488");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502");
            this.Manager.Comment("reaching state \'S502\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp107;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp107);
            this.Manager.AddReturn(ReadConfigInfo, null, temp107);
            this.Manager.Comment("reaching state \'S503\'");
            int temp110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker3)));
            if ((temp110 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label89;
            }
            if ((temp110 == 1)) {
                this.Manager.Comment("reaching state \'S504\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S505\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S506\'");
                int temp108 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker130)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker131)));
                if ((temp108 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label87;
                }
                if ((temp108 == 1)) {
                    this.Manager.Comment("reaching state \'S507\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S508\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S509\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS495();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502OpenResponseChecker)));
                    }
                    goto label87;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S506\'.");
            label87:
;
                goto label89;
            }
            if ((temp110 == 2)) {
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S512\'");
                int temp109 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker132)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker133)));
                if ((temp109 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462();
                    goto label88;
                }
                if ((temp109 == 1)) {
                    this.Manager.Comment("reaching state \'S513\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S514\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S515\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS461();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502OpenResponseChecker1)));
                    }
                    goto label88;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S512\'.");
            label88:
;
                goto label89;
            }
            if ((temp110 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label89;
            }
            throw new InvalidOperationException("never reached");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker130() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker131() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S509");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S509");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S509");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S509");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker132() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker133() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S515");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S515");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S515");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S515");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS502ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516");
            this.Manager.Comment("reaching state \'S516\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp111;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp111);
            this.Manager.AddReturn(ReadConfigInfo, null, temp111);
            this.Manager.Comment("reaching state \'S517\'");
            int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker3)));
            if ((temp114 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label92;
            }
            if ((temp114 == 1)) {
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S520\'");
                int temp112 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker134)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker135)));
                if ((temp112 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label90;
                }
                if ((temp112 == 1)) {
                    this.Manager.Comment("reaching state \'S521\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S522\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S523\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS495();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516OpenResponseChecker)));
                    }
                    goto label90;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S520\'.");
            label90:
;
                goto label92;
            }
            if ((temp114 == 2)) {
                this.Manager.Comment("reaching state \'S524\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S525\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S526\'");
                int temp113 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker136)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker137)));
                if ((temp113 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462();
                    goto label91;
                }
                if ((temp113 == 1)) {
                    this.Manager.Comment("reaching state \'S527\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                            "id)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S528\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S529\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS461();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516OpenResponseChecker1)));
                    }
                    goto label91;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S526\'.");
            label91:
;
                goto label92;
            }
            if ((temp114 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S517");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S517");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker134() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker135() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S523");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S523");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S523");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S523");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S517");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker136() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker137() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S529");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S529");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S529");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S529");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS516ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S517");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530");
            this.Manager.Comment("reaching state \'S530\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp115;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp115);
            this.Manager.AddReturn(ReadConfigInfo, null, temp115);
            this.Manager.Comment("reaching state \'S531\'");
            int temp119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker3)));
            if ((temp119 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label96;
            }
            if ((temp119 == 1)) {
                this.Manager.Comment("reaching state \'S532\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S533\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S534\'");
                int temp116 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker138)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker139)));
                if ((temp116 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label93;
                }
                if ((temp116 == 1)) {
                    this.Manager.Comment("reaching state \'S535\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S536\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S537\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS495();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530OpenResponseChecker)));
                    }
                    goto label93;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S534\'.");
            label93:
;
                goto label96;
            }
            if ((temp119 == 2)) {
                this.Manager.Comment("reaching state \'S538\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S539\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S540\'");
                int temp118 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker140)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker141)));
                if ((temp118 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462();
                    goto label95;
                }
                if ((temp118 == 1)) {
                    this.Manager.Comment("reaching state \'S541\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S542\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S543\'");
                    int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker142)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker143)));
                    if ((temp117 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label94;
                    }
                    if ((temp117 == 1)) {
                        this.Manager.Comment("reaching state \'S544\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                                "id)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S545\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S546\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530OpenResponseChecker1))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS345();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530OpenResponseChecker1)));
                        }
                        goto label94;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S543\'.");
                label94:
;
                    goto label95;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S540\'.");
            label95:
;
                goto label96;
            }
            if ((temp119 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label96;
            }
            throw new InvalidOperationException("never reached");
        label96:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker138() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker139() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S537");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S537");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S537");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S537");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker140() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker141() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker142() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker143() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S546");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S546");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S546");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S546");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS530ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S547
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547");
            this.Manager.Comment("reaching state \'S547\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp120;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp120);
            this.Manager.AddReturn(ReadConfigInfo, null, temp120);
            this.Manager.Comment("reaching state \'S548\'");
            int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker3)));
            if ((temp124 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label100;
            }
            if ((temp124 == 1)) {
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S551\'");
                int temp121 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker144)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker145)));
                if ((temp121 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label97;
                }
                if ((temp121 == 1)) {
                    this.Manager.Comment("reaching state \'S552\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                            "id)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S553\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S554\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS495();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547OpenResponseChecker)));
                    }
                    goto label97;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S551\'.");
            label97:
;
                goto label100;
            }
            if ((temp124 == 2)) {
                this.Manager.Comment("reaching state \'S555\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S556\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S557\'");
                int temp123 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker146)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker147)));
                if ((temp123 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462();
                    goto label99;
                }
                if ((temp123 == 1)) {
                    this.Manager.Comment("reaching state \'S558\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S559\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S560\'");
                    int temp122 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker148)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker149)));
                    if ((temp122 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label98;
                    }
                    if ((temp122 == 1)) {
                        this.Manager.Comment("reaching state \'S561\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S562\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S563\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547OpenResponseChecker1))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS345();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547OpenResponseChecker1)));
                        }
                        goto label98;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S560\'.");
                label98:
;
                    goto label99;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S557\'.");
            label99:
;
                goto label100;
            }
            if ((temp124 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label100;
            }
            throw new InvalidOperationException("never reached");
        label100:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker144() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker145() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker146() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker147() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker148() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker149() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S563");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S563");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S563");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS547ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564");
            this.Manager.Comment("reaching state \'S564\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp125;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp125);
            this.Manager.AddReturn(ReadConfigInfo, null, temp125);
            this.Manager.Comment("reaching state \'S565\'");
            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker3)));
            if ((temp129 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label104;
            }
            if ((temp129 == 1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label104;
            }
            if ((temp129 == 2)) {
                this.Manager.Comment("reaching state \'S566\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S567\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S568\'");
                int temp126 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker150)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker151)));
                if ((temp126 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS359();
                    goto label101;
                }
                if ((temp126 == 1)) {
                    this.Manager.Comment("reaching state \'S569\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S570\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS25();
                    goto label101;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S568\'.");
            label101:
;
                goto label104;
            }
            if ((temp129 == 3)) {
                this.Manager.Comment("reaching state \'S571\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S572\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S573\'");
                int temp128 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker152)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker153)));
                if ((temp128 == 0)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS462();
                    goto label103;
                }
                if ((temp128 == 1)) {
                    this.Manager.Comment("reaching state \'S574\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S575\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S576\'");
                    int temp127 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker154)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker155)));
                    if ((temp127 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label102;
                    }
                    if ((temp127 == 1)) {
                        this.Manager.Comment("reaching state \'S577\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S578\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S579\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS19();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564OpenResponseChecker)));
                        }
                        goto label102;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S576\'.");
                label102:
;
                    goto label103;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S573\'.");
            label103:
;
                goto label104;
            }
            throw new InvalidOperationException("never reached");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S565");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S565");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S565");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker150() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker151() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S565");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker152() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker153() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker154() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker155() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS564OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S579");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S579");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S579");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S579");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect is ""2.100"", the server supports leasing, and Open.Lease is not NULL, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE create context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect is \"2.100\", the server supports leasing, and Ope" +
                    "n.Lease is not NULL, then the server MUST construct an SMB2_CREATE_RESPONSE_LEAS" +
                    "E create context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S57
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57");
            this.Manager.Comment("reaching state \'S57\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp130;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp130);
            this.Manager.AddReturn(ReadConfigInfo, null, temp130);
            this.Manager.Comment("reaching state \'S58\'");
            int temp136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker3)));
            if ((temp136 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label110;
            }
            if ((temp136 == 1)) {
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S61\'");
                int temp133 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker156)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker159)));
                if ((temp133 == 0)) {
                    this.Manager.Comment("reaching state \'S62\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S63\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S64\'");
                    int temp132 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker157)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker158)));
                    if ((temp132 == 0)) {
                        this.Manager.Comment("reaching state \'S65\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S66\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S67\'");
                        int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker1)));
                        if ((temp131 == 0)) {
                            this.Manager.Comment("reaching state \'S68\'");
                            goto label105;
                        }
                        if ((temp131 == 1)) {
                            this.Manager.Comment("reaching state \'S69\'");
                            goto label105;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker1)));
                    label105:
;
                        goto label106;
                    }
                    if ((temp132 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS70();
                        goto label106;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S64\'.");
                label106:
;
                    goto label107;
                }
                if ((temp133 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS71();
                    goto label107;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S61\'.");
            label107:
;
                goto label110;
            }
            if ((temp136 == 2)) {
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S77\'");
                int temp135 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker160)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker163)));
                if ((temp135 == 0)) {
                    this.Manager.Comment("reaching state \'S78\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S79\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S80\'");
                    int temp134 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker161)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker162)));
                    if ((temp134 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS48();
                        goto label108;
                    }
                    if ((temp134 == 1)) {
                        this.Manager.Comment("reaching state \'S81\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S82\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S83\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker2))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS47();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker2)));
                        }
                        goto label108;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S80\'.");
                label108:
;
                    goto label109;
                }
                if ((temp135 == 1)) {
                    this.Manager.Comment("reaching state \'S84\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S85\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S86\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker3))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS87();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker3)));
                    }
                    goto label109;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S77\'.");
            label109:
;
                goto label110;
            }
            if ((temp136 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label110;
            }
            throw new InvalidOperationException("never reached");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S58");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S58");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker156() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker157() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the ser" +
                    "ver MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,SMB" +
                    "2_CREATE_RESPONSE_LEASE,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext.SMB2_CREATE_RESPONSE_LEASE, leaseResponseContext, "leaseResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the server MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context"", ""[TestInfo] All the above conditions are met. So the create response should contain SMB2_CREATE_RESPONSE_LEASE create context.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r supports leasing, Open.Lease is not NULL, and Lease.Version is 1, then the ser" +
                    "ver MUST construct an SMB2_CREATE_RESPONSE_LEASE Create Context\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So the create response should conta" +
                    "in SMB2_CREATE_RESPONSE_LEASE create context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker158() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker159() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S58");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker160() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker161() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker162() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or the SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3. If Open.Lease is not NULL and the SMB2_CREATE_REQUEST_LEASE_V2 or t" +
                    "he SMB2_CREATE_REQUEST_LEASE create context is not present, the server MUST fail" +
                    " the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker163() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S86");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S86");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S86");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS57ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S58");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580");
            this.Manager.Comment("reaching state \'S580\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp137;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp137);
            this.Manager.AddReturn(ReadConfigInfo, null, temp137);
            this.Manager.Comment("reaching state \'S581\'");
            int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker3)));
            if ((temp141 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label114;
            }
            if ((temp141 == 1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label114;
            }
            if ((temp141 == 2)) {
                this.Manager.Comment("reaching state \'S582\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S583\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S584\'");
                int temp138 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker164)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker165)));
                if ((temp138 == 0)) {
                    this.Manager.Comment("reaching state \'S585\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S586\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS314();
                    goto label111;
                }
                if ((temp138 == 1)) {
                    this.Manager.Comment("reaching state \'S587\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S588\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS161();
                    goto label111;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S584\'.");
            label111:
;
                goto label114;
            }
            if ((temp141 == 3)) {
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S590\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S591\'");
                int temp140 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker166)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker167)));
                if ((temp140 == 0)) {
                    this.Manager.Comment("reaching state \'S592\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS443();
                    goto label113;
                }
                if ((temp140 == 1)) {
                    this.Manager.Comment("reaching state \'S594\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S595\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S596\'");
                    int temp139 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker168)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker169)));
                    if ((temp139 == 0)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS184();
                        goto label112;
                    }
                    if ((temp139 == 1)) {
                        this.Manager.Comment("reaching state \'S597\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S598\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S599\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS183();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580OpenResponseChecker)));
                        }
                        goto label112;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S596\'.");
                label112:
;
                    goto label113;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S591\'.");
            label113:
;
                goto label114;
            }
            throw new InvalidOperationException("never reached");
        label114:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S581");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S581");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S581");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker164() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker165() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S581");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker166() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker167() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker168() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker169() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS580OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S599");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S599");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S599");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S599");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600");
            this.Manager.Comment("reaching state \'S600\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp142;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp142);
            this.Manager.AddReturn(ReadConfigInfo, null, temp142);
            this.Manager.Comment("reaching state \'S601\'");
            int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker3)));
            if ((temp146 == 0)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS192();
                goto label118;
            }
            if ((temp146 == 1)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label118;
            }
            if ((temp146 == 2)) {
                this.Manager.Comment("reaching state \'S602\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S603\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S604\'");
                int temp145 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker170)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker173)));
                if ((temp145 == 0)) {
                    this.Manager.Comment("reaching state \'S605\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S606\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S607\'");
                    int temp143 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker171)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker172)));
                    if ((temp143 == 0)) {
                        this.Manager.Comment("reaching state \'S608\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,DifferentClient,SameCreateGu" +
                                "id)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S609\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S610\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600OpenResponseChecker))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS477();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600OpenResponseChecker)));
                        }
                        goto label115;
                    }
                    if ((temp143 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS70();
                        goto label115;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S607\'.");
                label115:
;
                    goto label117;
                }
                if ((temp145 == 1)) {
                    this.Manager.Comment("reaching state \'S611\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S612\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S613\'");
                    int temp144 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker174)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker175)));
                    if ((temp144 == 0)) {
                        this.Manager.Comment("reaching state \'S614\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S615\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S616\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600OpenResponseChecker1))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS137();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600OpenResponseChecker1)));
                        }
                        goto label116;
                    }
                    if ((temp144 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS70();
                        goto label116;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S613\'.");
                label116:
;
                    goto label117;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S604\'.");
            label117:
;
                goto label118;
            }
            if ((temp146 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label118;
            }
            throw new InvalidOperationException("never reached");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S601");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S601");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S601");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker170() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker171() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S610");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S610");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S610");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S610");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker172() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker173() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker174() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S616");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S616");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S616");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S616");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker175() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS600ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S601");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S99
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1LeaseV1)]
        public void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99");
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp147;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp147);
            this.Manager.AddReturn(ReadConfigInfo, null, temp147);
            this.Manager.Comment("reaching state \'S100\'");
            int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker3)));
            if ((temp152 == 0)) {
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S103\'");
                int temp149 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker176)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker177)));
                if ((temp149 == 0)) {
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S105\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S106\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS74();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker)));
                    }
                    goto label120;
                }
                if ((temp149 == 1)) {
                    this.Manager.Comment("reaching state \'S107\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S108\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S109\'");
                    int temp148 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker178)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker179)));
                    if ((temp148 == 0)) {
                        this.Manager.Comment("reaching state \'S110\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,LeaseV1,DifferentLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S111\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S112\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S113\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker1)));
                        }
                        goto label119;
                    }
                    if ((temp148 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS70();
                        goto label119;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S109\'.");
                label119:
;
                    goto label120;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S103\'.");
            label120:
;
                goto label123;
            }
            if ((temp152 == 1)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S116\'");
                int temp151 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker180)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker183)));
                if ((temp151 == 0)) {
                    this.Manager.Comment("reaching state \'S117\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S118\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S119\'");
                    int temp150 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker181)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker182)));
                    if ((temp150 == 0)) {
                        this.Manager.Comment("reaching state \'S120\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S121\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S122\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker2))) != -1)) {
                            DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS47();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker2)));
                        }
                        goto label121;
                    }
                    if ((temp150 == 1)) {
                        DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS48();
                        goto label121;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S119\'.");
                label121:
;
                    goto label122;
                }
                if ((temp151 == 1)) {
                    DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS123();
                    goto label122;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S116\'.");
            label122:
;
                goto label123;
            }
            if ((temp152 == 2)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS56();
                goto label123;
            }
            if ((temp152 == 3)) {
                DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS88();
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker176() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker177() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker178() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 8. If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, Connection.Dialect is ""2.100"" or belongs to the SMB 3.x dialect family, the server supports leasing, Open.Lease is not NULL, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker179() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker180() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker181() {
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S122");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S122");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S122");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL and Open.ClientGuid is not equal to the Client" +
                    "Guid of the connection.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker182() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker183() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
    }
}
