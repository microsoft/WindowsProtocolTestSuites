// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SessionMgmtReconnectSessionScenarioTestCase : PtfTestClassBase
    {

        public SessionMgmtReconnectSessionScenarioTestCase()
        {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }

        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c);

        public delegate void SessionSetupResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c);

        public delegate void TerminateConnectionDelegate1();
        #endregion

        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig).MakeByRefType());

        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter), "SessionSetupResponse");

        static System.Reflection.MethodBase TerminateConnectionInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter), "TerminateConnection", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId));
        #endregion

        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter ISessionMgmtAdapterInstance;
        #endregion

        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> c;

        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> c1;

        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> v;

        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> v1;
        #endregion

        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context)
        {
            PtfTestClassBase.Initialize(context);
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup()
        {
            PtfTestClassBase.Cleanup();
        }
        #endregion

        #region Test Initialization and Cleanup
        protected override void TestInitialize()
        {
            this.InitializeTestManager();
            this.ISessionMgmtAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter))));
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISessionMgmtAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("c1");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("v");
            this.v1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("v1");
        }

        protected override void TestCleanup()
        {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion

        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS0()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker3)));
            if ((temp13 == 0))
            {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker3)));
                if ((temp3 == 0))
                {
                    this.Manager.Comment("reaching state \'S14\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S15\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S16\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S18\'");
                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker2)));
                    if ((temp1 == 0))
                    {
                        this.Manager.Comment("reaching state \'S19\'");
                        goto label0;
                    }
                    if ((temp1 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS20();
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker2)));
                label0:
                    ;
                    goto label2;
                }
                if ((temp3 == 1))
                {
                    this.Manager.Comment("reaching state \'S7\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S9\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S10\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S11\'");
                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker5)));
                    if ((temp2 == 0))
                    {
                        this.Manager.Comment("reaching state \'S12\'");
                        goto label1;
                    }
                    if ((temp2 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS13();
                        goto label1;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker5)));
                label1:
                    ;
                    goto label2;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker3)));
            label2:
                ;
                goto label12;
            }
            if ((temp13 == 1))
            {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb302)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S25\'");
                int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker9)));
                if ((temp6 == 0))
                {
                    this.Manager.Comment("reaching state \'S26\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS27();
                    goto label5;
                }
                if ((temp6 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS35();
                    goto label5;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker9)));
            label5:
                ;
                goto label12;
            }
            if ((temp13 == 2))
            {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S46\'");
                int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker15)));
                if ((temp9 == 0))
                {
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S49\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S50\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S51\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S52\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S53\'");
                    int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker14)));
                    if ((temp7 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS54();
                        goto label6;
                    }
                    if ((temp7 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS55();
                        goto label6;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker14)));
                label6:
                    ;
                    goto label8;
                }
                if ((temp9 == 1))
                {
                    this.Manager.Comment("reaching state \'S56\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S57\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S58\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S59\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S60\'");
                    int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker17)));
                    if ((temp8 == 0))
                    {
                        this.Manager.Comment("reaching state \'S61\'");
                        goto label7;
                    }
                    if ((temp8 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS62();
                        goto label7;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker17)));
                label7:
                    ;
                    goto label8;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker15)));
            label8:
                ;
                goto label12;
            }
            if ((temp13 == 3))
            {
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S67\'");
                int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker21)));
                if ((temp12 == 0))
                {
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S70\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S71\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S72\'");
                    int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker20)));
                    if ((temp10 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS73();
                        goto label9;
                    }
                    if ((temp10 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS74();
                        goto label9;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker20)));
                label9:
                    ;
                    goto label11;
                }
                if ((temp12 == 1))
                {
                    this.Manager.Comment("reaching state \'S75\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS76();
                    goto label11;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker21)));
            label11:
                ;
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S6");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S18");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server d" +
                        "etermines the authentications were for the same user, the server MUST remove the" +
                        " old session from the GlobalSessionTable and also from the Connection.SessionTab" +
                        "le, as specified in section 3.3.7.1.\", \"[TestInfo] The authentications were for " +
                        "the same user\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S18");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS20()
        {
            this.Manager.Comment("reaching state \'S20\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S6");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S11");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S11");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S11");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server d" +
                        "etermines the authentications were for the same user, the server MUST remove the" +
                        " old session from the GlobalSessionTable and also from the Connection.SessionTab" +
                        "le, as specified in section 3.3.7.1.\", \"[TestInfo] The authentications were for " +
                        "the same user\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S11");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S11");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S11");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS13()
        {
            this.Manager.Comment("reaching state \'S13\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S25");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S25");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS27()
        {
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S32\'");
            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker8)));
            if ((temp4 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS33();
                goto label3;
            }
            if ((temp4 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS34();
                goto label3;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker8)));
        label3:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S32");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S32");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MU" +
                        "ST set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonym" +
                        "ous is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. " +
                        "If the PreviousSessionId field of the request is not equal to zero, the server M" +
                        "UST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to " +
                        "zero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTa" +
                        "ble, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] 13. Sessio" +
                        "n.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS33()
        {
            this.Manager.Comment("reaching state \'S33\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S32");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S32");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS34()
        {
            this.Manager.Comment("reaching state \'S34\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S25");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S25");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS35()
        {
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S39\'");
            int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker11)));
            if ((temp5 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS40();
                goto label4;
            }
            if ((temp5 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS41();
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker11)));
        label4:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S39");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS40()
        {
            this.Manager.Comment("reaching state \'S40\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S39");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S39");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS41()
        {
            this.Manager.Comment("reaching state \'S41\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S46");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S46");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S53");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS54()
        {
            this.Manager.Comment("reaching state \'S54\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S53");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S53");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero, the server MUST take the following actions:"", ""[TestInfo] PreviousSessionId is not equal to zero."", ""[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, where Session.SessionId matches PreviousSessionId. "", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS55()
        {
            this.Manager.Comment("reaching state \'S55\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S46");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S46");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S60");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S60");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS62()
        {
            this.Manager.Comment("reaching state \'S62\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S67");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S67");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S72");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S72");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS73()
        {
            this.Manager.Comment("reaching state \'S73\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S72");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S72");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS74()
        {
            this.Manager.Comment("reaching state \'S74\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S67");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S67");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS76()
        {
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0TerminateConnectionChecker1)));
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S81\'");
            int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker22)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker23)));
            if ((temp11 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS82();
                goto label10;
            }
            if ((temp11 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS83();
                goto label10;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker22)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker23)));
        label10:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0TerminateConnectionChecker1()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S81");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero, the server MUST take the following actions:"", ""[TestInfo] PreviousSessionId is not equal to zero."", ""[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, where Session.SessionId matches PreviousSessionId. "", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS82()
        {
            this.Manager.Comment("reaching state \'S82\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS0SessionSetupResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S81");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S81");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS83()
        {
            this.Manager.Comment("reaching state \'S83\'");
        }
        #endregion

        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS160()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS160");
            this.Manager.Comment("reaching state \'S160\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp14);
            this.Manager.AddReturn(ReadConfigInfo, null, temp14);
            this.Manager.Comment("reaching state \'S161\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker3)));
            if ((temp27 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label25;
            }
            if ((temp27 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label25;
            }
            if ((temp27 == 2))
            {
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb302)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S166\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker15)));
                if ((temp23 == 0))
                {
                    this.Manager.Comment("reaching state \'S167\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S168\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S169\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S170\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S171\'");
                    int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker14)));
                    if ((temp21 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS117();
                        goto label19;
                    }
                    if ((temp21 == 1))
                    {
                        this.Manager.Comment("reaching state \'S172\'");
                        goto label19;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker14)));
                label19:
                    ;
                    goto label21;
                }
                if ((temp23 == 1))
                {
                    this.Manager.Comment("reaching state \'S173\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S174\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S175\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S176\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S177\'");
                    int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker17)));
                    if ((temp22 == 0))
                    {
                        this.Manager.Comment("reaching state \'S178\'");
                        goto label20;
                    }
                    if ((temp22 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS41();
                        goto label20;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker17)));
                label20:
                    ;
                    goto label21;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker15)));
            label21:
                ;
                goto label25;
            }
            if ((temp27 == 3))
            {
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S183\'");
                int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker21)));
                if ((temp26 == 0))
                {
                    this.Manager.Comment("reaching state \'S184\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S185\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S186\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S187\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S188\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S189\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S190\'");
                    int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker20)));
                    if ((temp24 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS191();
                        goto label22;
                    }
                    if ((temp24 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS192();
                        goto label22;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker20)));
                label22:
                    ;
                    goto label24;
                }
                if ((temp26 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS193();
                    goto label24;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker21)));
            label24:
                ;
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS123()
        {
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S127\'");
            int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker3)));
            if ((temp17 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS128();
                goto label15;
            }
            if ((temp17 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS134();
                goto label15;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker3)));
        label15:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S127");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S127");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS128()
        {
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S132\'");
            int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker2)));
            if ((temp15 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS133();
                goto label13;
            }
            if ((temp15 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS62();
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker2)));
        label13:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S132");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S132");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS133()
        {
            this.Manager.Comment("reaching state \'S133\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S132");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S132");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S127");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S127");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS134()
        {
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S138\'");
            int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker5)));
            if ((temp16 == 0))
            {
                this.Manager.Comment("reaching state \'S139\'");
                goto label14;
            }
            if ((temp16 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS140();
                goto label14;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker5)));
        label14:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S138");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S138");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS140()
        {
            this.Manager.Comment("reaching state \'S140\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS141()
        {
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S145\'");
            int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker9)));
            if ((temp20 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS146();
                goto label18;
            }
            if ((temp20 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS153();
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker9)));
        label18:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S145");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S145");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS146()
        {
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S150\'");
            int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker8)));
            if ((temp18 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS151();
                goto label16;
            }
            if ((temp18 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS152();
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker8)));
        label16:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S150");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S150");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS151()
        {
            this.Manager.Comment("reaching state \'S151\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S150");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S150");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS152()
        {
            this.Manager.Comment("reaching state \'S152\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S145");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S145");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS153()
        {
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S157\'");
            int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker11)));
            if ((temp19 == 0))
            {
                this.Manager.Comment("reaching state \'S158\'");
                goto label17;
            }
            if ((temp19 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS159();
                goto label17;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker11)));
        label17:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S157");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S157");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S157");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS159()
        {
            this.Manager.Comment("reaching state \'S159\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S166");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S171");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S171");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS117()
        {
            this.Manager.Comment("reaching state \'S117\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S171");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S171");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MU" +
                        "ST set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonym" +
                        "ous is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. " +
                        "If the PreviousSessionId field of the request is not equal to zero, the server M" +
                        "UST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to " +
                        "zero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTa" +
                        "ble, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessi" +
                        "on is found with Session.SessionId equal to PreviousSessionId, the server MUST d" +
                        "etermine if the old session and the newly established session are created by the" +
                        " same user by comparing the user identifiers obtained from the Session.SecurityC" +
                        "ontext on the new and old session.\", \"[TestInfo] There is a session with Session" +
                        ".SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server " +
                        "determines the authentications were for the same user, the server MUST remove th" +
                        "e old session from the GlobalSessionTable and also from the Connection.SessionTa" +
                        "ble, as specified in section 3.3.7.1.\", \"[TestInfo] The authentications were for" +
                        " the same user\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S166");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S177");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MU" +
                        "ST set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonym" +
                        "ous is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. " +
                        "If the PreviousSessionId field of the request is not equal to zero, the server M" +
                        "UST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to " +
                        "zero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTa" +
                        "ble, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessi" +
                        "on is found with Session.SessionId equal to PreviousSessionId, the server MUST d" +
                        "etermine if the old session and the newly established session are created by the" +
                        " same user by comparing the user identifiers obtained from the Session.SecurityC" +
                        "ontext on the new and old session.\", \"[TestInfo] There is a session with Session" +
                        ".SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server " +
                        "determines the authentications were for the same user, the server MUST remove th" +
                        "e old session from the GlobalSessionTable and also from the Connection.SessionTa" +
                        "ble, as specified in section 3.3.7.1.\", \"[TestInfo] The authentications were for" +
                        " the same user\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S177");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S183");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S183");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S183");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S190");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S190");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S190");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS191()
        {
            this.Manager.Comment("reaching state \'S191\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S190");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S190");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S190");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS192()
        {
            this.Manager.Comment("reaching state \'S192\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S183");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S183");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S183");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS193()
        {
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S194\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S196\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S197\'");
            int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker22)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker23)));
            if ((temp25 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS198();
                goto label23;
            }
            if ((temp25 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS199();
                goto label23;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker22)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker23)));
        label23:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S197");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS198()
        {
            this.Manager.Comment("reaching state \'S198\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS160SessionSetupResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S197");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S197");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS199()
        {
            this.Manager.Comment("reaching state \'S199\'");
        }
        #endregion

        #region Test Starting in S200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS200()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS200");
            this.Manager.Comment("reaching state \'S200\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S201\'");
            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker3)));
            if ((temp34 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label31;
            }
            if ((temp34 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label31;
            }
            if ((temp34 == 2))
            {
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S206\'");
                int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker3)));
                if ((temp31 == 0))
                {
                    this.Manager.Comment("reaching state \'S207\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S208\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S209\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S210\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S211\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S212\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S213\'");
                    int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker2)));
                    if ((temp29 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS214();
                        goto label26;
                    }
                    if ((temp29 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS215();
                        goto label26;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker2)));
                label26:
                    ;
                    goto label28;
                }
                if ((temp31 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS216();
                    goto label28;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker3)));
            label28:
                ;
                goto label31;
            }
            if ((temp34 == 3))
            {
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S227\'");
                int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker9)));
                if ((temp33 == 0))
                {
                    this.Manager.Comment("reaching state \'S228\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS229();
                    goto label30;
                }
                if ((temp33 == 1))
                {
                    this.Manager.Comment("reaching state \'S237\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS229();
                    goto label30;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker9)));
            label30:
                ;
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S201");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S201");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S201");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S206");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S213");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS214()
        {
            this.Manager.Comment("reaching state \'S214\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S213");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS215()
        {
            this.Manager.Comment("reaching state \'S215\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S206");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS216()
        {
            this.Manager.Comment("reaching state \'S216\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S218\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S220\'");
            int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker5)));
            if ((temp30 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS221();
                goto label27;
            }
            if ((temp30 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS222();
                goto label27;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker5)));
        label27:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S220");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS221()
        {
            this.Manager.Comment("reaching state \'S221\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S220");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS222()
        {
            this.Manager.Comment("reaching state \'S222\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S201");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S227");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S227");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS229()
        {
            this.Manager.Comment("reaching state \'S229\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S230\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S234\'");
            int temp32 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker8)));
            if ((temp32 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS235();
                goto label29;
            }
            if ((temp32 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS236();
                goto label29;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker8)));
        label29:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S234");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S234");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS235()
        {
            this.Manager.Comment("reaching state \'S235\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S234");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S234");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS236()
        {
            this.Manager.Comment("reaching state \'S236\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS200SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S227");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S227");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS238()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS238");
            this.Manager.Comment("reaching state \'S238\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp35;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp35);
            this.Manager.AddReturn(ReadConfigInfo, null, temp35);
            this.Manager.Comment("reaching state \'S239\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker3)));
            if ((temp41 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label37;
            }
            if ((temp41 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label37;
            }
            if ((temp41 == 2))
            {
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S244\'");
                int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker3)));
                if ((temp38 == 0))
                {
                    this.Manager.Comment("reaching state \'S245\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S246\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S247\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S248\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S249\'");
                    int temp36 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker2)));
                    if ((temp36 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS222();
                        goto label32;
                    }
                    if ((temp36 == 1))
                    {
                        this.Manager.Comment("reaching state \'S250\'");
                        goto label32;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker2)));
                label32:
                    ;
                    goto label34;
                }
                if ((temp38 == 1))
                {
                    this.Manager.Comment("reaching state \'S251\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S252\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S253\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S254\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S255\'");
                    int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker5)));
                    if ((temp37 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS256();
                        goto label33;
                    }
                    if ((temp37 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS257();
                        goto label33;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker5)));
                label33:
                    ;
                    goto label34;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker3)));
            label34:
                ;
                goto label37;
            }
            if ((temp41 == 3))
            {
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb302)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S262\'");
                int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker9)));
                if ((temp40 == 0))
                {
                    this.Manager.Comment("reaching state \'S263\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S264\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S265\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S266\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S268\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S269\'");
                    int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker8)));
                    if ((temp39 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS33();
                        goto label35;
                    }
                    if ((temp39 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS34();
                        goto label35;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker8)));
                label35:
                    ;
                    goto label36;
                }
                if ((temp40 == 1))
                {
                    this.Manager.Comment("reaching state \'S270\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS27();
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker9)));
            label36:
                ;
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S239");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S239");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S239");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S244");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S249");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S249");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S249");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S249");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S244");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S255");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS256()
        {
            this.Manager.Comment("reaching state \'S256\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S255");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS257()
        {
            this.Manager.Comment("reaching state \'S257\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S239");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S262");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S262");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S269");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S269");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S269");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S269");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS238SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S262");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S262");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S271
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS271()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS271");
            this.Manager.Comment("reaching state \'S271\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp42);
            this.Manager.AddReturn(ReadConfigInfo, null, temp42);
            this.Manager.Comment("reaching state \'S272\'");
            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker3)));
            if ((temp48 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label43;
            }
            if ((temp48 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label43;
            }
            if ((temp48 == 2))
            {
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S277\'");
                int temp45 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker3)));
                if ((temp45 == 0))
                {
                    this.Manager.Comment("reaching state \'S278\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS279();
                    goto label40;
                }
                if ((temp45 == 1))
                {
                    this.Manager.Comment("reaching state \'S285\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S286\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S287\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S288\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S289\'");
                    int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker5)));
                    if ((temp44 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS257();
                        goto label39;
                    }
                    if ((temp44 == 1))
                    {
                        this.Manager.Comment("reaching state \'S290\'");
                        goto label39;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker5)));
                label39:
                    ;
                    goto label40;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker3)));
            label40:
                ;
                goto label43;
            }
            if ((temp48 == 3))
            {
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb302)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S295\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker9)));
                if ((temp47 == 0))
                {
                    this.Manager.Comment("reaching state \'S296\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S297\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S298\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S299\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S300\'");
                    int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker8)));
                    if ((temp46 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS116();
                        goto label41;
                    }
                    if ((temp46 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS117();
                        goto label41;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker8)));
                label41:
                    ;
                    goto label42;
                }
                if ((temp47 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS35();
                    goto label42;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker9)));
            label42:
                ;
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S277");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S277");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS279()
        {
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S280\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S282\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S284\'");
            int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker2)));
            if ((temp43 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS214();
                goto label38;
            }
            if ((temp43 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS215();
                goto label38;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker2)));
        label38:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S284");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S284");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero, the server MUST take the following actions:"", ""[TestInfo] PreviousSessionId is not equal to zero."", ""[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, where Session.SessionId matches PreviousSessionId. "", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S277");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S277");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S289");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S289");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S289");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S289");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S295");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S295");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S300");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS116()
        {
            this.Manager.Comment("reaching state \'S116\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S300");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS271SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S295");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S295");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S301
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS301()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS301");
            this.Manager.Comment("reaching state \'S301\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp49);
            this.Manager.AddReturn(ReadConfigInfo, null, temp49);
            this.Manager.Comment("reaching state \'S302\'");
            int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker3)));
            if ((temp56 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label50;
            }
            if ((temp56 == 1))
            {
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S307\'");
                int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker1)));
                if ((temp50 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS216();
                    goto label44;
                }
                if ((temp50 == 1))
                {
                    this.Manager.Comment("reaching state \'S308\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS279();
                    goto label44;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker1)));
            label44:
                ;
                goto label50;
            }
            if ((temp56 == 2))
            {
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S313\'");
                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker3)));
                if ((temp52 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS153();
                    goto label46;
                }
                if ((temp52 == 1))
                {
                    this.Manager.Comment("reaching state \'S314\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S315\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S316\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S317\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S318\'");
                    int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker5)));
                    if ((temp51 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS151();
                        goto label45;
                    }
                    if ((temp51 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS152();
                        goto label45;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker5)));
                label45:
                    ;
                    goto label46;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker3)));
            label46:
                ;
                goto label50;
            }
            if ((temp56 == 3))
            {
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S323\'");
                int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker9)));
                if ((temp55 == 0))
                {
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S325\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S326\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S327\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S328\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S329\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S330\'");
                    int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker8)));
                    if ((temp53 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS331();
                        goto label47;
                    }
                    if ((temp53 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS332();
                        goto label47;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker8)));
                label47:
                    ;
                    goto label49;
                }
                if ((temp55 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS333();
                    goto label49;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker9)));
            label49:
                ;
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S313");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S313");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S313");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S313");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S318");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S318");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S318");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S318");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S318");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S318");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S302");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S323");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS331()
        {
            this.Manager.Comment("reaching state \'S331\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS332()
        {
            this.Manager.Comment("reaching state \'S332\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S323");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS333()
        {
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S334\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S335\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S336\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S337\'");
            int temp54 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker11)));
            if ((temp54 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS338();
                goto label48;
            }
            if ((temp54 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS339();
                goto label48;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker11)));
        label48:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S337");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S337");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS338()
        {
            this.Manager.Comment("reaching state \'S338\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS301SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S337");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S337");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS339()
        {
            this.Manager.Comment("reaching state \'S339\'");
        }
        #endregion

        #region Test Starting in S340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS340()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS340");
            this.Manager.Comment("reaching state \'S340\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp57;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp57);
            this.Manager.AddReturn(ReadConfigInfo, null, temp57);
            this.Manager.Comment("reaching state \'S341\'");
            int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker3)));
            if ((temp65 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label58;
            }
            if ((temp65 == 1))
            {
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S346\'");
                int temp60 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker3)));
                if ((temp60 == 0))
                {
                    this.Manager.Comment("reaching state \'S347\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S348\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S349\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S350\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S351\'");
                    int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker2)));
                    if ((temp58 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS159();
                        goto label51;
                    }
                    if ((temp58 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS352();
                        goto label51;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker2)));
                label51:
                    ;
                    goto label53;
                }
                if ((temp60 == 1))
                {
                    this.Manager.Comment("reaching state \'S353\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S354\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S355\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S356\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S357\'");
                    int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker5)));
                    if ((temp59 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS152();
                        goto label52;
                    }
                    if ((temp59 == 1))
                    {
                        this.Manager.Comment("reaching state \'S358\'");
                        goto label52;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker5)));
                label52:
                    ;
                    goto label53;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker3)));
            label53:
                ;
                goto label58;
            }
            if ((temp65 == 2))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS359();
                goto label58;
            }
            if ((temp65 == 3))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S341");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S341");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S346");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S346");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S346");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS352()
        {
            this.Manager.Comment("reaching state \'S352\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S346");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S346");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S346");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S357");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S357");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S357");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S357");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S341");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS359()
        {
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S360\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S361\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S362\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S363\'");
            int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker7)));
            if ((temp62 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS333();
                goto label55;
            }
            if ((temp62 == 1))
            {
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                        "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S368\'");
                int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker9)));
                if ((temp61 == 0))
                {
                    this.Manager.Comment("reaching state \'S369\'");
                    goto label54;
                }
                if ((temp61 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS370();
                    goto label54;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker9)));
            label54:
                ;
                goto label55;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker7)));
        label55:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S363");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S363");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S368");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S368");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S368");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S368");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S368");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S368");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS370()
        {
            this.Manager.Comment("reaching state \'S370\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S341");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS371()
        {
            this.Manager.Comment("reaching state \'S371\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S372\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S375\'");
            int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker11)));
            if ((temp64 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS193();
                goto label57;
            }
            if ((temp64 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS376();
                goto label57;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker11)));
        label57:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S375");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S375");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S375");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S375");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S375");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S375");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS376()
        {
            this.Manager.Comment("reaching state \'S376\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S377\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S378\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S380\'");
            int temp63 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker13)));
            if ((temp63 == 0))
            {
                this.Manager.Comment("reaching state \'S381\'");
                goto label56;
            }
            if ((temp63 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS382();
                goto label56;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker13)));
        label56:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S380");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S380");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S380");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS340SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S380");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S380");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S380");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS382()
        {
            this.Manager.Comment("reaching state \'S382\'");
        }
        #endregion

        #region Test Starting in S383
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS383()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS383");
            this.Manager.Comment("reaching state \'S383\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp66;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp66);
            this.Manager.AddReturn(ReadConfigInfo, null, temp66);
            this.Manager.Comment("reaching state \'S384\'");
            int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker3)));
            if ((temp73 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label65;
            }
            if ((temp73 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label65;
            }
            if ((temp73 == 2))
            {
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S389\'");
                int temp69 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker3)));
                if ((temp69 == 0))
                {
                    this.Manager.Comment("reaching state \'S390\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S391\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S392\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S393\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S394\'");
                    int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker2)));
                    if ((temp67 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS370();
                        goto label59;
                    }
                    if ((temp67 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS395();
                        goto label59;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker2)));
                label59:
                    ;
                    goto label61;
                }
                if ((temp69 == 1))
                {
                    this.Manager.Comment("reaching state \'S396\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S397\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S398\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S399\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S400\'");
                    int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker5)));
                    if ((temp68 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS338();
                        goto label60;
                    }
                    if ((temp68 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS339();
                        goto label60;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker5)));
                label60:
                    ;
                    goto label61;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker3)));
            label61:
                ;
                goto label65;
            }
            if ((temp73 == 3))
            {
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S405\'");
                int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker9)));
                if ((temp72 == 0))
                {
                    this.Manager.Comment("reaching state \'S406\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S407\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S408\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S409\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S410\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S411\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S412\'");
                    int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker8)));
                    if ((temp70 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS82();
                        goto label62;
                    }
                    if ((temp70 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS83();
                        goto label62;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker8)));
                label62:
                    ;
                    goto label64;
                }
                if ((temp72 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS413();
                    goto label64;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker9)));
            label64:
                ;
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S384");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S384");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S384");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S389");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S389");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S389");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S394");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S394");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S394");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S394");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS395()
        {
            this.Manager.Comment("reaching state \'S395\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S389");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S389");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S389");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S400");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S400");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S400");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S400");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S400");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S400");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S384");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S405");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S412");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S412");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S412");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S412");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S412");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S412");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S405");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS413()
        {
            this.Manager.Comment("reaching state \'S413\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S414\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S416\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S417\'");
            int temp71 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker11)));
            if ((temp71 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS418();
                goto label63;
            }
            if ((temp71 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS419();
                goto label63;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker11)));
        label63:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS418()
        {
            this.Manager.Comment("reaching state \'S418\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS383SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS419()
        {
            this.Manager.Comment("reaching state \'S419\'");
        }
        #endregion

        #region Test Starting in S420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS420()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS420");
            this.Manager.Comment("reaching state \'S420\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp74;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp74);
            this.Manager.AddReturn(ReadConfigInfo, null, temp74);
            this.Manager.Comment("reaching state \'S421\'");
            int temp81 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker3)));
            if ((temp81 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label72;
            }
            if ((temp81 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label72;
            }
            if ((temp81 == 2))
            {
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S424\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S425\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S426\'");
                int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker3)));
                if ((temp77 == 0))
                {
                    this.Manager.Comment("reaching state \'S427\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS428();
                    goto label68;
                }
                if ((temp77 == 1))
                {
                    this.Manager.Comment("reaching state \'S434\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S435\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S436\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S437\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S438\'");
                    int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker5)));
                    if ((temp76 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS339();
                        goto label67;
                    }
                    if ((temp76 == 1))
                    {
                        this.Manager.Comment("reaching state \'S439\'");
                        goto label67;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker5)));
                label67:
                    ;
                    goto label68;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker3)));
            label68:
                ;
                goto label72;
            }
            if ((temp81 == 3))
            {
                this.Manager.Comment("reaching state \'S440\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S441\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S444\'");
                int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker9)));
                if ((temp80 == 0))
                {
                    this.Manager.Comment("reaching state \'S445\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S446\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S447\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S448\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S449\'");
                    int temp78 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker8)));
                    if ((temp78 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS419();
                        goto label69;
                    }
                    if ((temp78 == 1))
                    {
                        this.Manager.Comment("reaching state \'S450\'");
                        goto label69;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker8)));
                label69:
                    ;
                    goto label71;
                }
                if ((temp80 == 1))
                {
                    this.Manager.Comment("reaching state \'S451\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S452\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S453\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S454\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S455\'");
                    int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker11)));
                    if ((temp79 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS73();
                        goto label70;
                    }
                    if ((temp79 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS74();
                        goto label70;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker11)));
                label70:
                    ;
                    goto label71;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker9)));
            label71:
                ;
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS428()
        {
            this.Manager.Comment("reaching state \'S428\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S429\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S430\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S431\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S432\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S433\'");
            int temp75 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker2)));
            if ((temp75 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS331();
                goto label66;
            }
            if ((temp75 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS332();
                goto label66;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker2)));
        label66:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S433");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S433");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S433");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero, the server MUST take the following actions:"", ""[TestInfo] PreviousSessionId is not equal to zero."", ""[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, where Session.SessionId matches PreviousSessionId. "", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S433");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S433");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S433");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S438");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S438");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S438");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S438");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S438");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S438");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S444");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S444");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S444");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S449");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S449");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S449");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S449");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S449");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S449");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S444");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S444");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S444");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS420SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS456()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS456");
            this.Manager.Comment("reaching state \'S456\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp82;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp82);
            this.Manager.AddReturn(ReadConfigInfo, null, temp82);
            this.Manager.Comment("reaching state \'S457\'");
            int temp89 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker3)));
            if ((temp89 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label79;
            }
            if ((temp89 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label79;
            }
            if ((temp89 == 2))
            {
                this.Manager.Comment("reaching state \'S458\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S461\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S462\'");
                int temp85 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker3)));
                if ((temp85 == 0))
                {
                    this.Manager.Comment("reaching state \'S463\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S464\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S465\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S466\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S467\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S468\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S469\'");
                    int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker2)));
                    if ((temp83 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS470();
                        goto label73;
                    }
                    if ((temp83 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS471();
                        goto label73;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker2)));
                label73:
                    ;
                    goto label75;
                }
                if ((temp85 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS472();
                    goto label75;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker3)));
            label75:
                ;
                goto label79;
            }
            if ((temp89 == 3))
            {
                this.Manager.Comment("reaching state \'S479\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S480\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S481\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S482\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S483\'");
                int temp88 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker9)));
                if ((temp88 == 0))
                {
                    this.Manager.Comment("reaching state \'S484\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S485\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S486\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S487\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S488\'");
                    int temp86 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker8)));
                    if ((temp86 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS159();
                        goto label76;
                    }
                    if ((temp86 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS352();
                        goto label76;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker8)));
                label76:
                    ;
                    goto label78;
                }
                if ((temp88 == 1))
                {
                    this.Manager.Comment("reaching state \'S489\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS490();
                    goto label78;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker9)));
            label78:
                ;
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S462");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S462");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S462");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S469");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S469");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S469");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS470()
        {
            this.Manager.Comment("reaching state \'S470\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S469");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S469");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S469");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS471()
        {
            this.Manager.Comment("reaching state \'S471\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S462");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S462");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S462");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS472()
        {
            this.Manager.Comment("reaching state \'S472\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S473\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S474\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S475\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S476\'");
            int temp84 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker5)));
            if ((temp84 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS477();
                goto label74;
            }
            if ((temp84 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS478();
                goto label74;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker5)));
        label74:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S476");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S476");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS477()
        {
            this.Manager.Comment("reaching state \'S477\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S476");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S476");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS478()
        {
            this.Manager.Comment("reaching state \'S478\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S483");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S483");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S483");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S488");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S488");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S488");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S488");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S483");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S483");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S483");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS490()
        {
            this.Manager.Comment("reaching state \'S490\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S491\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S492\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S493\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S494\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S495\'");
            int temp87 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker11)));
            if ((temp87 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS496();
                goto label77;
            }
            if ((temp87 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS497();
                goto label77;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker11)));
        label77:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S495");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S495");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S495");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero, the server MUST take the following actions:"", ""[TestInfo] PreviousSessionId is not equal to zero."", ""[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, where Session.SessionId matches PreviousSessionId. "", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS496()
        {
            this.Manager.Comment("reaching state \'S496\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS456SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S495");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S495");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S495");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS497()
        {
            this.Manager.Comment("reaching state \'S497\'");
        }
        #endregion

        #region Test Starting in S498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS498()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS498");
            this.Manager.Comment("reaching state \'S498\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp90;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp90);
            this.Manager.AddReturn(ReadConfigInfo, null, temp90);
            this.Manager.Comment("reaching state \'S499\'");
            int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker3)));
            if ((temp96 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label85;
            }
            if ((temp96 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label85;
            }
            if ((temp96 == 2))
            {
                this.Manager.Comment("reaching state \'S500\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S501\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S502\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S503\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S504\'");
                int temp93 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker3)));
                if ((temp93 == 0))
                {
                    this.Manager.Comment("reaching state \'S505\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S506\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S507\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S508\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S509\'");
                    int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker2)));
                    if ((temp91 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS510();
                        goto label80;
                    }
                    if ((temp91 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS511();
                        goto label80;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker2)));
                label80:
                    ;
                    goto label82;
                }
                if ((temp93 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS512();
                    goto label82;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker3)));
            label82:
                ;
                goto label85;
            }
            if ((temp96 == 3))
            {
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S522\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S523\'");
                int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker7)));
                if ((temp95 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS128();
                    goto label84;
                }
                if ((temp95 == 1))
                {
                    this.Manager.Comment("reaching state \'S524\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S525\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S526\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S527\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S528\'");
                    int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker9)));
                    if ((temp94 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS140();
                        goto label83;
                    }
                    if ((temp94 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS529();
                        goto label83;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker9)));
                label83:
                    ;
                    goto label84;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker7)));
            label84:
                ;
                goto label85;
            }
            throw new InvalidOperationException("never reached");
        label85:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S499");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S499");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S499");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S504");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S504");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S509");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S509");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S509");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS510()
        {
            this.Manager.Comment("reaching state \'S510\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S509");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S509");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S509");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId a" +
                        "nd SessionId values in the SMB2 header of the request are equal, the server SHOU" +
                        "LD<230> ignore PreviousSessionId and no other processing is required.\", \"[TestIn" +
                        "fo] PreviousSessionId is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST" +
                        " be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS511()
        {
            this.Manager.Comment("reaching state \'S511\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S504");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S504");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS512()
        {
            this.Manager.Comment("reaching state \'S512\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S513\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S514\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S515\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S516\'");
            int temp92 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker5)));
            if ((temp92 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS517();
                goto label81;
            }
            if ((temp92 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS518();
                goto label81;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker5)));
        label81:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S516");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S516");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S516");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS517()
        {
            this.Manager.Comment("reaching state \'S517\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S516");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S516");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S516");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS518()
        {
            this.Manager.Comment("reaching state \'S518\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S499");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S523");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S523");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S523");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S523");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S523");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S523");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S528");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S528");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S528");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS498SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S528");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S528");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S528");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS529()
        {
            this.Manager.Comment("reaching state \'S529\'");
        }
        #endregion

        #region Test Starting in S530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS530()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS530");
            this.Manager.Comment("reaching state \'S530\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp97;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp97);
            this.Manager.AddReturn(ReadConfigInfo, null, temp97);
            this.Manager.Comment("reaching state \'S531\'");
            int temp103 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker3)));
            if ((temp103 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label91;
            }
            if ((temp103 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label91;
            }
            if ((temp103 == 2))
            {
                this.Manager.Comment("reaching state \'S532\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S533\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S534\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S536\'");
                int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker3)));
                if ((temp100 == 0))
                {
                    this.Manager.Comment("reaching state \'S537\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S538\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S539\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S540\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S541\'");
                    int temp98 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker2)));
                    if ((temp98 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS510();
                        goto label86;
                    }
                    if ((temp98 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS511();
                        goto label86;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker2)));
                label86:
                    ;
                    goto label88;
                }
                if ((temp100 == 1))
                {
                    this.Manager.Comment("reaching state \'S542\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S543\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S544\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S545\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S546\'");
                    int temp99 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker5)));
                    if ((temp99 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS518();
                        goto label87;
                    }
                    if ((temp99 == 1))
                    {
                        this.Manager.Comment("reaching state \'S547\'");
                        goto label87;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker5)));
                label87:
                    ;
                    goto label88;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker3)));
            label88:
                ;
                goto label91;
            }
            if ((temp103 == 3))
            {
                this.Manager.Comment("reaching state \'S548\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S552\'");
                int temp102 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker7)));
                if ((temp102 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS134();
                    goto label90;
                }
                if ((temp102 == 1))
                {
                    this.Manager.Comment("reaching state \'S553\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S554\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S555\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S556\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S557\'");
                    int temp101 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker9)));
                    if ((temp101 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS133();
                        goto label89;
                    }
                    if ((temp101 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS62();
                        goto label89;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker9)));
                label89:
                    ;
                    goto label90;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker7)));
            label90:
                ;
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S536");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S536");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S541");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S541");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S541");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S541");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S541");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S541");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S536");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S536");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S546");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S546");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S546");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S546");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S546");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S546");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server d" +
                        "etermines the authentications were for the same user, the server MUST remove the" +
                        " old session from the GlobalSessionTable and also from the Connection.SessionTab" +
                        "le, as specified in section 3.3.7.1.\", \"[TestInfo] The authentications were for " +
                        "the same user\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S531");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S552");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S552");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S552");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S552");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S557");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS530SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S557");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S558
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS558()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS558");
            this.Manager.Comment("reaching state \'S558\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp104;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp104);
            this.Manager.AddReturn(ReadConfigInfo, null, temp104);
            this.Manager.Comment("reaching state \'S559\'");
            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker3)));
            if ((temp109 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label96;
            }
            if ((temp109 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label96;
            }
            if ((temp109 == 2))
            {
                this.Manager.Comment("reaching state \'S560\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S561\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S562\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S563\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S564\'");
                int temp106 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker1)));
                if ((temp106 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS512();
                    goto label93;
                }
                if ((temp106 == 1))
                {
                    this.Manager.Comment("reaching state \'S565\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S566\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S567\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S568\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S569\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S570\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S571\'");
                    int temp105 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker3)));
                    if ((temp105 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS235();
                        goto label92;
                    }
                    if ((temp105 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS236();
                        goto label92;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker3)));
                label92:
                    ;
                    goto label93;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker1)));
            label93:
                ;
                goto label96;
            }
            if ((temp109 == 3))
            {
                this.Manager.Comment("reaching state \'S572\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S573\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S574\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S575\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S576\'");
                int temp108 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker7)));
                if ((temp108 == 0))
                {
                    this.Manager.Comment("reaching state \'S577\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS578();
                    goto label95;
                }
                if ((temp108 == 1))
                {
                    this.Manager.Comment("reaching state \'S584\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS578();
                    goto label95;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker7)));
            label95:
                ;
                goto label96;
            }
            throw new InvalidOperationException("never reached");
        label96:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S559");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S559");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S559");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S564");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S564");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S564");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S564");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S564");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S564");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S571");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S571");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S571");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] 13. Session" +
                        ".State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S571");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S571");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S571");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S559");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S576");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S576");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS578()
        {
            this.Manager.Comment("reaching state \'S578\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S579\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S580\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S581\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S582\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S583\'");
            int temp107 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker6)));
            if ((temp107 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS54();
                goto label94;
            }
            if ((temp107 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS55();
                goto label94;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker6)));
        label94:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S583");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S583");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S583");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S583");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S583");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S583");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS558SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S576");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S576");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S585
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS585()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS585");
            this.Manager.Comment("reaching state \'S585\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp110;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp110);
            this.Manager.AddReturn(ReadConfigInfo, null, temp110);
            this.Manager.Comment("reaching state \'S586\'");
            int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker3)));
            if ((temp117 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label103;
            }
            if ((temp117 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS359();
                goto label103;
            }
            if ((temp117 == 2))
            {
                this.Manager.Comment("reaching state \'S587\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S588\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S590\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S591\'");
                int temp113 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker3)));
                if ((temp113 == 0))
                {
                    this.Manager.Comment("reaching state \'S592\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S594\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S595\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S596\'");
                    int temp111 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker2)));
                    if ((temp111 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS382();
                        goto label97;
                    }
                    if ((temp111 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS597();
                        goto label97;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker2)));
                label97:
                    ;
                    goto label99;
                }
                if ((temp113 == 1))
                {
                    this.Manager.Comment("reaching state \'S598\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S599\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S600\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S601\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S602\'");
                    int temp112 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker5)));
                    if ((temp112 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS199();
                        goto label98;
                    }
                    if ((temp112 == 1))
                    {
                        this.Manager.Comment("reaching state \'S603\'");
                        goto label98;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker5)));
                label98:
                    ;
                    goto label99;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker3)));
            label99:
                ;
                goto label103;
            }
            if ((temp117 == 3))
            {
                this.Manager.Comment("reaching state \'S604\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S606\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S607\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S608\'");
                int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker9)));
                if ((temp116 == 0))
                {
                    this.Manager.Comment("reaching state \'S609\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S610\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S611\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S612\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S613\'");
                    int temp114 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker8)));
                    if ((temp114 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS418();
                        goto label100;
                    }
                    if ((temp114 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS419();
                        goto label100;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker8)));
                label100:
                    ;
                    goto label102;
                }
                if ((temp116 == 1))
                {
                    this.Manager.Comment("reaching state \'S614\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S615\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S616\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S617\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S618\'");
                    int temp115 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker11)));
                    if ((temp115 == 0))
                    {
                        this.Manager.Comment("reaching state \'S619\'");
                        goto label101;
                    }
                    if ((temp115 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS74();
                        goto label101;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker11)));
                label101:
                    ;
                    goto label102;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker9)));
            label102:
                ;
                goto label103;
            }
            throw new InvalidOperationException("never reached");
        label103:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S586");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S586");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S586");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S591");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S591");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S591");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S596");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S596");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS597()
        {
            this.Manager.Comment("reaching state \'S597\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S591");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S591");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S591");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S602");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S602");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S602");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S602");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S602");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S602");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S586");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S608");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S608");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S613");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S613");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S613");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S613");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S608");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S608");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S618");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S618");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S618");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS585SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S618");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S618");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S618");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S620
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS620()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS620");
            this.Manager.Comment("reaching state \'S620\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp118;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp118);
            this.Manager.AddReturn(ReadConfigInfo, null, temp118);
            this.Manager.Comment("reaching state \'S621\'");
            int temp123 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker3)));
            if ((temp123 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label108;
            }
            if ((temp123 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS359();
                goto label108;
            }
            if ((temp123 == 2))
            {
                this.Manager.Comment("reaching state \'S622\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S623\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S624\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S625\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S626\'");
                int temp120 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker1)));
                if ((temp120 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS376();
                    goto label105;
                }
                if ((temp120 == 1))
                {
                    this.Manager.Comment("reaching state \'S627\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS628();
                    goto label105;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker1)));
            label105:
                ;
                goto label108;
            }
            if ((temp123 == 3))
            {
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S636\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S637\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S638\'");
                int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker5)));
                if ((temp122 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS146();
                    goto label107;
                }
                if ((temp122 == 1))
                {
                    this.Manager.Comment("reaching state \'S639\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S640\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S641\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S642\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S643\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S644\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S645\'");
                    int temp121 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker7)));
                    if ((temp121 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS496();
                        goto label106;
                    }
                    if ((temp121 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS497();
                        goto label106;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker7)));
                label106:
                    ;
                    goto label107;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker5)));
            label107:
                ;
                goto label108;
            }
            throw new InvalidOperationException("never reached");
        label108:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S621");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S621");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S621");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S626");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S626");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S626");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S626");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S626");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S626");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS628()
        {
            this.Manager.Comment("reaching state \'S628\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S629\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S630\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S631\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S632\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S633\'");
            int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker3)));
            if ((temp119 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS191();
                goto label104;
            }
            if ((temp119 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS192();
                goto label104;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker3)));
        label104:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S633");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S633");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S633");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S633");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S633");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S633");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero, the server MUST take the following actions:"", ""[TestInfo] PreviousSessionId is not equal to zero."", ""[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, where Session.SessionId matches PreviousSessionId. "", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S621");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S638");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S638");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S638");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S638");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S645");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S645");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S645");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS620SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S645");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S645");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S645");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS646()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS646");
            this.Manager.Comment("reaching state \'S646\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp124;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp124);
            this.Manager.AddReturn(ReadConfigInfo, null, temp124);
            this.Manager.Comment("reaching state \'S647\'");
            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker3)));
            if ((temp129 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label113;
            }
            if ((temp129 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label113;
            }
            if ((temp129 == 2))
            {
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S649\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S650\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S651\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S652\'");
                int temp125 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker1)));
                if ((temp125 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS193();
                    goto label109;
                }
                if ((temp125 == 1))
                {
                    this.Manager.Comment("reaching state \'S653\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS628();
                    goto label109;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker1)));
            label109:
                ;
                goto label113;
            }
            if ((temp129 == 3))
            {
                this.Manager.Comment("reaching state \'S654\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S655\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S658\'");
                int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker5)));
                if ((temp128 == 0))
                {
                    this.Manager.Comment("reaching state \'S659\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S660\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S661\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S662\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S663\'");
                    int temp126 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker4)));
                    if ((temp126 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS664();
                        goto label110;
                    }
                    if ((temp126 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS665();
                        goto label110;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker4)));
                label110:
                    ;
                    goto label112;
                }
                if ((temp128 == 1))
                {
                    this.Manager.Comment("reaching state \'S666\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S667\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S668\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S669\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S670\'");
                    int temp127 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker7)));
                    if ((temp127 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS477();
                        goto label111;
                    }
                    if ((temp127 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS478();
                        goto label111;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker7)));
                label111:
                    ;
                    goto label112;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker5)));
            label112:
                ;
                goto label113;
            }
            throw new InvalidOperationException("never reached");
        label113:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S647");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S647");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S647");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S652");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S652");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S652");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S652");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S652");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S652");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S647");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S658");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S658");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S663");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S663");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S663");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS664()
        {
            this.Manager.Comment("reaching state \'S664\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S663");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S663");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S663");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS665()
        {
            this.Manager.Comment("reaching state \'S665\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S658");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S658");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S670");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S670");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S670");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS646SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S670");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S670");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S670");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S671
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS671()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS671");
            this.Manager.Comment("reaching state \'S671\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp130;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp130);
            this.Manager.AddReturn(ReadConfigInfo, null, temp130);
            this.Manager.Comment("reaching state \'S672\'");
            int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker3)));
            if ((temp137 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label120;
            }
            if ((temp137 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label120;
            }
            if ((temp137 == 2))
            {
                this.Manager.Comment("reaching state \'S673\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S674\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S677\'");
                int temp133 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker3)));
                if ((temp133 == 0))
                {
                    this.Manager.Comment("reaching state \'S678\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S679\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S680\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S681\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S682\'");
                    int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker2)));
                    if ((temp131 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS20();
                        goto label114;
                    }
                    if ((temp131 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS683();
                        goto label114;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker2)));
                label114:
                    ;
                    goto label116;
                }
                if ((temp133 == 1))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS684();
                    goto label116;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker3)));
            label116:
                ;
                goto label120;
            }
            if ((temp137 == 3))
            {
                this.Manager.Comment("reaching state \'S689\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S690\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S691\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S692\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S693\'");
                int temp136 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker9)));
                if ((temp136 == 0))
                {
                    this.Manager.Comment("reaching state \'S694\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S695\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S696\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S697\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S698\'");
                    int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker8)));
                    if ((temp134 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS665();
                        goto label117;
                    }
                    if ((temp134 == 1))
                    {
                        this.Manager.Comment("reaching state \'S699\'");
                        goto label117;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker8)));
                label117:
                    ;
                    goto label119;
                }
                if ((temp136 == 1))
                {
                    this.Manager.Comment("reaching state \'S700\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS701();
                    goto label119;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker9)));
            label119:
                ;
                goto label120;
            }
            throw new InvalidOperationException("never reached");
        label120:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S672");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S672");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S672");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S677");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S677");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S682");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S682");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S682");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S682");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S682");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS683()
        {
            this.Manager.Comment("reaching state \'S683\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S677");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S677");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS684()
        {
            this.Manager.Comment("reaching state \'S684\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S685\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S686\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                    "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S687\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S688\'");
            int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker5)));
            if ((temp132 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS105();
                goto label115;
            }
            if ((temp132 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS13();
                goto label115;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker5)));
        label115:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S688");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S688");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS105()
        {
            this.Manager.Comment("reaching state \'S105\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S688");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S688");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S688");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S672");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S693");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S698");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S698");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S698");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S698");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S698");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S693");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS701()
        {
            this.Manager.Comment("reaching state \'S701\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S702\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S704\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S705\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S706\'");
            int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker11)));
            if ((temp135 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS470();
                goto label118;
            }
            if ((temp135 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS471();
                goto label118;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker11)));
        label118:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S706");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S706");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero, the server MUST take the following actions:"", ""[TestInfo] PreviousSessionId is not equal to zero."", ""[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, where Session.SessionId matches PreviousSessionId. "", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS671SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S706");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S706");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S706");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S707
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS707()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS707");
            this.Manager.Comment("reaching state \'S707\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp138;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp138);
            this.Manager.AddReturn(ReadConfigInfo, null, temp138);
            this.Manager.Comment("reaching state \'S708\'");
            int temp143 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker3)));
            if ((temp143 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label125;
            }
            if ((temp143 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label125;
            }
            if ((temp143 == 2))
            {
                this.Manager.Comment("reaching state \'S709\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S710\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S711\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S712\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S713\'");
                int temp141 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker3)));
                if ((temp141 == 0))
                {
                    this.Manager.Comment("reaching state \'S714\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S715\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S716\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S717\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S718\'");
                    int temp139 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker2)));
                    if ((temp139 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS20();
                        goto label121;
                    }
                    if ((temp139 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS683();
                        goto label121;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker2)));
                label121:
                    ;
                    goto label123;
                }
                if ((temp141 == 1))
                {
                    this.Manager.Comment("reaching state \'S719\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS720();
                    goto label123;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker3)));
            label123:
                ;
                goto label125;
            }
            if ((temp143 == 3))
            {
                this.Manager.Comment("reaching state \'S726\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S729\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S730\'");
                int temp142 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker7)));
                if ((temp142 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS472();
                    goto label124;
                }
                if ((temp142 == 1))
                {
                    this.Manager.Comment("reaching state \'S731\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS701();
                    goto label124;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker7)));
            label124:
                ;
                goto label125;
            }
            throw new InvalidOperationException("never reached");
        label125:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S708");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S708");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S708");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S713");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S713");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S718");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S718");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S718");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S718");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S718");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId a" +
                        "nd SessionId values in the SMB2 header of the request are equal, the server SHOU" +
                        "LD<230> ignore PreviousSessionId and no other processing is required.\", \"[TestIn" +
                        "fo] PreviousSessionId is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST" +
                        " be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S713");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S713");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS720()
        {
            this.Manager.Comment("reaching state \'S720\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S721\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S722\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S723\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                    "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S724\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S725\'");
            int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker5)));
            if ((temp140 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS98();
                goto label122;
            }
            if ((temp140 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS99();
                goto label122;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker5)));
        label122:
            ;
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707TerminateConnectionChecker()
        {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S725");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S725");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S725");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] 13. Session" +
                        ".State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS98()
        {
            this.Manager.Comment("reaching state \'S98\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S725");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S725");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S725");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS99()
        {
            this.Manager.Comment("reaching state \'S99\'");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S708");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S730");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S730");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S730");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS707SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S730");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S730");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S730");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S732
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS732()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS732");
            this.Manager.Comment("reaching state \'S732\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp144;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp144);
            this.Manager.AddReturn(ReadConfigInfo, null, temp144);
            this.Manager.Comment("reaching state \'S733\'");
            int temp147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker3)));
            if ((temp147 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label128;
            }
            if ((temp147 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS359();
                goto label128;
            }
            if ((temp147 == 2))
            {
                this.Manager.Comment("reaching state \'S734\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S735\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S736\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S737\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S738\'");
                int temp145 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker1)));
                if ((temp145 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS684();
                    goto label126;
                }
                if ((temp145 == 1))
                {
                    this.Manager.Comment("reaching state \'S739\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS720();
                    goto label126;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker1)));
            label126:
                ;
                goto label128;
            }
            if ((temp147 == 3))
            {
                this.Manager.Comment("reaching state \'S740\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S741\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S742\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S743\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S744\'");
                int temp146 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker3)));
                if ((temp146 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS413();
                    goto label127;
                }
                if ((temp146 == 1))
                {
                    this.Manager.Comment("reaching state \'S745\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS76();
                    goto label127;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker3)));
            label127:
                ;
                goto label128;
            }
            throw new InvalidOperationException("never reached");
        label128:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S733");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S733");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S733");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S738");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S738");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S738");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S738");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S738");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S738");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S733");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S744");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S744");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S744");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS732SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S744");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S744");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S744");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S746
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS746()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS746");
            this.Manager.Comment("reaching state \'S746\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp148;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp148);
            this.Manager.AddReturn(ReadConfigInfo, null, temp148);
            this.Manager.Comment("reaching state \'S747\'");
            int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker3)));
            if ((temp152 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS359();
                goto label132;
            }
            if ((temp152 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label132;
            }
            if ((temp152 == 2))
            {
                this.Manager.Comment("reaching state \'S748\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S749\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S750\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S751\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S752\'");
                int temp149 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker1)));
                if ((temp149 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS146();
                    goto label129;
                }
                if ((temp149 == 1))
                {
                    this.Manager.Comment("reaching state \'S753\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS490();
                    goto label129;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker1)));
            label129:
                ;
                goto label132;
            }
            if ((temp152 == 3))
            {
                this.Manager.Comment("reaching state \'S754\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S755\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S756\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S757\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S758\'");
                int temp151 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker3)));
                if ((temp151 == 0))
                {
                    SessionMgmtReconnectSessionScenarioTestCaseS128();
                    goto label131;
                }
                if ((temp151 == 1))
                {
                    this.Manager.Comment("reaching state \'S759\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S760\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S761\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S762\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S763\'");
                    int temp150 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker5)));
                    if ((temp150 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS140();
                        goto label130;
                    }
                    if ((temp150 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS529();
                        goto label130;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker5)));
                label130:
                    ;
                    goto label131;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker3)));
            label131:
                ;
                goto label132;
            }
            throw new InvalidOperationException("never reached");
        label132:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S747");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S747");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S747");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S752");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S752");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S752");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S752");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S752");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S752");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S747");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S758");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S758");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S758");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S758");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S758");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S758");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S763");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S763");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S763");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS746SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S763");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S763");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S763");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S764
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS764()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS764");
            this.Manager.Comment("reaching state \'S764\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp153;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp153);
            this.Manager.AddReturn(ReadConfigInfo, null, temp153);
            this.Manager.Comment("reaching state \'S765\'");
            int temp160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker3)));
            if ((temp160 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label139;
            }
            if ((temp160 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label139;
            }
            if ((temp160 == 2))
            {
                this.Manager.Comment("reaching state \'S766\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S767\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S768\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S769\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S770\'");
                int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker3)));
                if ((temp156 == 0))
                {
                    this.Manager.Comment("reaching state \'S771\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S772\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S773\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S774\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S775\'");
                    int temp154 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker2)));
                    if ((temp154 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS517();
                        goto label133;
                    }
                    if ((temp154 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS518();
                        goto label133;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker2)));
                label133:
                    ;
                    goto label135;
                }
                if ((temp156 == 1))
                {
                    this.Manager.Comment("reaching state \'S776\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S777\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S778\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S779\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S780\'");
                    int temp155 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker5)));
                    if ((temp155 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS510();
                        goto label134;
                    }
                    if ((temp155 == 1))
                    {
                        this.Manager.Comment("reaching state \'S781\'");
                        goto label134;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker5)));
                label134:
                    ;
                    goto label135;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker3)));
            label135:
                ;
                goto label139;
            }
            if ((temp160 == 3))
            {
                this.Manager.Comment("reaching state \'S782\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S783\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S784\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S785\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S786\'");
                int temp159 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker9)));
                if ((temp159 == 0))
                {
                    this.Manager.Comment("reaching state \'S787\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S788\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S789\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S790\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S791\'");
                    int temp157 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker8)));
                    if ((temp157 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS256();
                        goto label136;
                    }
                    if ((temp157 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS257();
                        goto label136;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker8)));
                label136:
                    ;
                    goto label138;
                }
                if ((temp159 == 1))
                {
                    this.Manager.Comment("reaching state \'S792\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S793\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S794\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S795\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S796\'");
                    int temp158 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker11)));
                    if ((temp158 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS221();
                        goto label137;
                    }
                    if ((temp158 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS222();
                        goto label137;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker11)));
                label137:
                    ;
                    goto label138;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker9)));
            label138:
                ;
                goto label139;
            }
            throw new InvalidOperationException("never reached");
        label139:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S765");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S765");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S765");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S770");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S770");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S775");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S775");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S775");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId a" +
                        "nd SessionId values in the SMB2 header of the request are equal, the server SHOU" +
                        "LD<230> ignore PreviousSessionId and no other processing is required.\", \"[TestIn" +
                        "fo] PreviousSessionId is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST" +
                        " be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S775");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S775");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S775");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S770");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S770");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S780");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S780");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S780");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S780");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server d" +
                        "etermines the authentications were for the same user, the server MUST remove the" +
                        " old session from the GlobalSessionTable and also from the Connection.SessionTab" +
                        "le, as specified in section 3.3.7.1.\", \"[TestInfo] The authentications were for " +
                        "the same user\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S765");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S786");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S786");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S786");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S791");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S791");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S791");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S791");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S786");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S786");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S786");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S796");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S796");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S796");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS764SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S796");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S796");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S796");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S797
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS797()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS797");
            this.Manager.Comment("reaching state \'S797\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp161;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp161);
            this.Manager.AddReturn(ReadConfigInfo, null, temp161);
            this.Manager.Comment("reaching state \'S798\'");
            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker3)));
            if ((temp167 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label145;
            }
            if ((temp167 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label145;
            }
            if ((temp167 == 2))
            {
                this.Manager.Comment("reaching state \'S799\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S800\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S801\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S802\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S803\'");
                int temp163 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker1)));
                if ((temp163 == 0))
                {
                    this.Manager.Comment("reaching state \'S804\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtReconnectSessionScenarioTestCaseS428();
                    goto label141;
                }
                if ((temp163 == 1))
                {
                    this.Manager.Comment("reaching state \'S805\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S806\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S807\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S808\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S809\'");
                    int temp162 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker3)));
                    if ((temp162 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS370();
                        goto label140;
                    }
                    if ((temp162 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS395();
                        goto label140;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker3)));
                label140:
                    ;
                    goto label141;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker1)));
            label141:
                ;
                goto label145;
            }
            if ((temp167 == 3))
            {
                this.Manager.Comment("reaching state \'S810\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S811\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S812\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S813\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S814\'");
                int temp166 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker7)));
                if ((temp166 == 0))
                {
                    this.Manager.Comment("reaching state \'S815\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S816\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S817\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S818\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S819\'");
                    int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker6)));
                    if ((temp164 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS198();
                        goto label142;
                    }
                    if ((temp164 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS199();
                        goto label142;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker6)));
                label142:
                    ;
                    goto label144;
                }
                if ((temp166 == 1))
                {
                    this.Manager.Comment("reaching state \'S820\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S821\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S822\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S823\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S824\'");
                    int temp165 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker9)));
                    if ((temp165 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS382();
                        goto label143;
                    }
                    if ((temp165 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS597();
                        goto label143;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker9)));
                label143:
                    ;
                    goto label144;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker7)));
            label144:
                ;
                goto label145;
            }
            throw new InvalidOperationException("never reached");
        label145:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S798");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S798");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S798");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S803");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S803");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S803");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S803");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S803");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S803");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S809");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S809");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S809");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S809");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S809");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S809");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S798");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S814");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S814");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S814");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S819");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S819");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S819");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S819");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S819");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S819");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S814");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S814");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S814");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S824");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S824");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S824");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS797SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S824");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S824");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S824");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S825
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS825()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS825");
            this.Manager.Comment("reaching state \'S825\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp168;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp168);
            this.Manager.AddReturn(ReadConfigInfo, null, temp168);
            this.Manager.Comment("reaching state \'S826\'");
            int temp172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker3)));
            if ((temp172 == 0))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label149;
            }
            if ((temp172 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label149;
            }
            if ((temp172 == 2))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS371();
                goto label149;
            }
            if ((temp172 == 3))
            {
                this.Manager.Comment("reaching state \'S827\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S828\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S829\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S830\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S831\'");
                int temp171 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker3)));
                if ((temp171 == 0))
                {
                    this.Manager.Comment("reaching state \'S832\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S833\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S834\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Main" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S835\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S836\'");
                    int temp169 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker2)));
                    if ((temp169 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS478();
                        goto label146;
                    }
                    if ((temp169 == 1))
                    {
                        this.Manager.Comment("reaching state \'S837\'");
                        goto label146;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker2)));
                label146:
                    ;
                    goto label148;
                }
                if ((temp171 == 1))
                {
                    this.Manager.Comment("reaching state \'S838\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S839\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S840\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S841\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S842\'");
                    int temp170 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker5)));
                    if ((temp170 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS664();
                        goto label147;
                    }
                    if ((temp170 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS665();
                        goto label147;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker5)));
                label147:
                    ;
                    goto label148;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker3)));
            label148:
                ;
                goto label149;
            }
            throw new InvalidOperationException("never reached");
        label149:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S826");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S826");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S826");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S826");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S831");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S831");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S831");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S836");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S836");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S836");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S836");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 2.\tOtherwise, if the server determines the authenti" +
                        "cations were for the same user, the server MUST remove the old session from the " +
                        "GlobalSessionTable and also from the Connection.SessionTable, as specified in se" +
                        "ction 3.3.7.1.\", \"[TestInfo] The authentications were for the same user\", \"[MS-S" +
                        "MB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 2.\tOtherwise, if the server determines the authentications were for th" +
                    "e same user, the server MUST remove the old session from the GlobalSessionTable " +
                    "and also from the Connection.SessionTable, as specified in section 3.3.7.1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The authentications were for the same user\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S831");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S831");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S831");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S842");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S842");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Const" +
                        "rainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymous is FALSE, so set Co" +
                        "nnection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. If the PreviousSessionI" +
                        "d field of the request is not equal to zero, the server MUST take the following " +
                        "actions:\", \"[TestInfo] PreviousSessionId is not equal to zero.\", \"[MS-SMB2] 1. T" +
                        "he server MUST look up the old session in GlobalSessionTable, where Session.Sess" +
                        "ionId matches PreviousSessionId. \", \"[MS-SMB2] If a session is found with Sessio" +
                        "n.SessionId equal to PreviousSessionId, the server MUST determine if the old ses" +
                        "sion and the newly established session are created by the same user by comparing" +
                        " the user identifiers obtained from the Session.SecurityContext on the new and o" +
                        "ld session.\", \"[TestInfo] There is a session with Session.SessionId equal to Pre" +
                        "viousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in" +
                        " the SMB2 header of the request are equal, the server SHOULD<230> ignore Previou" +
                        "sSessionId and no other processing is required.\", \"[TestInfo] PreviousSessionId " +
                        "is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS825SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S842");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S842");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion

        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtReconnectSessionScenarioTestCaseS84()
        {
            this.Manager.BeginTest("SessionMgmtReconnectSessionScenarioTestCaseS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp173;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp173);
            this.Manager.AddReturn(ReadConfigInfo, null, temp173);
            this.Manager.Comment("reaching state \'S85\'");
            int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker1)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker2)), new ExpectedReturn(SessionMgmtReconnectSessionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker3)));
            if ((temp180 == 0))
            {
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb302)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S110\'");
                int temp176 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker3)));
                if ((temp176 == 0))
                {
                    this.Manager.Comment("reaching state \'S111\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S112\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S113\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S114\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S115\'");
                    int temp174 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker2)));
                    if ((temp174 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS116();
                        goto label150;
                    }
                    if ((temp174 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS117();
                        goto label150;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker2)));
                label150:
                    ;
                    goto label152;
                }
                if ((temp176 == 1))
                {
                    this.Manager.Comment("reaching state \'S118\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S119\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S120\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S121\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S122\'");
                    int temp175 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker5)));
                    if ((temp175 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS40();
                        goto label151;
                    }
                    if ((temp175 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS41();
                        goto label151;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker5)));
                label151:
                    ;
                    goto label152;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker3)));
            label152:
                ;
                goto label156;
            }
            if ((temp180 == 1))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS123();
                goto label156;
            }
            if ((temp180 == 2))
            {
                SessionMgmtReconnectSessionScenarioTestCaseS141();
                goto label156;
            }
            if ((temp180 == 3))
            {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S90\'");
                int temp179 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker9)));
                if ((temp179 == 0))
                {
                    this.Manager.Comment("reaching state \'S100\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Alte" +
                            "rnativeSessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.AlternativeSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S103\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S104\'");
                    int temp177 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker8)));
                    if ((temp177 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS105();
                        goto label153;
                    }
                    if ((temp177 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS13();
                        goto label153;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker8)));
                label153:
                    ;
                    goto label155;
                }
                if ((temp179 == 1))
                {
                    this.Manager.Comment("reaching state \'S91\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S92\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S93\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S94\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S95\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,ZeroSessionId,Zero" +
                            "SessionId,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S96\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S97\'");
                    int temp178 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker11)));
                    if ((temp178 == 0))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS98();
                        goto label154;
                    }
                    if ((temp178 == 1))
                    {
                        SessionMgmtReconnectSessionScenarioTestCaseS99();
                        goto label154;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker11)));
                label154:
                    ;
                    goto label155;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtReconnectSessionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker9)));
            label155:
                ;
                goto label156;
            }
            throw new InvalidOperationException("never reached");
        label156:
            ;
            this.Manager.EndTest();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S110");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S115");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MU" +
                        "ST set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonym" +
                        "ous is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. " +
                        "If the PreviousSessionId field of the request is not equal to zero, the server M" +
                        "UST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to " +
                        "zero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTa" +
                        "ble, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessi" +
                        "on is found with Session.SessionId equal to PreviousSessionId, the server MUST d" +
                        "etermine if the old session and the newly established session are created by the" +
                        " same user by comparing the user identifiers obtained from the Session.SecurityC" +
                        "ontext on the new and old session.\", \"[TestInfo] There is a session with Session" +
                        ".SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId " +
                        "and SessionId values in the SMB2 header of the request are equal, the server SHO" +
                        "ULD<230> ignore PreviousSessionId and no other processing is required.\", \"[TestI" +
                        "nfo] PreviousSessionId is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUS" +
                        "T be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S115");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S110");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S110");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S122");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S122");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MU" +
                        "ST set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonym" +
                        "ous is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. " +
                        "If the PreviousSessionId field of the request is not equal to zero, the server M" +
                        "UST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to " +
                        "zero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTa" +
                        "ble, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessi" +
                        "on is found with Session.SessionId equal to PreviousSessionId, the server MUST d" +
                        "etermine if the old session and the newly established session are created by the" +
                        " same user by comparing the user identifiers obtained from the Session.SecurityC" +
                        "ontext on the new and old session.\", \"[TestInfo] There is a session with Session" +
                        ".SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId " +
                        "and SessionId values in the SMB2 header of the request are equal, the server SHO" +
                        "ULD<230> ignore PreviousSessionId and no other processing is required.\", \"[TestI" +
                        "nfo] PreviousSessionId is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUS" +
                        "T be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S122");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S122");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S90");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S104");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 head" +
                        "er of the request is zero, the server MUST process the authentication request as" +
                        " specified in section 3.3.5.5.1.\", \"[TestInfo] The SessionId of the SessionSetup" +
                        " Request is zero\", \"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for " +
                        "this request. \", \"[MS-SMB2] The other values MUST be initialized as follows:\", \"" +
                        "[MS-SMB2] Session.State is set to InProgress.\", \"[MS-SMB2] The session MUST be i" +
                        "nserted into the GlobalSessionTable and a unique Session.SessionId is assigned t" +
                        "o serve as a lookup key in the table. \", \"[MS-SMB2] The session MUST be inserted" +
                        " into Connection.SessionTable. \", \"[MS-SMB2] Using this session, authentication " +
                        "is continued as specified in section 3.3.5.5.3.\", \"[MS-SMB2] 3.3.5.5.3: 1. The s" +
                        "tatus code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. \", " +
                        "\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serv" +
                        "er MUST insert the Session into Connection.SessionTable. \", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb30\", \"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUS" +
                        "T set Connection.ConstrainedConnection to FALSE.\", \"[TestInfo] Session.IsAnonymo" +
                        "us is FALSE, so set Connection.ConstrainedConnection to FALSE\", \"[MS-SMB2] 12. I" +
                        "f the PreviousSessionId field of the request is not equal to zero, the server MU" +
                        "ST take the following actions:\", \"[TestInfo] PreviousSessionId is not equal to z" +
                        "ero.\", \"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTab" +
                        "le, where Session.SessionId matches PreviousSessionId. \", \"[MS-SMB2] If a sessio" +
                        "n is found with Session.SessionId equal to PreviousSessionId, the server MUST de" +
                        "termine if the old session and the newly established session are created by the " +
                        "same user by comparing the user identifiers obtained from the Session.SecurityCo" +
                        "ntext on the new and old session.\", \"[TestInfo] There is a session with Session." +
                        "SessionId equal to PreviousSessionId.\", \"[MS-SMB2] 1. If the PreviousSessionId a" +
                        "nd SessionId values in the SMB2 header of the request are equal, the server SHOU" +
                        "LD<230> ignore PreviousSessionId and no other processing is required.\", \"[TestIn" +
                        "fo] PreviousSessionId is equal to SessionId.\", \"[MS-SMB2] 13. Session.State MUST" +
                        " be set to Valid.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 12. If the PreviousSessionId field of the request is not equal to zero" +
                    ", the server MUST take the following actions:\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is not equal to zero.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. The server MUST look up the old session in GlobalSessionTable, wher" +
                    "e Session.SessionId matches PreviousSessionId. \"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If a session is found with Session.SessionId equal to PreviousSessionId, the server MUST determine if the old session and the newly established session are created by the same user by comparing the user identifiers obtained from the Session.SecurityContext on the new and old session.""");
            this.Manager.Checkpoint("\"[TestInfo] There is a session with Session.SessionId equal to PreviousSessionId." +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 1. If the PreviousSessionId and SessionId values in the SMB2 header of" +
                    " the request are equal, the server SHOULD<230> ignore PreviousSessionId and no o" +
                    "ther processing is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] PreviousSessionId is equal to SessionId.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S104");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S104");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S90");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,AlternativeConnection,c1" +
                    ")\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S97");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S97");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }

        private void SessionMgmtReconnectSessionScenarioTestCaseS84SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c)
        {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,Alterna" +
                    "tiveConnection,c1)\'");
            try
            {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S97");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S97");
            }
            catch (TransactionFailedException)
            {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
    }
}
