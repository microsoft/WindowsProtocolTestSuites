// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BreakReadLeaseV2TestCase : PtfTestClassBase {
        
        public BreakReadLeaseV2TestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void OnLeaseBreakNotificationDelegate1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig).MakeByRefType());
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo OnLeaseBreakNotificationInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "OnLeaseBreakNotification");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter ILeasingAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c1;
        
        private IVariable<int> leaseFlags;
        
        private IVariable<int> leaseState;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<int> v3;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v4;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILeasingAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(OnLeaseBreakNotificationInfo, this.ILeasingAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c1");
            this.leaseFlags = this.Manager.CreateVariable<int>("leaseFlags");
            this.leaseState = this.Manager.CreateVariable<int>("leaseState");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
            this.v4 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v4");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS0() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp6 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS0ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS0ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS0ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS0ReadConfigChecker3)));
            if ((temp6 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S18\'");
                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker2)));
                if ((temp3 == 0)) {
                    BreakReadLeaseV2TestCaseS19();
                    goto label0;
                }
                if ((temp3 == 1)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label0;
                }
                if ((temp3 == 2)) {
                    this.Manager.Comment("reaching state \'S26\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp2;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp2);
                    this.Manager.Comment("reaching state \'S27\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp2, "c of FileOperationToBreakLeaseRequest, state S27");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS21();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker2)));
            label0:
;
                goto label2;
            }
            if ((temp6 == 1)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker4)));
                if ((temp5 == 0)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label1;
                }
                if ((temp5 == 1)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp4;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp4);
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp4, "c of FileOperationToBreakLeaseRequest, state S8");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS9();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS0CreateResponseChecker4)));
            label1:
;
                goto label2;
            }
            if ((temp6 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label2;
            }
            if ((temp6 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp1;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                    "mb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp1);
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp1, "c of FileOperationToBreakLeaseRequest, state S20");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                        "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                        "processing one of the following operations, the underlying object store MUST req" +
                        "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                        "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                        " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                        " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                        "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                        "to No caching.\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
            BreakReadLeaseV2TestCaseS21();
        }
        
        private void BreakReadLeaseV2TestCaseS21() {
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV2TestCaseS0OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S24\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV2TestCaseS0OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadLeaseV2TestCaseS0OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV2TestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
        }
        
        private void BreakReadLeaseV2TestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
        }
        
        private void BreakReadLeaseV2TestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS9() {
            this.Manager.Comment("reaching state \'S9\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S12\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S9");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S9");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV2TestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS28() {
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S28\'.");
        }
        
        private void BreakReadLeaseV2TestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV2TestCaseS29() {
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S29\'.");
        }
        #endregion
        
        #region Test Starting in S101
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS101() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS101");
            this.Manager.Comment("reaching state \'S101\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp7;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp7);
            this.Manager.AddReturn(ReadConfigInfo, null, temp7);
            this.Manager.Comment("reaching state \'S102\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS101ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS101ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS101ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS101ReadConfigChecker3)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S107\'");
                int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker2)));
                if ((temp9 == 0)) {
                    BreakReadLeaseV2TestCaseS108();
                    goto label3;
                }
                if ((temp9 == 1)) {
                    BreakReadLeaseV2TestCaseS108();
                    goto label3;
                }
                if ((temp9 == 2)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker2)));
            label3:
;
                goto label5;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S114\'");
                int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker5)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S115\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp10;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp10);
                    this.Manager.Comment("reaching state \'S116\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp10, "c of FileOperationToBreakLeaseRequest, state S116");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS9();
                    goto label4;
                }
                if ((temp12 == 1)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label4;
                }
                if ((temp12 == 2)) {
                    BreakReadLeaseV2TestCaseS65();
                    goto label4;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS101CreateResponseChecker5)));
            label4:
;
                goto label5;
            }
            if ((temp13 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label5;
            }
            if ((temp13 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS101ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S102");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS101CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S107");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS108() {
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp8;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                    "mb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp8);
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp8, "c of FileOperationToBreakLeaseRequest, state S109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                        "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                        "processing one of the following operations, the underlying object store MUST req" +
                        "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                        "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                        " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                        " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                        "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                        "to No caching.\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
            BreakReadLeaseV2TestCaseS40();
        }
        
        private void BreakReadLeaseV2TestCaseS40() {
            this.Manager.Comment("reaching state \'S40\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV2TestCaseS101OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S43\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV2TestCaseS101OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadLeaseV2TestCaseS101OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S40");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S40");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV2TestCaseS101CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S107");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS101CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void BreakReadLeaseV2TestCaseS101ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S102");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS101CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS101CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS101CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S114");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS65() {
            this.Manager.Comment("reaching state \'S65\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp11;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                    "mb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp11);
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp11, "c of FileOperationToBreakLeaseRequest, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                        "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                        "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                        " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                        " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                        "byte-range locks on an object. Before processing one of the following operations" +
                        ", the underlying object store MUST request that the server revoke WRITE caching," +
                        " and the object store MUST wait for acknowledgment from the server before procee" +
                        "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                        "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                        "processing one of the following operations, the underlying object store MUST req" +
                        "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                        "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                        " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                        " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                        "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                        "to No caching.\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
            BreakReadLeaseV2TestCaseS9();
        }
        
        private void BreakReadLeaseV2TestCaseS101ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S102");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS101ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S102");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S117
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS117() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS117");
            this.Manager.Comment("reaching state \'S117\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp14);
            this.Manager.AddReturn(ReadConfigInfo, null, temp14);
            this.Manager.Comment("reaching state \'S118\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS117ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS117ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS117ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS117ReadConfigChecker3)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S123\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker1)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S124\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp15;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp15);
                    this.Manager.Comment("reaching state \'S125\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp15, "c of FileOperationToBreakLeaseRequest, state S125");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS40();
                    goto label6;
                }
                if ((temp16 == 1)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label6;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker1)));
            label6:
;
                goto label8;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S130\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker3)));
                if ((temp18 == 0)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label7;
                }
                if ((temp18 == 1)) {
                    this.Manager.Comment("reaching state \'S131\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp17;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp17);
                    this.Manager.Comment("reaching state \'S132\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp17, "c of FileOperationToBreakLeaseRequest, state S132");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS9();
                    goto label7;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS117CreateResponseChecker3)));
            label7:
;
                goto label8;
            }
            if ((temp19 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label8;
            }
            if ((temp19 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS117ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S118");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS117CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS117CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS117ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S118");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS117CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS117CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S130");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S130");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS117ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S118");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS117ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S118");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S133
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS133() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS133");
            this.Manager.Comment("reaching state \'S133\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp20);
            this.Manager.AddReturn(ReadConfigInfo, null, temp20);
            this.Manager.Comment("reaching state \'S134\'");
            int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS133ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS133ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS133ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS133ReadConfigChecker3)));
            if ((temp24 == 0)) {
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S139\'");
                int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker2)));
                if ((temp21 == 0)) {
                    BreakReadLeaseV2TestCaseS108();
                    goto label9;
                }
                if ((temp21 == 1)) {
                    BreakReadLeaseV2TestCaseS108();
                    goto label9;
                }
                if ((temp21 == 2)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker2)));
            label9:
;
                goto label11;
            }
            if ((temp24 == 1)) {
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S144\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker5)));
                if ((temp23 == 0)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label10;
                }
                if ((temp23 == 1)) {
                    this.Manager.Comment("reaching state \'S145\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp22;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp22);
                    this.Manager.Comment("reaching state \'S146\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp22, "c of FileOperationToBreakLeaseRequest, state S146");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS9();
                    goto label10;
                }
                if ((temp23 == 2)) {
                    BreakReadLeaseV2TestCaseS65();
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS133CreateResponseChecker5)));
            label10:
;
                goto label11;
            }
            if ((temp24 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label11;
            }
            if ((temp24 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS133ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S134");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS133CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S139");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS133CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S139");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS133CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S139");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS133ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S134");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS133CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S144");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S144");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S144");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS133CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S144");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS133CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S144");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS133ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S134");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS133ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S134");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S147
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS147() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS147");
            this.Manager.Comment("reaching state \'S147\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp25;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp25);
            this.Manager.AddReturn(ReadConfigInfo, null, temp25);
            this.Manager.Comment("reaching state \'S148\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS147ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS147ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS147ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS147ReadConfigChecker3)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S153\'");
                int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker1)));
                if ((temp27 == 0)) {
                    this.Manager.Comment("reaching state \'S154\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp26;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp26);
                    this.Manager.Comment("reaching state \'S155\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp26, "c of FileOperationToBreakLeaseRequest, state S155");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS21();
                    goto label12;
                }
                if ((temp27 == 1)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label12;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker1)));
            label12:
;
                goto label14;
            }
            if ((temp29 == 1)) {
                BreakReadLeaseV2TestCaseS156();
                goto label14;
            }
            if ((temp29 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label14;
            }
            if ((temp29 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS147ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S148");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS147CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S153");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS147CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS147ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S148");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS156() {
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                    "NONE,EmptyParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S160\'");
            int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker3)));
            if ((temp28 == 0)) {
                BreakReadLeaseV2TestCaseS13();
                goto label13;
            }
            if ((temp28 == 1)) {
                this.Manager.Comment("reaching state \'S161\'");
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS147CreateResponseChecker3)));
        label13:
;
        }
        
        private void BreakReadLeaseV2TestCaseS147CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS147CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS147ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S148");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS147ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S148");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS162() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS162");
            this.Manager.Comment("reaching state \'S162\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp30);
            this.Manager.AddReturn(ReadConfigInfo, null, temp30);
            this.Manager.Comment("reaching state \'S163\'");
            int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS162ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS162ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS162ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS162ReadConfigChecker3)));
            if ((temp32 == 0)) {
                BreakReadLeaseV2TestCaseS156();
                goto label16;
            }
            if ((temp32 == 1)) {
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S168\'");
                int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS162CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS162CreateResponseChecker1)));
                if ((temp31 == 0)) {
                    BreakReadLeaseV2TestCaseS19();
                    goto label15;
                }
                if ((temp31 == 1)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label15;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS162CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS162CreateResponseChecker1)));
            label15:
;
                goto label16;
            }
            if ((temp32 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label16;
            }
            if ((temp32 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS162ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S163");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS162ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S163");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS162CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS162CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS162ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S163");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS162ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S163");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S169
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS169() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS169");
            this.Manager.Comment("reaching state \'S169\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp33;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp33);
            this.Manager.AddReturn(ReadConfigInfo, null, temp33);
            this.Manager.Comment("reaching state \'S170\'");
            int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS169ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS169ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS169ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS169ReadConfigChecker3)));
            if ((temp36 == 0)) {
                BreakReadLeaseV2TestCaseS156();
                goto label18;
            }
            if ((temp36 == 1)) {
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S175\'");
                int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS169CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS169CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS169CreateResponseChecker2)));
                if ((temp35 == 0)) {
                    this.Manager.Comment("reaching state \'S176\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp34;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp34);
                    this.Manager.Comment("reaching state \'S177\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp34, "c of FileOperationToBreakLeaseRequest, state S177");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS21();
                    goto label17;
                }
                if ((temp35 == 1)) {
                    BreakReadLeaseV2TestCaseS19();
                    goto label17;
                }
                if ((temp35 == 2)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS169CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS169CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS169CreateResponseChecker2)));
            label17:
;
                goto label18;
            }
            if ((temp36 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label18;
            }
            if ((temp36 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS169ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S170");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS169ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S170");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS169CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S175");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS169CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S175");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS169CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S175");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S175");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS169ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S170");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS169ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S170");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS178() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS178");
            this.Manager.Comment("reaching state \'S178\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp37;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp37);
            this.Manager.AddReturn(ReadConfigInfo, null, temp37);
            this.Manager.Comment("reaching state \'S179\'");
            int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS178ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS178ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS178ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS178ReadConfigChecker3)));
            if ((temp40 == 0)) {
                BreakReadLeaseV2TestCaseS156();
                goto label20;
            }
            if ((temp40 == 1)) {
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S184\'");
                int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS178CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS178CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS178CreateResponseChecker2)));
                if ((temp39 == 0)) {
                    this.Manager.Comment("reaching state \'S185\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp38;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp38);
                    this.Manager.Comment("reaching state \'S186\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp38, "c of FileOperationToBreakLeaseRequest, state S186");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS21();
                    goto label19;
                }
                if ((temp39 == 1)) {
                    BreakReadLeaseV2TestCaseS19();
                    goto label19;
                }
                if ((temp39 == 2)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label19;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS178CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS178CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS178CreateResponseChecker2)));
            label19:
;
                goto label20;
            }
            if ((temp40 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label20;
            }
            if ((temp40 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS178ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S179");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS178ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S179");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS178CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S184");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S184");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS178CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S184");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S184");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS178CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S184");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S184");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S184");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS178ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S179");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS178ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S179");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S187
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS187() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS187");
            this.Manager.Comment("reaching state \'S187\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp41;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp41);
            this.Manager.AddReturn(ReadConfigInfo, null, temp41);
            this.Manager.Comment("reaching state \'S188\'");
            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS187ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS187ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS187ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS187ReadConfigChecker3)));
            if ((temp44 == 0)) {
                BreakReadLeaseV2TestCaseS156();
                goto label22;
            }
            if ((temp44 == 1)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S193\'");
                int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS187CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS187CreateResponseChecker1)));
                if ((temp43 == 0)) {
                    this.Manager.Comment("reaching state \'S194\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp42;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp42);
                    this.Manager.Comment("reaching state \'S195\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp42, "c of FileOperationToBreakLeaseRequest, state S195");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS21();
                    goto label21;
                }
                if ((temp43 == 1)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label21;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS187CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS187CreateResponseChecker1)));
            label21:
;
                goto label22;
            }
            if ((temp44 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label22;
            }
            if ((temp44 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS187ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S188");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS187ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S188");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS187CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S193");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S193");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S193");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S193");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS187CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S193");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S193");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S193");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S193");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS187ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S188");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS187ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S188");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS196() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS196");
            this.Manager.Comment("reaching state \'S196\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp45;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp45);
            this.Manager.AddReturn(ReadConfigInfo, null, temp45);
            this.Manager.Comment("reaching state \'S197\'");
            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS196ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS196ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS196ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS196ReadConfigChecker3)));
            if ((temp48 == 0)) {
                BreakReadLeaseV2TestCaseS156();
                goto label24;
            }
            if ((temp48 == 1)) {
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S202\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS196CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS196CreateResponseChecker1)));
                if ((temp47 == 0)) {
                    this.Manager.Comment("reaching state \'S203\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp46;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp46);
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp46, "c of FileOperationToBreakLeaseRequest, state S204");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS21();
                    goto label23;
                }
                if ((temp47 == 1)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label23;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS196CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS196CreateResponseChecker1)));
            label23:
;
                goto label24;
            }
            if ((temp48 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label24;
            }
            if ((temp48 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS196ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S197");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS196ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S197");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS196CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S202");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S202");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S202");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS196CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S202");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S202");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S202");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS196ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S197");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS196ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S197");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S205
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS205() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS205");
            this.Manager.Comment("reaching state \'S205\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp49);
            this.Manager.AddReturn(ReadConfigInfo, null, temp49);
            this.Manager.Comment("reaching state \'S206\'");
            int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS205ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS205ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS205ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS205ReadConfigChecker3)));
            if ((temp52 == 0)) {
                BreakReadLeaseV2TestCaseS156();
                goto label26;
            }
            if ((temp52 == 1)) {
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S211\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS205CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS205CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS205CreateResponseChecker2)));
                if ((temp51 == 0)) {
                    BreakReadLeaseV2TestCaseS19();
                    goto label25;
                }
                if ((temp51 == 1)) {
                    this.Manager.Comment("reaching state \'S212\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp50;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp50);
                    this.Manager.Comment("reaching state \'S213\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp50, "c of FileOperationToBreakLeaseRequest, state S213");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS21();
                    goto label25;
                }
                if ((temp51 == 2)) {
                    BreakReadLeaseV2TestCaseS25();
                    goto label25;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS205CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS205CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS205CreateResponseChecker2)));
            label25:
;
                goto label26;
            }
            if ((temp52 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label26;
            }
            if ((temp52 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS205ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS205ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS205CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S211");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS205CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S211");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS205CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S211");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S211");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S211");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS205ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S206");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS205ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS214() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS214");
            this.Manager.Comment("reaching state \'S214\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp53;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp53);
            this.Manager.AddReturn(ReadConfigInfo, null, temp53);
            this.Manager.Comment("reaching state \'S215\'");
            int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS214ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS214ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS214ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS214ReadConfigChecker3)));
            if ((temp56 == 0)) {
                BreakReadLeaseV2TestCaseS156();
                goto label28;
            }
            if ((temp56 == 1)) {
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S220\'");
                int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS214CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS214CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS214CreateResponseChecker2)));
                if ((temp55 == 0)) {
                    BreakReadLeaseV2TestCaseS108();
                    goto label27;
                }
                if ((temp55 == 1)) {
                    this.Manager.Comment("reaching state \'S221\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp54;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp54);
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp54, "c of FileOperationToBreakLeaseRequest, state S222");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS40();
                    goto label27;
                }
                if ((temp55 == 2)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label27;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS214CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS214CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS214CreateResponseChecker2)));
            label27:
;
                goto label28;
            }
            if ((temp56 == 2)) {
                BreakReadLeaseV2TestCaseS28();
                goto label28;
            }
            if ((temp56 == 3)) {
                BreakReadLeaseV2TestCaseS29();
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS214ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S215");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS214ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S215");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS214CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS214CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS214CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS214ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S215");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS214ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S215");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS30() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp57;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp57);
            this.Manager.AddReturn(ReadConfigInfo, null, temp57);
            this.Manager.Comment("reaching state \'S31\'");
            int temp62 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS30ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS30ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS30ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS30ReadConfigChecker3)));
            if ((temp62 == 0)) {
                BreakReadLeaseV2TestCaseS28();
                goto label31;
            }
            if ((temp62 == 1)) {
                BreakReadLeaseV2TestCaseS29();
                goto label31;
            }
            if ((temp62 == 2)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S36\'");
                int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker1)));
                if ((temp59 == 0)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label29;
                }
                if ((temp59 == 1)) {
                    this.Manager.Comment("reaching state \'S38\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp58;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp58);
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp58, "c of FileOperationToBreakLeaseRequest, state S39");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS40();
                    goto label29;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker1)));
            label29:
;
                goto label31;
            }
            if ((temp62 == 3)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S48\'");
                int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker3)));
                if ((temp61 == 0)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label30;
                }
                if ((temp61 == 1)) {
                    this.Manager.Comment("reaching state \'S49\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp60;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp60);
                    this.Manager.Comment("reaching state \'S50\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp60, "c of FileOperationToBreakLeaseRequest, state S50");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS9();
                    goto label30;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS30CreateResponseChecker3)));
            label30:
;
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS30ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S31");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS30ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S31");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV2TestCaseS30ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S31");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS30CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S36");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS30CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S36");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S36");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS30ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S31");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS30CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S48");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S48");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S48");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S48");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS30CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S48");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S48");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S48");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S48");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S51
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS51() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS51");
            this.Manager.Comment("reaching state \'S51\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp63;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp63);
            this.Manager.AddReturn(ReadConfigInfo, null, temp63);
            this.Manager.Comment("reaching state \'S52\'");
            int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS51ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS51ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS51ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS51ReadConfigChecker3)));
            if ((temp67 == 0)) {
                BreakReadLeaseV2TestCaseS28();
                goto label34;
            }
            if ((temp67 == 1)) {
                BreakReadLeaseV2TestCaseS29();
                goto label34;
            }
            if ((temp67 == 2)) {
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S57\'");
                int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker1)));
                if ((temp65 == 0)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label32;
                }
                if ((temp65 == 1)) {
                    this.Manager.Comment("reaching state \'S58\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp64;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp64);
                    this.Manager.Comment("reaching state \'S59\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp64, "c of FileOperationToBreakLeaseRequest, state S59");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS40();
                    goto label32;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker1)));
            label32:
;
                goto label34;
            }
            if ((temp67 == 3)) {
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S64\'");
                int temp66 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker3)));
                if ((temp66 == 0)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label33;
                }
                if ((temp66 == 1)) {
                    BreakReadLeaseV2TestCaseS65();
                    goto label33;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS51CreateResponseChecker3)));
            label33:
;
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS51ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S52");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS51ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S52");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV2TestCaseS51ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S52");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS51CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S57");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS51CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S57");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S57");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS51ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S52");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS51CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS51CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S67
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS67() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS67");
            this.Manager.Comment("reaching state \'S67\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp68;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp68);
            this.Manager.AddReturn(ReadConfigInfo, null, temp68);
            this.Manager.Comment("reaching state \'S68\'");
            int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS67ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS67ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS67ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS67ReadConfigChecker3)));
            if ((temp73 == 0)) {
                BreakReadLeaseV2TestCaseS28();
                goto label37;
            }
            if ((temp73 == 1)) {
                BreakReadLeaseV2TestCaseS29();
                goto label37;
            }
            if ((temp73 == 2)) {
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S73\'");
                int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker1)));
                if ((temp70 == 0)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label35;
                }
                if ((temp70 == 1)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp69;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp69);
                    this.Manager.Comment("reaching state \'S75\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp69, "c of FileOperationToBreakLeaseRequest, state S75");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS40();
                    goto label35;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker1)));
            label35:
;
                goto label37;
            }
            if ((temp73 == 3)) {
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S77\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S80\'");
                int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker4)));
                if ((temp72 == 0)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label36;
                }
                if ((temp72 == 1)) {
                    BreakReadLeaseV2TestCaseS65();
                    goto label36;
                }
                if ((temp72 == 2)) {
                    this.Manager.Comment("reaching state \'S81\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp71;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp71);
                    this.Manager.Comment("reaching state \'S82\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp71, "c of FileOperationToBreakLeaseRequest, state S82");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS9();
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS67CreateResponseChecker4)));
            label36:
;
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS67ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S68");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS67ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S68");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV2TestCaseS67ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S68");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS67CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S73");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S73");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S73");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS67CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S73");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S73");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS67ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S68");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS67CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S80");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S80");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S80");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS67CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S80");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS67CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S80");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S83
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadLeaseV2TestCaseS83() {
            this.Manager.BeginTest("BreakReadLeaseV2TestCaseS83");
            this.Manager.Comment("reaching state \'S83\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp74;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp74);
            this.Manager.AddReturn(ReadConfigInfo, null, temp74);
            this.Manager.Comment("reaching state \'S84\'");
            int temp80 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS83ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS83ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS83ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV2TestCaseS83ReadConfigChecker3)));
            if ((temp80 == 0)) {
                BreakReadLeaseV2TestCaseS28();
                goto label40;
            }
            if ((temp80 == 1)) {
                BreakReadLeaseV2TestCaseS29();
                goto label40;
            }
            if ((temp80 == 2)) {
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S89\'");
                int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker2)));
                if ((temp77 == 0)) {
                    BreakReadLeaseV2TestCaseS37();
                    goto label38;
                }
                if ((temp77 == 1)) {
                    this.Manager.Comment("reaching state \'S90\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp75;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp75);
                    this.Manager.Comment("reaching state \'S91\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp75, "c of FileOperationToBreakLeaseRequest, state S91");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS40();
                    goto label38;
                }
                if ((temp77 == 2)) {
                    this.Manager.Comment("reaching state \'S92\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp76;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp76);
                    this.Manager.Comment("reaching state \'S93\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp76, "c of FileOperationToBreakLeaseRequest, state S93");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS40();
                    goto label38;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker2)));
            label38:
;
                goto label40;
            }
            if ((temp80 == 3)) {
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S98\'");
                int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker5)));
                if ((temp79 == 0)) {
                    BreakReadLeaseV2TestCaseS13();
                    goto label39;
                }
                if ((temp79 == 1)) {
                    BreakReadLeaseV2TestCaseS65();
                    goto label39;
                }
                if ((temp79 == 2)) {
                    this.Manager.Comment("reaching state \'S99\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp78;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp78);
                    this.Manager.Comment("reaching state \'S100\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp78, "c of FileOperationToBreakLeaseRequest, state S100");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV2TestCaseS9();
                    goto label39;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV2TestCaseS83CreateResponseChecker5)));
            label39:
;
                goto label40;
            }
            throw new InvalidOperationException("never reached");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV2TestCaseS83ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S84");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS83ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S84");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV2TestCaseS83ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S84");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV2TestCaseS83CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS83CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S89");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS83CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S89");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS83ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S84");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV2TestCaseS83CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S98");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S98");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S98");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S98");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS83CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S98");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S98");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV2TestCaseS83CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S98");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S98");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S98");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
    }
}
