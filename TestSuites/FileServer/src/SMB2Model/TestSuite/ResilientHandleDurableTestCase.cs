// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ResilientHandleDurableTestCase : PtfTestClassBase {
        
        public ResilientHandleDurableTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config);
        
        public delegate void IoCtlResiliencyResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c);
        
        public delegate void PreConstraintDelegate1();
        
        public delegate void ReEstablishResilientOpenResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IResilientHandleAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig).MakeByRefType());
        
        static System.Reflection.EventInfo IoCtlResiliencyResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IResilientHandleAdapter), "IoCtlResiliencyResponse");
        
        static System.Reflection.EventInfo ReEstablishResilientOpenResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IResilientHandleAdapter), "ReEstablishResilientOpenResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IResilientHandleAdapter IResilientHandleAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig> c1;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig> v;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig> v1;
        
        private IVariable<int> v2;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IResilientHandleAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IResilientHandleAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IResilientHandleAdapter))));
            this.Manager.Subscribe(IoCtlResiliencyResponseInfo, this.IResilientHandleAdapterInstance);
            this.Manager.Subscribe(ReEstablishResilientOpenResponseInfo, this.IResilientHandleAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>("c1");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>("v");
            this.v1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS0() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS0ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS0ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS0ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS0ReadConfigChecker3)));
            if ((temp18 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S120\'");
                int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker4)));
                if ((temp6 == 0)) {
                    ResilientHandleDurableTestCaseS121();
                    goto label5;
                }
                if ((temp6 == 1)) {
                    ResilientHandleDurableTestCaseS134();
                    goto label5;
                }
                if ((temp6 == 2)) {
                    ResilientHandleDurableTestCaseS147();
                    goto label5;
                }
                if ((temp6 == 3)) {
                    ResilientHandleDurableTestCaseS160();
                    goto label5;
                }
                if ((temp6 == 4)) {
                    this.Manager.Comment("reaching state \'S173\'");
                    int temp5 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
                    if ((temp5 == 0)) {
                        this.Manager.Comment("reaching state \'S174\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S175\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S176\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S177\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S178\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker8))) != -1)) {
                            this.Manager.Comment("reaching state \'S179\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker8)));
                        }
                        goto label4;
                    }
                    if ((temp5 == 1)) {
                        ResilientHandleDurableTestCaseS180();
                        goto label4;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S173\'.");
                label4:
;
                    goto label5;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker4)));
            label5:
;
                goto label17;
            }
            if ((temp18 == 1)) {
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S190\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker5))) != -1)) {
                    ResilientHandleDurableTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker5)));
                }
                goto label17;
            }
            if ((temp18 == 2)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker8)));
                if ((temp11 == 0)) {
                    ResilientHandleDurableTestCaseS20();
                    goto label10;
                }
                if ((temp11 == 1)) {
                    ResilientHandleDurableTestCaseS33();
                    goto label10;
                }
                if ((temp11 == 2)) {
                    ResilientHandleDurableTestCaseS7();
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker8)));
            label10:
;
                goto label17;
            }
            if ((temp18 == 3)) {
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S50\'");
                int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker9)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker10)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker11)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker12)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker13)));
                if ((temp17 == 0)) {
                    this.Manager.Comment("reaching state \'S103\'");
                    int temp12 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
                    if ((temp12 == 0)) {
                        this.Manager.Comment("reaching state \'S104\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S105\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S106\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S107\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S108\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker18))) != -1)) {
                            this.Manager.Comment("reaching state \'S109\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker18)));
                        }
                        goto label11;
                    }
                    if ((temp12 == 1)) {
                        ResilientHandleDurableTestCaseS110();
                        goto label11;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S103\'.");
                label11:
;
                    goto label16;
                }
                if ((temp17 == 1)) {
                    ResilientHandleDurableTestCaseS51();
                    goto label16;
                }
                if ((temp17 == 2)) {
                    ResilientHandleDurableTestCaseS64();
                    goto label16;
                }
                if ((temp17 == 3)) {
                    this.Manager.Comment("reaching state \'S77\'");
                    int temp15 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)));
                    if ((temp15 == 0)) {
                        this.Manager.Comment("reaching state \'S78\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S79\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S80\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S81\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S82\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker24))) != -1)) {
                            this.Manager.Comment("reaching state \'S83\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker24)));
                        }
                        goto label14;
                    }
                    if ((temp15 == 1)) {
                        ResilientHandleDurableTestCaseS84();
                        goto label14;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S77\'.");
                label14:
;
                    goto label16;
                }
                if ((temp17 == 4)) {
                    this.Manager.Comment("reaching state \'S90\'");
                    int temp16 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
                    if ((temp16 == 0)) {
                        this.Manager.Comment("reaching state \'S91\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S92\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S93\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S94\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S95\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker26))) != -1)) {
                            this.Manager.Comment("reaching state \'S96\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker26)));
                        }
                        goto label15;
                    }
                    if ((temp16 == 1)) {
                        this.Manager.Comment("reaching state \'S97\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S98\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S99\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S100\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S101\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker27))) != -1)) {
                            this.Manager.Comment("reaching state \'S102\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker27)));
                        }
                        goto label15;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S90\'.");
                label15:
;
                    goto label16;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker9)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker10)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker11)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker12)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker13)));
            label16:
;
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS121() {
            this.Manager.Comment("reaching state \'S121\'");
            int temp1 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)));
            if ((temp1 == 0)) {
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S126\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS127();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker)));
                }
                goto label0;
            }
            if ((temp1 == 1)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S132\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS133();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker1)));
                }
                goto label0;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S121\'.");
        label0:
;
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS127() {
            this.Manager.Comment("reaching state \'S127\'");
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS133() {
            this.Manager.Comment("reaching state \'S133\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS134() {
            this.Manager.Comment("reaching state \'S134\'");
            int temp2 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S139\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS140();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker2)));
                }
                goto label1;
            }
            if ((temp2 == 1)) {
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S145\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS146();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker3)));
                }
                goto label1;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S134\'.");
        label1:
;
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS140() {
            this.Manager.Comment("reaching state \'S140\'");
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS146() {
            this.Manager.Comment("reaching state \'S146\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS147() {
            this.Manager.Comment("reaching state \'S147\'");
            int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
            if ((temp3 == 0)) {
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S152\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker4))) != -1)) {
                    ResilientHandleDurableTestCaseS153();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker4)));
                }
                goto label2;
            }
            if ((temp3 == 1)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S158\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker5))) != -1)) {
                    ResilientHandleDurableTestCaseS159();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker5)));
                }
                goto label2;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S147\'.");
        label2:
;
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS153() {
            this.Manager.Comment("reaching state \'S153\'");
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS159() {
            this.Manager.Comment("reaching state \'S159\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS160() {
            this.Manager.Comment("reaching state \'S160\'");
            int temp4 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S165\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker6))) != -1)) {
                    ResilientHandleDurableTestCaseS166();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker6)));
                }
                goto label3;
            }
            if ((temp4 == 1)) {
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S171\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker7))) != -1)) {
                    ResilientHandleDurableTestCaseS172();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker7)));
                }
                goto label3;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S160\'.");
        label3:
;
        }
        
        private void PreConstraintChecker6() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS166() {
            this.Manager.Comment("reaching state \'S166\'");
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb21 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS172() {
            this.Manager.Comment("reaching state \'S172\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS180() {
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S182\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S184\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker9))) != -1)) {
                ResilientHandleDurableTestCaseS185();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker9)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S184");
        }
        
        private void ResilientHandleDurableTestCaseS185() {
            this.Manager.Comment("reaching state \'S185\'");
        }
        
        private void ResilientHandleDurableTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S190");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS191() {
            this.Manager.Comment("reaching state \'S191\'");
            int temp7 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S196\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker10))) != -1)) {
                    ResilientHandleDurableTestCaseS197();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker10)));
                }
                goto label6;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S202\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker11))) != -1)) {
                    ResilientHandleDurableTestCaseS203();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker11)));
                }
                goto label6;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S191\'.");
        label6:
;
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS197() {
            this.Manager.Comment("reaching state \'S197\'");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS203() {
            this.Manager.Comment("reaching state \'S203\'");
        }
        
        private void ResilientHandleDurableTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS20() {
            this.Manager.Comment("reaching state \'S20\'");
            int temp8 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)));
            if ((temp8 == 0)) {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S25\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker12))) != -1)) {
                    ResilientHandleDurableTestCaseS26();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker12)));
                }
                goto label7;
            }
            if ((temp8 == 1)) {
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S31\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker13))) != -1)) {
                    ResilientHandleDurableTestCaseS32();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker13)));
                }
                goto label7;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S20\'.");
        label7:
;
        }
        
        private void PreConstraintChecker12() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS26() {
            this.Manager.Comment("reaching state \'S26\'");
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS32() {
            this.Manager.Comment("reaching state \'S32\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS33() {
            this.Manager.Comment("reaching state \'S33\'");
            int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S38\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker14))) != -1)) {
                    ResilientHandleDurableTestCaseS39();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker14)));
                }
                goto label8;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S44\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker15))) != -1)) {
                    ResilientHandleDurableTestCaseS45();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker15)));
                }
                goto label8;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S33\'.");
        label8:
;
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S38");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS39() {
            this.Manager.Comment("reaching state \'S39\'");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S44");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS45() {
            this.Manager.Comment("reaching state \'S45\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS7() {
            this.Manager.Comment("reaching state \'S7\'");
            int temp10 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
            if ((temp10 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S18\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker16))) != -1)) {
                    ResilientHandleDurableTestCaseS19();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker16)));
                }
                goto label9;
            }
            if ((temp10 == 1)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S12\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker17))) != -1)) {
                    ResilientHandleDurableTestCaseS13();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker17)));
                }
                goto label9;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S7\'.");
        label9:
;
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
        }
        
        private void ResilientHandleDurableTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS110() {
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S114\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker19))) != -1)) {
                ResilientHandleDurableTestCaseS115();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker19)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S114");
        }
        
        private void ResilientHandleDurableTestCaseS115() {
            this.Manager.Comment("reaching state \'S115\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
            int temp13 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S56\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker20))) != -1)) {
                    ResilientHandleDurableTestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker20)));
                }
                goto label12;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S62\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker21))) != -1)) {
                    ResilientHandleDurableTestCaseS63();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker21)));
                }
                goto label12;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S51\'.");
        label12:
;
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS57() {
            this.Manager.Comment("reaching state \'S57\'");
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS63() {
            this.Manager.Comment("reaching state \'S63\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS64() {
            this.Manager.Comment("reaching state \'S64\'");
            int temp14 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S69\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker22))) != -1)) {
                    ResilientHandleDurableTestCaseS70();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker22)));
                }
                goto label13;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S75\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker23))) != -1)) {
                    ResilientHandleDurableTestCaseS76();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker23)));
                }
                goto label13;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S64\'.");
        label13:
;
        }
        
        private void PreConstraintChecker22() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS70() {
            this.Manager.Comment("reaching state \'S70\'");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        
        private void ResilientHandleDurableTestCaseS76() {
            this.Manager.Comment("reaching state \'S76\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S82");
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS84() {
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S88\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker25))) != -1)) {
                ResilientHandleDurableTestCaseS89();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker25)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S88");
        }
        
        private void ResilientHandleDurableTestCaseS89() {
            this.Manager.Comment("reaching state \'S89\'");
        }
        
        private void ResilientHandleDurableTestCaseS0IoCtlResiliencyResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S95");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS0ReEstablishResilientOpenResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S101");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
        }
        #endregion
        
        #region Test Starting in S1046
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1046() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1046");
            this.Manager.Comment("reaching state \'S1046\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp19;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp19);
            this.Manager.AddReturn(ReadConfigInfo, null, temp19);
            this.Manager.Comment("reaching state \'S1047\'");
            int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1046ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1046ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1046ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1046ReadConfigChecker3)));
            if ((temp36 == 0)) {
                this.Manager.Comment("reaching state \'S1048\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1049\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1050\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1051\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1052\'");
                int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker3)));
                if ((temp24 == 0)) {
                    this.Manager.Comment("reaching state \'S1053\'");
                    int temp20 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)));
                    if ((temp20 == 0)) {
                        this.Manager.Comment("reaching state \'S1054\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1055\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1056\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1057\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1058\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1059\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label18;
                    }
                    if ((temp20 == 1)) {
                        ResilientHandleDurableTestCaseS491();
                        goto label18;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1053\'.");
                label18:
;
                    goto label22;
                }
                if ((temp24 == 1)) {
                    ResilientHandleDurableTestCaseS763();
                    goto label22;
                }
                if ((temp24 == 2)) {
                    ResilientHandleDurableTestCaseS774();
                    goto label22;
                }
                if ((temp24 == 3)) {
                    ResilientHandleDurableTestCaseS955();
                    goto label22;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker3)));
            label22:
;
                goto label34;
            }
            if ((temp36 == 1)) {
                this.Manager.Comment("reaching state \'S1060\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1061\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1062\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1063\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1064\'");
                int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker6)));
                if ((temp28 == 0)) {
                    ResilientHandleDurableTestCaseS1065();
                    goto label26;
                }
                if ((temp28 == 1)) {
                    this.Manager.Comment("reaching state \'S1078\'");
                    int temp26 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
                    if ((temp26 == 0)) {
                        this.Manager.Comment("reaching state \'S1079\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1080\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1081\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1082\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1083\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker10))) != -1)) {
                            this.Manager.Comment("reaching state \'S1084\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker10)));
                        }
                        goto label24;
                    }
                    if ((temp26 == 1)) {
                        this.Manager.Comment("reaching state \'S1085\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1086\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1087\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1088\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1089\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker11))) != -1)) {
                            ResilientHandleDurableTestCaseS1090();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker11)));
                        }
                        goto label24;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1078\'.");
                label24:
;
                    goto label26;
                }
                if ((temp28 == 2)) {
                    ResilientHandleDurableTestCaseS972();
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker6)));
            label26:
;
                goto label34;
            }
            if ((temp36 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label34;
            }
            if ((temp36 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1046ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1047");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1058");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS491() {
            this.Manager.Comment("reaching state \'S491\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S492\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S493\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S494\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S495\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker1))) != -1)) {
                ResilientHandleDurableTestCaseS496();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S495");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS496() {
            this.Manager.Comment("reaching state \'S496\'");
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS763() {
            this.Manager.Comment("reaching state \'S763\'");
            int temp21 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
            if ((temp21 == 0)) {
                this.Manager.Comment("reaching state \'S764\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S765\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S766\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S767\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S768\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS515();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker2)));
                }
                goto label19;
            }
            if ((temp21 == 1)) {
                this.Manager.Comment("reaching state \'S769\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S770\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S771\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S772\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S773\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS509();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker3)));
                }
                goto label19;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S763\'.");
        label19:
;
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S768");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS515() {
            this.Manager.Comment("reaching state \'S515\'");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S773");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS509() {
            this.Manager.Comment("reaching state \'S509\'");
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS774() {
            this.Manager.Comment("reaching state \'S774\'");
            int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)));
            if ((temp22 == 0)) {
                this.Manager.Comment("reaching state \'S775\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S776\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S777\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S778\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S779\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker4))) != -1)) {
                    ResilientHandleDurableTestCaseS780();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker4)));
                }
                goto label20;
            }
            if ((temp22 == 1)) {
                ResilientHandleDurableTestCaseS781();
                goto label20;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S774\'.");
        label20:
;
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S779");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS780() {
            this.Manager.Comment("reaching state \'S780\'");
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS781() {
            this.Manager.Comment("reaching state \'S781\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S782\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S783\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S784\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S785\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker5))) != -1)) {
                this.Manager.Comment("reaching state \'S786\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker5)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S785");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1052");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS955() {
            this.Manager.Comment("reaching state \'S955\'");
            int temp23 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S956\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S957\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S958\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S959\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S960\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker6))) != -1)) {
                    ResilientHandleDurableTestCaseS483();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker6)));
                }
                goto label21;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S961\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S962\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S963\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S964\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S965\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker7))) != -1)) {
                    this.Manager.Comment("reaching state \'S966\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker7)));
                }
                goto label21;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S955\'.");
        label21:
;
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS483() {
            this.Manager.Comment("reaching state \'S483\'");
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S965");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1047");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1065() {
            this.Manager.Comment("reaching state \'S1065\'");
            int temp25 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S1066\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1067\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1068\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1069\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1070\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker8))) != -1)) {
                    ResilientHandleDurableTestCaseS1071();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker8)));
                }
                goto label23;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S1072\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1073\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1074\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1075\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1076\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker9))) != -1)) {
                    ResilientHandleDurableTestCaseS1077();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker9)));
                }
                goto label23;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1065\'.");
        label23:
;
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1070");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1071() {
            this.Manager.Comment("reaching state \'S1071\'");
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1076");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1077() {
            this.Manager.Comment("reaching state \'S1077\'");
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1083");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker39() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1089");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1090() {
            this.Manager.Comment("reaching state \'S1090\'");
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS972() {
            this.Manager.Comment("reaching state \'S972\'");
            int temp27 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S973\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S974\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S975\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S976\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S977\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker12))) != -1)) {
                    ResilientHandleDurableTestCaseS230();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker12)));
                }
                goto label25;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S978\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S982\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker13))) != -1)) {
                    ResilientHandleDurableTestCaseS236();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker13)));
                }
                goto label25;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S972\'.");
        label25:
;
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S977");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS230() {
            this.Manager.Comment("reaching state \'S230\'");
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS236() {
            this.Manager.Comment("reaching state \'S236\'");
        }
        
        private void ResilientHandleDurableTestCaseS1046ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1047");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS266() {
            this.Manager.Comment("reaching state \'S266\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
            this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S268\'");
            this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                    "Timeout)\'");
            this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
            this.Manager.Comment("reaching state \'S269\'");
            this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
            this.Manager.Comment("reaching state \'S270\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker7))) != -1)) {
                this.Manager.Comment("reaching state \'S271\'");
                int temp29 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
                if ((temp29 == 0)) {
                    ResilientHandleDurableTestCaseS272();
                    goto label27;
                }
                if ((temp29 == 1)) {
                    ResilientHandleDurableTestCaseS277();
                    goto label27;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S271\'.");
            label27:
;
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker7)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS272() {
            this.Manager.Comment("reaching state \'S272\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S273\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S274\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S275\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S276\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker14))) != -1)) {
                ResilientHandleDurableTestCaseS197();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker14)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S276");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS277() {
            this.Manager.Comment("reaching state \'S277\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S278\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S280\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S281\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker15))) != -1)) {
                ResilientHandleDurableTestCaseS203();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker15)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S281");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1047");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS282() {
            this.Manager.Comment("reaching state \'S282\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
            this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S284\'");
            this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                    "Timeout)\'");
            this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
            this.Manager.Comment("reaching state \'S285\'");
            this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
            this.Manager.Comment("reaching state \'S286\'");
            int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker9)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker10)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker11)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker12)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S287\'");
                int temp30 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)));
                if ((temp30 == 0)) {
                    ResilientHandleDurableTestCaseS288();
                    goto label28;
                }
                if ((temp30 == 1)) {
                    ResilientHandleDurableTestCaseS293();
                    goto label28;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S287\'.");
            label28:
;
                goto label33;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S298\'");
                int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
                if ((temp31 == 0)) {
                    ResilientHandleDurableTestCaseS299();
                    goto label29;
                }
                if ((temp31 == 1)) {
                    ResilientHandleDurableTestCaseS304();
                    goto label29;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S298\'.");
            label29:
;
                goto label33;
            }
            if ((temp35 == 2)) {
                ResilientHandleDurableTestCaseS309();
                goto label33;
            }
            if ((temp35 == 3)) {
                ResilientHandleDurableTestCaseS320();
                goto label33;
            }
            if ((temp35 == 4)) {
                ResilientHandleDurableTestCaseS331();
                goto label33;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker9)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker10)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker11)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker12)));
        label33:
;
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S286");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker44() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS288() {
            this.Manager.Comment("reaching state \'S288\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S290\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S291\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S292\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker16))) != -1)) {
                ResilientHandleDurableTestCaseS166();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker16)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S292");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb21 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS293() {
            this.Manager.Comment("reaching state \'S293\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S294\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S295\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S296\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S297\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker17))) != -1)) {
                ResilientHandleDurableTestCaseS172();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker17)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S297");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S286");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS299() {
            this.Manager.Comment("reaching state \'S299\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S300\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S302\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S303\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker18))) != -1)) {
                ResilientHandleDurableTestCaseS153();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker18)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S303");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS304() {
            this.Manager.Comment("reaching state \'S304\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S305\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S306\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S308\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker19))) != -1)) {
                ResilientHandleDurableTestCaseS159();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker19)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S308");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S286");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS309() {
            this.Manager.Comment("reaching state \'S309\'");
            int temp32 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)));
            if ((temp32 == 0)) {
                ResilientHandleDurableTestCaseS310();
                goto label30;
            }
            if ((temp32 == 1)) {
                ResilientHandleDurableTestCaseS315();
                goto label30;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S309\'.");
        label30:
;
        }
        
        private void PreConstraintChecker48() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS310() {
            this.Manager.Comment("reaching state \'S310\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S311\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S312\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S313\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S314\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker20))) != -1)) {
                ResilientHandleDurableTestCaseS140();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker20)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S314");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS315() {
            this.Manager.Comment("reaching state \'S315\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S316\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S317\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S318\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S319\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker21))) != -1)) {
                ResilientHandleDurableTestCaseS146();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker21)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S319");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S286");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS320() {
            this.Manager.Comment("reaching state \'S320\'");
            int temp33 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
            if ((temp33 == 0)) {
                ResilientHandleDurableTestCaseS321();
                goto label31;
            }
            if ((temp33 == 1)) {
                ResilientHandleDurableTestCaseS326();
                goto label31;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S320\'.");
        label31:
;
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS321() {
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S322\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S324\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S325\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker22))) != -1)) {
                ResilientHandleDurableTestCaseS127();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker22)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S325");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS326() {
            this.Manager.Comment("reaching state \'S326\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S328\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S330\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker23))) != -1)) {
                ResilientHandleDurableTestCaseS133();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker23)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S330");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1046IoCtlResiliencyResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S286");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS331() {
            this.Manager.Comment("reaching state \'S331\'");
            int temp34 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)));
            if ((temp34 == 0)) {
                ResilientHandleDurableTestCaseS180();
                goto label32;
            }
            if ((temp34 == 1)) {
                ResilientHandleDurableTestCaseS332();
                goto label32;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S331\'.");
        label32:
;
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS332() {
            this.Manager.Comment("reaching state \'S332\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S334\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S335\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S336\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker24))) != -1)) {
                ResilientHandleDurableTestCaseS337();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker24)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1046ReEstablishResilientOpenResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S336");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS337() {
            this.Manager.Comment("reaching state \'S337\'");
        }
        #endregion
        
        #region Test Starting in S1091
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1091() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1091");
            this.Manager.Comment("reaching state \'S1091\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp37;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp37);
            this.Manager.AddReturn(ReadConfigInfo, null, temp37);
            this.Manager.Comment("reaching state \'S1092\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1091ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1091ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1091ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1091ReadConfigChecker3)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S1093\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1094\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1095\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1096\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1097\'");
                int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker3)));
                if ((temp40 == 0)) {
                    this.Manager.Comment("reaching state \'S1098\'");
                    int temp38 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S1099\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1100\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1101\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1102\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1103\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1104\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label35;
                    }
                    if ((temp38 == 1)) {
                        ResilientHandleDurableTestCaseS497();
                        goto label35;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1098\'.");
                label35:
;
                    goto label37;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S1105\'");
                    int temp39 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)));
                    if ((temp39 == 0)) {
                        this.Manager.Comment("reaching state \'S1106\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1107\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1108\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1109\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1110\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS780();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label36;
                    }
                    if ((temp39 == 1)) {
                        ResilientHandleDurableTestCaseS781();
                        goto label36;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1105\'.");
                label36:
;
                    goto label37;
                }
                if ((temp40 == 2)) {
                    ResilientHandleDurableTestCaseS763();
                    goto label37;
                }
                if ((temp40 == 3)) {
                    ResilientHandleDurableTestCaseS955();
                    goto label37;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker3)));
            label37:
;
                goto label42;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S1111\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1112\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1113\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1114\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1115\'");
                int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker6)));
                if ((temp44 == 0)) {
                    this.Manager.Comment("reaching state \'S1116\'");
                    int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
                    if ((temp41 == 0)) {
                        this.Manager.Comment("reaching state \'S1117\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1118\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1119\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1120\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1121\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S1122\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label38;
                    }
                    if ((temp41 == 1)) {
                        ResilientHandleDurableTestCaseS231();
                        goto label38;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1116\'.");
                label38:
;
                    goto label41;
                }
                if ((temp44 == 1)) {
                    this.Manager.Comment("reaching state \'S1123\'");
                    int temp42 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)));
                    if ((temp42 == 0)) {
                        this.Manager.Comment("reaching state \'S1124\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1125\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1126\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1127\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1128\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S1129\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label39;
                    }
                    if ((temp42 == 1)) {
                        this.Manager.Comment("reaching state \'S1130\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1131\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1132\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1133\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1134\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker6))) != -1)) {
                            ResilientHandleDurableTestCaseS1077();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker6)));
                        }
                        goto label39;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1123\'.");
                label39:
;
                    goto label41;
                }
                if ((temp44 == 2)) {
                    this.Manager.Comment("reaching state \'S1135\'");
                    int temp43 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)));
                    if ((temp43 == 0)) {
                        this.Manager.Comment("reaching state \'S1136\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1137\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1138\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1139\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1140\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker7))) != -1)) {
                            ResilientHandleDurableTestCaseS1141();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker7)));
                        }
                        goto label40;
                    }
                    if ((temp43 == 1)) {
                        this.Manager.Comment("reaching state \'S1142\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1143\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1144\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1145\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1146\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker8))) != -1)) {
                            this.Manager.Comment("reaching state \'S1147\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker8)));
                        }
                        goto label40;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1135\'.");
                label40:
;
                    goto label41;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker6)));
            label41:
;
                goto label42;
            }
            if ((temp45 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label42;
            }
            if ((temp45 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label42;
            }
            throw new InvalidOperationException("never reached");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1091ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1092");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1097");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1097");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker55() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS497() {
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S498\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S499\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S500\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S501\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker1))) != -1)) {
                ResilientHandleDurableTestCaseS502();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S501");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS502() {
            this.Manager.Comment("reaching state \'S502\'");
        }
        
        private void ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1097");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1097");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1110");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker57() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1097");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1097");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1097");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1097");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1091ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1092");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS231() {
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S234\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S235\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker4))) != -1)) {
                ResilientHandleDurableTestCaseS236();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker4)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S235");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1128");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1134");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1091IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1140");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1141() {
            this.Manager.Comment("reaching state \'S1141\'");
        }
        
        private void PreConstraintChecker63() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1091ReEstablishResilientOpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1091ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1092");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1091ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1092");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1148() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1148");
            this.Manager.Comment("reaching state \'S1148\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp46);
            this.Manager.AddReturn(ReadConfigInfo, null, temp46);
            this.Manager.Comment("reaching state \'S1149\'");
            int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1148ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1148ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1148ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1148ReadConfigChecker3)));
            if ((temp54 == 0)) {
                this.Manager.Comment("reaching state \'S1150\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1151\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1152\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1153\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1154\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker4)));
                if ((temp51 == 0)) {
                    ResilientHandleDurableTestCaseS674();
                    goto label47;
                }
                if ((temp51 == 1)) {
                    ResilientHandleDurableTestCaseS763();
                    goto label47;
                }
                if ((temp51 == 2)) {
                    ResilientHandleDurableTestCaseS787();
                    goto label47;
                }
                if ((temp51 == 3)) {
                    ResilientHandleDurableTestCaseS843();
                    goto label47;
                }
                if ((temp51 == 4)) {
                    ResilientHandleDurableTestCaseS937();
                    goto label47;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker4)));
            label47:
;
                goto label50;
            }
            if ((temp54 == 1)) {
                this.Manager.Comment("reaching state \'S1155\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1156\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1157\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1158\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1159\'");
                int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker6)));
                if ((temp53 == 0)) {
                    ResilientHandleDurableTestCaseS1040();
                    goto label49;
                }
                if ((temp53 == 1)) {
                    ResilientHandleDurableTestCaseS972();
                    goto label49;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker6)));
            label49:
;
                goto label50;
            }
            if ((temp54 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label50;
            }
            if ((temp54 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1148ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1149");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS674() {
            this.Manager.Comment("reaching state \'S674\'");
            int temp47 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)));
            if ((temp47 == 0)) {
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S677\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S678\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S679\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS680();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker)));
                }
                goto label43;
            }
            if ((temp47 == 1)) {
                this.Manager.Comment("reaching state \'S681\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S682\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S683\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S684\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S685\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS686();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker1)));
                }
                goto label43;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S674\'.");
        label43:
;
        }
        
        private void PreConstraintChecker64() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S679");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS680() {
            this.Manager.Comment("reaching state \'S680\'");
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S685");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS686() {
            this.Manager.Comment("reaching state \'S686\'");
        }
        
        private void ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS787() {
            this.Manager.Comment("reaching state \'S787\'");
            int temp48 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
            if ((temp48 == 0)) {
                this.Manager.Comment("reaching state \'S788\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S789\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S790\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S791\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S792\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS496();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker2)));
                }
                goto label44;
            }
            if ((temp48 == 1)) {
                this.Manager.Comment("reaching state \'S793\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S794\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S795\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S796\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S797\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS502();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker3)));
                }
                goto label44;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S787\'.");
        label44:
;
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S792");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS843() {
            this.Manager.Comment("reaching state \'S843\'");
            int temp49 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S844\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S845\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S846\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S847\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S848\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker4))) != -1)) {
                    ResilientHandleDurableTestCaseS849();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker4)));
                }
                goto label45;
            }
            if ((temp49 == 1)) {
                this.Manager.Comment("reaching state \'S850\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S851\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S852\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S853\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S854\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker5))) != -1)) {
                    ResilientHandleDurableTestCaseS660();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker5)));
                }
                goto label45;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S843\'.");
        label45:
;
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S848");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS849() {
            this.Manager.Comment("reaching state \'S849\'");
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S854");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS660() {
            this.Manager.Comment("reaching state \'S660\'");
        }
        
        private void ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS937() {
            this.Manager.Comment("reaching state \'S937\'");
            int temp50 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
            if ((temp50 == 0)) {
                this.Manager.Comment("reaching state \'S938\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S940\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S941\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S942\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker6))) != -1)) {
                    ResilientHandleDurableTestCaseS878();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker6)));
                }
                goto label46;
            }
            if ((temp50 == 1)) {
                this.Manager.Comment("reaching state \'S943\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S944\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S945\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S946\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S947\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker7))) != -1)) {
                    ResilientHandleDurableTestCaseS673();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker7)));
                }
                goto label46;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S937\'.");
        label46:
;
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS878() {
            this.Manager.Comment("reaching state \'S878\'");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S947");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS673() {
            this.Manager.Comment("reaching state \'S673\'");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1149");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1040() {
            this.Manager.Comment("reaching state \'S1040\'");
            int temp52 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)));
            if ((temp52 == 0)) {
                this.Manager.Comment("reaching state \'S1041\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1042\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1043\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1044\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1045\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker8))) != -1)) {
                    ResilientHandleDurableTestCaseS223();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker8)));
                }
                goto label48;
            }
            if ((temp52 == 1)) {
                ResilientHandleDurableTestCaseS990();
                goto label48;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1040\'.");
        label48:
;
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS223() {
            this.Manager.Comment("reaching state \'S223\'");
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS990() {
            this.Manager.Comment("reaching state \'S990\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S991\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S992\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S993\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S994\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker9))) != -1)) {
                this.Manager.Comment("reaching state \'S995\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker9)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1148ReEstablishResilientOpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S994");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1148IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1148ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1149");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1148ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1149");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1160() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1160");
            this.Manager.Comment("reaching state \'S1160\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp55;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp55);
            this.Manager.AddReturn(ReadConfigInfo, null, temp55);
            this.Manager.Comment("reaching state \'S1161\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1160ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1160ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1160ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1160ReadConfigChecker3)));
            if ((temp63 == 0)) {
                this.Manager.Comment("reaching state \'S1162\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1163\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1164\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1165\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1166\'");
                int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker2)));
                if ((temp58 == 0)) {
                    ResilientHandleDurableTestCaseS1065();
                    goto label53;
                }
                if ((temp58 == 1)) {
                    ResilientHandleDurableTestCaseS1167();
                    goto label53;
                }
                if ((temp58 == 2)) {
                    this.Manager.Comment("reaching state \'S1178\'");
                    int temp57 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)));
                    if ((temp57 == 0)) {
                        this.Manager.Comment("reaching state \'S1179\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1180\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1181\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1182\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1183\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1184\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label52;
                    }
                    if ((temp57 == 1)) {
                        ResilientHandleDurableTestCaseS225();
                        goto label52;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1178\'.");
                label52:
;
                    goto label53;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker2)));
            label53:
;
                goto label58;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S1185\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1186\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1187\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1188\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1189\'");
                int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker5)));
                if ((temp62 == 0)) {
                    ResilientHandleDurableTestCaseS1190();
                    goto label57;
                }
                if ((temp62 == 1)) {
                    ResilientHandleDurableTestCaseS1203();
                    goto label57;
                }
                if ((temp62 == 2)) {
                    ResilientHandleDurableTestCaseS1216();
                    goto label57;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker5)));
            label57:
;
                goto label58;
            }
            if ((temp63 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label58;
            }
            if ((temp63 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1160ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1167() {
            this.Manager.Comment("reaching state \'S1167\'");
            int temp56 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
            if ((temp56 == 0)) {
                this.Manager.Comment("reaching state \'S1168\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1169\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1170\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1171\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1172\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS1090();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker)));
                }
                goto label51;
            }
            if ((temp56 == 1)) {
                this.Manager.Comment("reaching state \'S1173\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1174\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1175\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1176\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1177\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS1141();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker1)));
                }
                goto label51;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1167\'.");
        label51:
;
        }
        
        private void PreConstraintChecker74() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1183");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker77() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS225() {
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S226\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S228\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S229\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker3))) != -1)) {
                ResilientHandleDurableTestCaseS230();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S229");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1160ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1190() {
            this.Manager.Comment("reaching state \'S1190\'");
            int temp59 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S1191\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1192\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1193\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1194\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1195\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker4))) != -1)) {
                    ResilientHandleDurableTestCaseS1196();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker4)));
                }
                goto label54;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S1197\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S1198\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S1199\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1200\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1201\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker5))) != -1)) {
                    this.Manager.Comment("reaching state \'S1202\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker5)));
                }
                goto label54;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1190\'.");
        label54:
;
        }
        
        private void PreConstraintChecker78() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1196() {
            this.Manager.Comment("reaching state \'S1196\'");
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1203() {
            this.Manager.Comment("reaching state \'S1203\'");
            int temp60 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)));
            if ((temp60 == 0)) {
                this.Manager.Comment("reaching state \'S1204\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1205\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1206\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1207\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1208\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker6))) != -1)) {
                    ResilientHandleDurableTestCaseS1209();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker6)));
                }
                goto label55;
            }
            if ((temp60 == 1)) {
                this.Manager.Comment("reaching state \'S1210\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S1211\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S1212\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S1213\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1214\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker7))) != -1)) {
                    this.Manager.Comment("reaching state \'S1215\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker7)));
                }
                goto label55;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1203\'.");
        label55:
;
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1209() {
            this.Manager.Comment("reaching state \'S1209\'");
        }
        
        private void PreConstraintChecker81() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1214");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1160IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1189");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1216() {
            this.Manager.Comment("reaching state \'S1216\'");
            int temp61 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)));
            if ((temp61 == 0)) {
                this.Manager.Comment("reaching state \'S1217\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1218\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1219\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1220\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1221\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker8))) != -1)) {
                    ResilientHandleDurableTestCaseS377();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker8)));
                }
                goto label56;
            }
            if ((temp61 == 1)) {
                this.Manager.Comment("reaching state \'S1222\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1223\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1224\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1225\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1226\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker9))) != -1)) {
                    ResilientHandleDurableTestCaseS383();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker9)));
                }
                goto label56;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1216\'.");
        label56:
;
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS377() {
            this.Manager.Comment("reaching state \'S377\'");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReEstablishResilientOpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1226");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS383() {
            this.Manager.Comment("reaching state \'S383\'");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1160ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1227
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1227() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1227");
            this.Manager.Comment("reaching state \'S1227\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp64);
            this.Manager.AddReturn(ReadConfigInfo, null, temp64);
            this.Manager.Comment("reaching state \'S1228\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1227ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1227ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1227ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1227ReadConfigChecker3)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S1229\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1230\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1231\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1232\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1233\'");
                int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker1)));
                if ((temp65 == 0)) {
                    ResilientHandleDurableTestCaseS1040();
                    goto label59;
                }
                if ((temp65 == 1)) {
                    ResilientHandleDurableTestCaseS972();
                    goto label59;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker1)));
            label59:
;
                goto label63;
            }
            if ((temp69 == 1)) {
                this.Manager.Comment("reaching state \'S1234\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1235\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1236\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1237\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1238\'");
                int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker3)));
                if ((temp68 == 0)) {
                    ResilientHandleDurableTestCaseS1239();
                    goto label62;
                }
                if ((temp68 == 1)) {
                    this.Manager.Comment("reaching state \'S1252\'");
                    int temp67 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)));
                    if ((temp67 == 0)) {
                        this.Manager.Comment("reaching state \'S1253\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1254\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1255\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1256\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1257\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1258\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label61;
                    }
                    if ((temp67 == 1)) {
                        ResilientHandleDurableTestCaseS372();
                        goto label61;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1252\'.");
                label61:
;
                    goto label62;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker3)));
            label62:
;
                goto label63;
            }
            if ((temp69 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label63;
            }
            if ((temp69 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1227ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1228");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1227ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1228");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1238");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1239() {
            this.Manager.Comment("reaching state \'S1239\'");
            int temp66 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)));
            if ((temp66 == 0)) {
                this.Manager.Comment("reaching state \'S1240\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1241\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1242\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1243\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1244\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS1245();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker)));
                }
                goto label60;
            }
            if ((temp66 == 1)) {
                this.Manager.Comment("reaching state \'S1246\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S1247\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S1248\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1249\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1250\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1251\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker1)));
                }
                goto label60;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1239\'.");
        label60:
;
        }
        
        private void PreConstraintChecker84() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1245() {
            this.Manager.Comment("reaching state \'S1245\'");
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1227IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1238");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS372() {
            this.Manager.Comment("reaching state \'S372\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S375\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S376\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker3))) != -1)) {
                ResilientHandleDurableTestCaseS377();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1227ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S376");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1227ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1228");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1227ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1228");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1259
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1259() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1259");
            this.Manager.Comment("reaching state \'S1259\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp70;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp70);
            this.Manager.AddReturn(ReadConfigInfo, null, temp70);
            this.Manager.Comment("reaching state \'S1260\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1259ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1259ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1259ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1259ReadConfigChecker3)));
            if ((temp75 == 0)) {
                this.Manager.Comment("reaching state \'S1261\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1262\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1263\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1264\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1265\'");
                int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker2)));
                if ((temp72 == 0)) {
                    ResilientHandleDurableTestCaseS1167();
                    goto label65;
                }
                if ((temp72 == 1)) {
                    this.Manager.Comment("reaching state \'S1266\'");
                    int temp71 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)));
                    if ((temp71 == 0)) {
                        this.Manager.Comment("reaching state \'S1267\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1268\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1269\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1270\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1271\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1272\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label64;
                    }
                    if ((temp71 == 1)) {
                        this.Manager.Comment("reaching state \'S1273\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1274\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1275\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1276\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1277\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS1071();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label64;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1266\'.");
                label64:
;
                    goto label65;
                }
                if ((temp72 == 2)) {
                    ResilientHandleDurableTestCaseS972();
                    goto label65;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker2)));
            label65:
;
                goto label68;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S1278\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1279\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1280\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1281\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1282\'");
                int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker4)));
                if ((temp74 == 0)) {
                    ResilientHandleDurableTestCaseS1216();
                    goto label67;
                }
                if ((temp74 == 1)) {
                    this.Manager.Comment("reaching state \'S1283\'");
                    int temp73 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)));
                    if ((temp73 == 0)) {
                        this.Manager.Comment("reaching state \'S1284\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1285\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1286\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1287\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1288\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS1245();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label66;
                    }
                    if ((temp73 == 1)) {
                        ResilientHandleDurableTestCaseS701();
                        goto label66;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1283\'.");
                label66:
;
                    goto label67;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker4)));
            label67:
;
                goto label68;
            }
            if ((temp75 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label68;
            }
            if ((temp75 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label68;
            }
            throw new InvalidOperationException("never reached");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1259ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1265");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1265");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1265");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1265");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker88() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1277");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1265");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1265");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1259ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1282");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1259IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1282");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1288");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS701() {
            this.Manager.Comment("reaching state \'S701\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S702\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S704\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S705\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S706\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1259ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S705");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1259ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1259ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1289
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1289() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1289");
            this.Manager.Comment("reaching state \'S1289\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp76);
            this.Manager.AddReturn(ReadConfigInfo, null, temp76);
            this.Manager.Comment("reaching state \'S1290\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1289ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1289ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1289ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1289ReadConfigChecker3)));
            if ((temp87 == 0)) {
                this.Manager.Comment("reaching state \'S1291\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1292\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1293\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1294\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1295\'");
                int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker2)));
                if ((temp77 == 0)) {
                    ResilientHandleDurableTestCaseS1190();
                    goto label69;
                }
                if ((temp77 == 1)) {
                    ResilientHandleDurableTestCaseS1203();
                    goto label69;
                }
                if ((temp77 == 2)) {
                    ResilientHandleDurableTestCaseS1216();
                    goto label69;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker2)));
            label69:
;
                goto label79;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S1296\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1297\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1298\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1299\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1300\'");
                int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker4)));
                if ((temp80 == 0)) {
                    ResilientHandleDurableTestCaseS1301();
                    goto label72;
                }
                if ((temp80 == 1)) {
                    this.Manager.Comment("reaching state \'S1312\'");
                    int temp79 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)));
                    if ((temp79 == 0)) {
                        this.Manager.Comment("reaching state \'S1313\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1314\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1315\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1316\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1317\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1318\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label71;
                    }
                    if ((temp79 == 1)) {
                        ResilientHandleDurableTestCaseS719();
                        goto label71;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1312\'.");
                label71:
;
                    goto label72;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker4)));
            label72:
;
                goto label79;
            }
            if ((temp87 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label79;
            }
            if ((temp87 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1289ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1289ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1301() {
            this.Manager.Comment("reaching state \'S1301\'");
            int temp78 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)));
            if ((temp78 == 0)) {
                this.Manager.Comment("reaching state \'S1302\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1303\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1304\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1305\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1306\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS636();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker)));
                }
                goto label70;
            }
            if ((temp78 == 1)) {
                this.Manager.Comment("reaching state \'S1307\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1308\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1309\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1310\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1311\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS642();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker1)));
                }
                goto label70;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1301\'.");
        label70:
;
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1306");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS636() {
            this.Manager.Comment("reaching state \'S636\'");
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1311");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS642() {
            this.Manager.Comment("reaching state \'S642\'");
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker94() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1317");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker95() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS719() {
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S720\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S721\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S722\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S723\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S724\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S723");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1289ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1289ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS403() {
            this.Manager.Comment("reaching state \'S403\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
            this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
            this.Manager.Comment("reaching state \'S404\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S405\'");
            this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                    "Timeout)\'");
            this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
            this.Manager.Comment("reaching state \'S406\'");
            this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
            this.Manager.Comment("reaching state \'S407\'");
            int temp86 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker9)));
            if ((temp86 == 0)) {
                this.Manager.Comment("reaching state \'S408\'");
                int temp81 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)));
                if ((temp81 == 0)) {
                    ResilientHandleDurableTestCaseS409();
                    goto label73;
                }
                if ((temp81 == 1)) {
                    ResilientHandleDurableTestCaseS414();
                    goto label73;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S408\'.");
            label73:
;
                goto label78;
            }
            if ((temp86 == 1)) {
                ResilientHandleDurableTestCaseS419();
                goto label78;
            }
            if ((temp86 == 2)) {
                ResilientHandleDurableTestCaseS432();
                goto label78;
            }
            if ((temp86 == 3)) {
                ResilientHandleDurableTestCaseS439();
                goto label78;
            }
            if ((temp86 == 4)) {
                this.Manager.Comment("reaching state \'S450\'");
                int temp85 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)));
                if ((temp85 == 0)) {
                    ResilientHandleDurableTestCaseS451();
                    goto label77;
                }
                if ((temp85 == 1)) {
                    ResilientHandleDurableTestCaseS84();
                    goto label77;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S450\'.");
            label77:
;
                goto label78;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker9)));
        label78:
;
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S407");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker96() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS409() {
            this.Manager.Comment("reaching state \'S409\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S410\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S411\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S412\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S413\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker4))) != -1)) {
                ResilientHandleDurableTestCaseS70();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker4)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S413");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS414() {
            this.Manager.Comment("reaching state \'S414\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S416\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S417\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S418\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker5))) != -1)) {
                ResilientHandleDurableTestCaseS76();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker5)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S418");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S407");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS419() {
            this.Manager.Comment("reaching state \'S419\'");
            int temp82 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)));
            if ((temp82 == 0)) {
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S421\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S424\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker6))) != -1)) {
                    ResilientHandleDurableTestCaseS425();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker6)));
                }
                goto label74;
            }
            if ((temp82 == 1)) {
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S430\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker7))) != -1)) {
                    ResilientHandleDurableTestCaseS431();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker7)));
                }
                goto label74;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S419\'.");
        label74:
;
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S424");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS425() {
            this.Manager.Comment("reaching state \'S425\'");
        }
        
        private void PreConstraintChecker99() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S430");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS431() {
            this.Manager.Comment("reaching state \'S431\'");
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S407");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS432() {
            this.Manager.Comment("reaching state \'S432\'");
            int temp83 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)));
            if ((temp83 == 0)) {
                ResilientHandleDurableTestCaseS110();
                goto label75;
            }
            if ((temp83 == 1)) {
                ResilientHandleDurableTestCaseS433();
                goto label75;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S432\'.");
        label75:
;
        }
        
        private void PreConstraintChecker100() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS433() {
            this.Manager.Comment("reaching state \'S433\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S434\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S435\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S436\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S437\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker8))) != -1)) {
                ResilientHandleDurableTestCaseS438();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker8)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S437");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS438() {
            this.Manager.Comment("reaching state \'S438\'");
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S407");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS439() {
            this.Manager.Comment("reaching state \'S439\'");
            int temp84 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)));
            if ((temp84 == 0)) {
                ResilientHandleDurableTestCaseS440();
                goto label76;
            }
            if ((temp84 == 1)) {
                ResilientHandleDurableTestCaseS445();
                goto label76;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S439\'.");
        label76:
;
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS440() {
            this.Manager.Comment("reaching state \'S440\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S441\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S442\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S443\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S444\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker9))) != -1)) {
                ResilientHandleDurableTestCaseS57();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker9)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S444");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker103() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS445() {
            this.Manager.Comment("reaching state \'S445\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S446\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S447\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S448\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S449\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker10))) != -1)) {
                ResilientHandleDurableTestCaseS63();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker10)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S449");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1289IoCtlResiliencyResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S407");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS451() {
            this.Manager.Comment("reaching state \'S451\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S452\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S453\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S454\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S455\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker11))) != -1)) {
                ResilientHandleDurableTestCaseS456();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker11)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1289ReEstablishResilientOpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S455");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS456() {
            this.Manager.Comment("reaching state \'S456\'");
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        #endregion
        
        #region Test Starting in S1319
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1319() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1319");
            this.Manager.Comment("reaching state \'S1319\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp88;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp88);
            this.Manager.AddReturn(ReadConfigInfo, null, temp88);
            this.Manager.Comment("reaching state \'S1320\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1319ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1319ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1319ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1319ReadConfigChecker3)));
            if ((temp93 == 0)) {
                this.Manager.Comment("reaching state \'S1321\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1322\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1323\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1324\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1325\'");
                int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker1)));
                if ((temp89 == 0)) {
                    ResilientHandleDurableTestCaseS1216();
                    goto label80;
                }
                if ((temp89 == 1)) {
                    ResilientHandleDurableTestCaseS1239();
                    goto label80;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker1)));
            label80:
;
                goto label84;
            }
            if ((temp93 == 1)) {
                this.Manager.Comment("reaching state \'S1326\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1327\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1328\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1329\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1330\'");
                int temp92 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker3)));
                if ((temp92 == 0)) {
                    ResilientHandleDurableTestCaseS1331();
                    goto label83;
                }
                if ((temp92 == 1)) {
                    this.Manager.Comment("reaching state \'S1343\'");
                    int temp91 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)));
                    if ((temp91 == 0)) {
                        this.Manager.Comment("reaching state \'S1344\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1345\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1346\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1347\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1348\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1349\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label82;
                    }
                    if ((temp91 == 1)) {
                        ResilientHandleDurableTestCaseS631();
                        goto label82;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1343\'.");
                label82:
;
                    goto label83;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker3)));
            label83:
;
                goto label84;
            }
            if ((temp93 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label84;
            }
            if ((temp93 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1319ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1325");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1325");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1319ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1331() {
            this.Manager.Comment("reaching state \'S1331\'");
            int temp90 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
            if ((temp90 == 0)) {
                this.Manager.Comment("reaching state \'S1332\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1333\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1334\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1335\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1336\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS718();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker)));
                }
                goto label81;
            }
            if ((temp90 == 1)) {
                this.Manager.Comment("reaching state \'S1337\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S1338\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S1339\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S1340\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1341\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1342\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker1)));
                }
                goto label81;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1331\'.");
        label81:
;
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1336");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS718() {
            this.Manager.Comment("reaching state \'S718\'");
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1341");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1319IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1348");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS631() {
            this.Manager.Comment("reaching state \'S631\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S632\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S633\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S634\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S635\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker3))) != -1)) {
                ResilientHandleDurableTestCaseS636();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1319ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S635");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1319ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1319ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S1350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1350() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1350");
            this.Manager.Comment("reaching state \'S1350\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp94;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp94);
            this.Manager.AddReturn(ReadConfigInfo, null, temp94);
            this.Manager.Comment("reaching state \'S1351\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1350ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1350ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1350ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1350ReadConfigChecker3)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S1352\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1353\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1354\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1355\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1356\'");
                int temp96 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker2)));
                if ((temp96 == 0)) {
                    ResilientHandleDurableTestCaseS1190();
                    goto label86;
                }
                if ((temp96 == 1)) {
                    ResilientHandleDurableTestCaseS1203();
                    goto label86;
                }
                if ((temp96 == 2)) {
                    this.Manager.Comment("reaching state \'S1357\'");
                    int temp95 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
                    if ((temp95 == 0)) {
                        this.Manager.Comment("reaching state \'S1358\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1359\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1360\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1361\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1362\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1363\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label85;
                    }
                    if ((temp95 == 1)) {
                        ResilientHandleDurableTestCaseS378();
                        goto label85;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1357\'.");
                label85:
;
                    goto label86;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker2)));
            label86:
;
                goto label91;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S1364\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1365\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1366\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1367\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1368\'");
                int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker5)));
                if ((temp100 == 0)) {
                    ResilientHandleDurableTestCaseS1369();
                    goto label90;
                }
                if ((temp100 == 1)) {
                    this.Manager.Comment("reaching state \'S1381\'");
                    int temp98 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)));
                    if ((temp98 == 0)) {
                        this.Manager.Comment("reaching state \'S1382\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1383\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1384\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1385\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1386\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S1387\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label88;
                    }
                    if ((temp98 == 1)) {
                        this.Manager.Comment("reaching state \'S1388\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1389\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1390\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1391\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1392\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S1393\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label88;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1381\'.");
                label88:
;
                    goto label90;
                }
                if ((temp100 == 2)) {
                    this.Manager.Comment("reaching state \'S1394\'");
                    int temp99 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)));
                    if ((temp99 == 0)) {
                        this.Manager.Comment("reaching state \'S1395\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1396\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1397\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1398\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1399\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker6))) != -1)) {
                            this.Manager.Comment("reaching state \'S1400\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker6)));
                        }
                        goto label89;
                    }
                    if ((temp99 == 1)) {
                        ResilientHandleDurableTestCaseS637();
                        goto label89;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1394\'.");
                label89:
;
                    goto label90;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker5)));
            label90:
;
                goto label91;
            }
            if ((temp101 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label91;
            }
            if ((temp101 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1350ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1356");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1356");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1356");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker110() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1362");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS378() {
            this.Manager.Comment("reaching state \'S378\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S380\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S382\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker1))) != -1)) {
                ResilientHandleDurableTestCaseS383();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S382");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1350ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1368");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1369() {
            this.Manager.Comment("reaching state \'S1369\'");
            int temp97 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)));
            if ((temp97 == 0)) {
                this.Manager.Comment("reaching state \'S1370\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1371\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1372\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1373\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1374\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS1375();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker2)));
                }
                goto label87;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S1376\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1377\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1378\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1379\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1380\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS610();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker3)));
                }
                goto label87;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1369\'.");
        label87:
;
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1375() {
            this.Manager.Comment("reaching state \'S1375\'");
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1380");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS610() {
            this.Manager.Comment("reaching state \'S610\'");
        }
        
        private void ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1368");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker114() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb21 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1386");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker115() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1392");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1350IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1368");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1399");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS637() {
            this.Manager.Comment("reaching state \'S637\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S638\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S639\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S640\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S641\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker7))) != -1)) {
                ResilientHandleDurableTestCaseS642();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker7)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1350ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S641");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1350ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1350ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S1401
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1401() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1401");
            this.Manager.Comment("reaching state \'S1401\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp102;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp102);
            this.Manager.AddReturn(ReadConfigInfo, null, temp102);
            this.Manager.Comment("reaching state \'S1402\'");
            int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1401ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1401ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1401ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1401ReadConfigChecker3)));
            if ((temp107 == 0)) {
                this.Manager.Comment("reaching state \'S1403\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1404\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1405\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1406\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1407\'");
                int temp103 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker1)));
                if ((temp103 == 0)) {
                    ResilientHandleDurableTestCaseS1216();
                    goto label92;
                }
                if ((temp103 == 1)) {
                    ResilientHandleDurableTestCaseS1239();
                    goto label92;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker1)));
            label92:
;
                goto label96;
            }
            if ((temp107 == 1)) {
                this.Manager.Comment("reaching state \'S1408\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1409\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1410\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1411\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1412\'");
                int temp106 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker4)));
                if ((temp106 == 0)) {
                    ResilientHandleDurableTestCaseS1301();
                    goto label95;
                }
                if ((temp106 == 1)) {
                    ResilientHandleDurableTestCaseS1413();
                    goto label95;
                }
                if ((temp106 == 2)) {
                    this.Manager.Comment("reaching state \'S1424\'");
                    int temp105 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)));
                    if ((temp105 == 0)) {
                        this.Manager.Comment("reaching state \'S1425\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1426\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1427\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1428\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1429\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1430\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label94;
                    }
                    if ((temp105 == 1)) {
                        this.Manager.Comment("reaching state \'S1431\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1432\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1433\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1434\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1435\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            ResilientHandleDurableTestCaseS1375();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label94;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1424\'.");
                label94:
;
                    goto label95;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker4)));
            label95:
;
                goto label96;
            }
            if ((temp107 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label96;
            }
            if ((temp107 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label96;
            }
            throw new InvalidOperationException("never reached");
        label96:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1401ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1402");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1407");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1407");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1401ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1402");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1412");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1412");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1412");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1412");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1413() {
            this.Manager.Comment("reaching state \'S1413\'");
            int temp104 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
            if ((temp104 == 0)) {
                this.Manager.Comment("reaching state \'S1414\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1415\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1416\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1417\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1418\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS629();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker)));
                }
                goto label93;
            }
            if ((temp104 == 1)) {
                this.Manager.Comment("reaching state \'S1419\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1420\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1421\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1422\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1423\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS623();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker1)));
                }
                goto label93;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1413\'.");
        label93:
;
        }
        
        private void PreConstraintChecker118() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS629() {
            this.Manager.Comment("reaching state \'S629\'");
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb21 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1423");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS623() {
            this.Manager.Comment("reaching state \'S623\'");
        }
        
        private void ResilientHandleDurableTestCaseS1401IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1412");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1412");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1429");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker121() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1401ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1435");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1401ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1402");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1401ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1402");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S1436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1436() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1436");
            this.Manager.Comment("reaching state \'S1436\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp108;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp108);
            this.Manager.AddReturn(ReadConfigInfo, null, temp108);
            this.Manager.Comment("reaching state \'S1437\'");
            int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1436ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1436ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1436ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1436ReadConfigChecker3)));
            if ((temp112 == 0)) {
                this.Manager.Comment("reaching state \'S1438\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1439\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1440\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1441\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1442\'");
                int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker2)));
                if ((temp110 == 0)) {
                    ResilientHandleDurableTestCaseS1190();
                    goto label98;
                }
                if ((temp110 == 1)) {
                    ResilientHandleDurableTestCaseS1216();
                    goto label98;
                }
                if ((temp110 == 2)) {
                    this.Manager.Comment("reaching state \'S1443\'");
                    int temp109 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker122)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker123)));
                    if ((temp109 == 0)) {
                        this.Manager.Comment("reaching state \'S1444\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1445\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1446\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1447\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1448\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1436ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS364();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1436ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label97;
                    }
                    if ((temp109 == 1)) {
                        this.Manager.Comment("reaching state \'S1449\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1450\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1451\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1452\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1453\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1436ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS1209();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1436ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label97;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1443\'.");
                label97:
;
                    goto label98;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker2)));
            label98:
;
                goto label100;
            }
            if ((temp112 == 1)) {
                this.Manager.Comment("reaching state \'S1454\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1455\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1456\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1457\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1458\'");
                int temp111 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker4)));
                if ((temp111 == 0)) {
                    ResilientHandleDurableTestCaseS1301();
                    goto label99;
                }
                if ((temp111 == 1)) {
                    ResilientHandleDurableTestCaseS1331();
                    goto label99;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker4)));
            label99:
;
                goto label100;
            }
            if ((temp112 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label100;
            }
            if ((temp112 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label100;
            }
            throw new InvalidOperationException("never reached");
        label100:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1436ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1442");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1442");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1442");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1442");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1442");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1442");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker122() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1436ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1448");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS364() {
            this.Manager.Comment("reaching state \'S364\'");
        }
        
        private void PreConstraintChecker123() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1436ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1453");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1436ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1458");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1436IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1458");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1436ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1436ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S1459
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1459() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1459");
            this.Manager.Comment("reaching state \'S1459\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp113;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp113);
            this.Manager.AddReturn(ReadConfigInfo, null, temp113);
            this.Manager.Comment("reaching state \'S1460\'");
            int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1459ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1459ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1459ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1459ReadConfigChecker3)));
            if ((temp124 == 0)) {
                this.Manager.Comment("reaching state \'S1461\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1462\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1463\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1464\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1465\'");
                int temp114 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker2)));
                if ((temp114 == 0)) {
                    ResilientHandleDurableTestCaseS1301();
                    goto label101;
                }
                if ((temp114 == 1)) {
                    ResilientHandleDurableTestCaseS1369();
                    goto label101;
                }
                if ((temp114 == 2)) {
                    ResilientHandleDurableTestCaseS1413();
                    goto label101;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker2)));
            label101:
;
                goto label111;
            }
            if ((temp124 == 1)) {
                this.Manager.Comment("reaching state \'S1466\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1467\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1468\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1469\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1470\'");
                int temp118 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker5)));
                if ((temp118 == 0)) {
                    ResilientHandleDurableTestCaseS1471();
                    goto label105;
                }
                if ((temp118 == 1)) {
                    ResilientHandleDurableTestCaseS1482();
                    goto label105;
                }
                if ((temp118 == 2)) {
                    this.Manager.Comment("reaching state \'S1495\'");
                    int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker128)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker129)));
                    if ((temp117 == 0)) {
                        this.Manager.Comment("reaching state \'S1496\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1497\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1498\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1499\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1500\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            ResilientHandleDurableTestCaseS1501();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label104;
                    }
                    if ((temp117 == 1)) {
                        this.Manager.Comment("reaching state \'S1502\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1503\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1504\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1505\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1506\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            ResilientHandleDurableTestCaseS1507();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label104;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1495\'.");
                label104:
;
                    goto label105;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker5)));
            label105:
;
                goto label111;
            }
            if ((temp124 == 2)) {
                ResilientHandleDurableTestCaseS1508();
                goto label111;
            }
            if ((temp124 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1459ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1465");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1465");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1465");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1465");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1465");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1465");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1470");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1471() {
            this.Manager.Comment("reaching state \'S1471\'");
            int temp115 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker124)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker125)));
            if ((temp115 == 0)) {
                this.Manager.Comment("reaching state \'S1472\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1473\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1474\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1475\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1476\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS751();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker)));
                }
                goto label102;
            }
            if ((temp115 == 1)) {
                this.Manager.Comment("reaching state \'S1477\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1478\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1479\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1480\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1481\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS757();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker1)));
                }
                goto label102;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1471\'.");
        label102:
;
        }
        
        private void PreConstraintChecker124() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS751() {
            this.Manager.Comment("reaching state \'S751\'");
        }
        
        private void PreConstraintChecker125() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1481");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS757() {
            this.Manager.Comment("reaching state \'S757\'");
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1470");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1482() {
            this.Manager.Comment("reaching state \'S1482\'");
            int temp116 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker126)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker127)));
            if ((temp116 == 0)) {
                this.Manager.Comment("reaching state \'S1483\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1484\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1485\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1486\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1487\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS1488();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker2)));
                }
                goto label103;
            }
            if ((temp116 == 1)) {
                this.Manager.Comment("reaching state \'S1489\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1490\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1491\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1492\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1493\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS1494();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker3)));
                }
                goto label103;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1482\'.");
        label103:
;
        }
        
        private void PreConstraintChecker126() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1487");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1488() {
            this.Manager.Comment("reaching state \'S1488\'");
        }
        
        private void PreConstraintChecker127() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1493");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1494() {
            this.Manager.Comment("reaching state \'S1494\'");
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1470");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker128() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1500");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1501() {
            this.Manager.Comment("reaching state \'S1501\'");
        }
        
        private void PreConstraintChecker129() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1506");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1507() {
            this.Manager.Comment("reaching state \'S1507\'");
        }
        
        private void ResilientHandleDurableTestCaseS1459ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1508() {
            this.Manager.Comment("reaching state \'S1508\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
            this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
            this.Manager.Comment("reaching state \'S1509\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S1510\'");
            this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                    "Timeout)\'");
            this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
            this.Manager.Comment("reaching state \'S1511\'");
            this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
            this.Manager.Comment("reaching state \'S1512\'");
            int temp123 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker9)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker10)));
            if ((temp123 == 0)) {
                this.Manager.Comment("reaching state \'S1513\'");
                int temp119 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker130)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker131)));
                if ((temp119 == 0)) {
                    ResilientHandleDurableTestCaseS1023();
                    goto label106;
                }
                if ((temp119 == 1)) {
                    ResilientHandleDurableTestCaseS655();
                    goto label106;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1513\'.");
            label106:
;
                goto label110;
            }
            if ((temp123 == 1)) {
                this.Manager.Comment("reaching state \'S1514\'");
                int temp120 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker132)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker133)));
                if ((temp120 == 0)) {
                    ResilientHandleDurableTestCaseS668();
                    goto label107;
                }
                if ((temp120 == 1)) {
                    ResilientHandleDurableTestCaseS873();
                    goto label107;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S1514\'.");
            label107:
;
                goto label110;
            }
            if ((temp123 == 2)) {
                ResilientHandleDurableTestCaseS490();
                goto label110;
            }
            if ((temp123 == 3)) {
                ResilientHandleDurableTestCaseS503();
                goto label110;
            }
            if ((temp123 == 4)) {
                ResilientHandleDurableTestCaseS674();
                goto label110;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker9)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker10)));
        label110:
;
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker130() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1023() {
            this.Manager.Comment("reaching state \'S1023\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S1024\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S1025\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S1026\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S1027\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker6))) != -1)) {
                ResilientHandleDurableTestCaseS849();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker6)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1027");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker131() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS655() {
            this.Manager.Comment("reaching state \'S655\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S656\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S657\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S658\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S659\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker7))) != -1)) {
                ResilientHandleDurableTestCaseS660();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker7)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S659");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker132() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS668() {
            this.Manager.Comment("reaching state \'S668\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S669\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S670\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S671\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S672\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker8))) != -1)) {
                ResilientHandleDurableTestCaseS673();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker8)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S672");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker133() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS873() {
            this.Manager.Comment("reaching state \'S873\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S874\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S875\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S876\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S877\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker9))) != -1)) {
                ResilientHandleDurableTestCaseS878();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker9)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S877");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS490() {
            this.Manager.Comment("reaching state \'S490\'");
            int temp121 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker134)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker135)));
            if ((temp121 == 0)) {
                ResilientHandleDurableTestCaseS491();
                goto label108;
            }
            if ((temp121 == 1)) {
                ResilientHandleDurableTestCaseS497();
                goto label108;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S490\'.");
        label108:
;
        }
        
        private void PreConstraintChecker134() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void PreConstraintChecker135() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS503() {
            this.Manager.Comment("reaching state \'S503\'");
            int temp122 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker136)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker137)));
            if ((temp122 == 0)) {
                ResilientHandleDurableTestCaseS504();
                goto label109;
            }
            if ((temp122 == 1)) {
                ResilientHandleDurableTestCaseS510();
                goto label109;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S503\'.");
        label109:
;
        }
        
        private void PreConstraintChecker136() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS504() {
            this.Manager.Comment("reaching state \'S504\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S505\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S506\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S507\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S508\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker10))) != -1)) {
                ResilientHandleDurableTestCaseS509();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker10)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S508");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker137() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS510() {
            this.Manager.Comment("reaching state \'S510\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S511\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S512\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S513\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S514\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker11))) != -1)) {
                ResilientHandleDurableTestCaseS515();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker11)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1459ReEstablishResilientOpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S514");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459IoCtlResiliencyResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1459ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1515
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1515() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1515");
            this.Manager.Comment("reaching state \'S1515\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp125;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp125);
            this.Manager.AddReturn(ReadConfigInfo, null, temp125);
            this.Manager.Comment("reaching state \'S1516\'");
            int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1515ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1515ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1515ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1515ReadConfigChecker3)));
            if ((temp130 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label116;
            }
            if ((temp130 == 1)) {
                this.Manager.Comment("reaching state \'S1517\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1518\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1519\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1520\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1521\'");
                int temp126 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker1)));
                if ((temp126 == 0)) {
                    ResilientHandleDurableTestCaseS1301();
                    goto label112;
                }
                if ((temp126 == 1)) {
                    ResilientHandleDurableTestCaseS1331();
                    goto label112;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker1)));
            label112:
;
                goto label116;
            }
            if ((temp130 == 2)) {
                this.Manager.Comment("reaching state \'S1522\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1523\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1524\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1525\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1526\'");
                int temp129 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker3)));
                if ((temp129 == 0)) {
                    ResilientHandleDurableTestCaseS1527();
                    goto label115;
                }
                if ((temp129 == 1)) {
                    this.Manager.Comment("reaching state \'S1539\'");
                    int temp128 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker140)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker141)));
                    if ((temp128 == 0)) {
                        this.Manager.Comment("reaching state \'S1540\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1541\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1542\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1543\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1544\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1545\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label114;
                    }
                    if ((temp128 == 1)) {
                        ResilientHandleDurableTestCaseS752();
                        goto label114;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1539\'.");
                label114:
;
                    goto label115;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker3)));
            label115:
;
                goto label116;
            }
            if ((temp130 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label116;
            }
            throw new InvalidOperationException("never reached");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1515ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1515ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1521");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1521");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1515ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1526");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1526");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1527() {
            this.Manager.Comment("reaching state \'S1527\'");
            int temp127 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker138)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker139)));
            if ((temp127 == 0)) {
                this.Manager.Comment("reaching state \'S1528\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S1529\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S1530\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1531\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1532\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1533\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker)));
                }
                goto label113;
            }
            if ((temp127 == 1)) {
                this.Manager.Comment("reaching state \'S1534\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1535\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1536\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1537\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1538\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS738();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker1)));
                }
                goto label113;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1527\'.");
        label113:
;
        }
        
        private void PreConstraintChecker138() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1532");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker139() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1538");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS738() {
            this.Manager.Comment("reaching state \'S738\'");
        }
        
        private void ResilientHandleDurableTestCaseS1515IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1526");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1526");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker140() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1544");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker141() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS752() {
            this.Manager.Comment("reaching state \'S752\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S753\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S754\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S755\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S756\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker3))) != -1)) {
                ResilientHandleDurableTestCaseS757();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1515ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S756");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1515ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1546
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1546() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1546");
            this.Manager.Comment("reaching state \'S1546\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp131;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp131);
            this.Manager.AddReturn(ReadConfigInfo, null, temp131);
            this.Manager.Comment("reaching state \'S1547\'");
            int temp136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1546ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1546ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1546ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1546ReadConfigChecker3)));
            if ((temp136 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label121;
            }
            if ((temp136 == 1)) {
                this.Manager.Comment("reaching state \'S1548\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1549\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1550\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1551\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1552\'");
                int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker2)));
                if ((temp132 == 0)) {
                    ResilientHandleDurableTestCaseS1301();
                    goto label117;
                }
                if ((temp132 == 1)) {
                    ResilientHandleDurableTestCaseS1369();
                    goto label117;
                }
                if ((temp132 == 2)) {
                    ResilientHandleDurableTestCaseS1413();
                    goto label117;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker2)));
            label117:
;
                goto label121;
            }
            if ((temp136 == 2)) {
                this.Manager.Comment("reaching state \'S1553\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1554\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1555\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1556\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1557\'");
                int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker5)));
                if ((temp135 == 0)) {
                    ResilientHandleDurableTestCaseS1471();
                    goto label120;
                }
                if ((temp135 == 1)) {
                    this.Manager.Comment("reaching state \'S1558\'");
                    int temp133 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker142)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker143)));
                    if ((temp133 == 0)) {
                        this.Manager.Comment("reaching state \'S1559\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1560\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1561\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1562\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1563\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1564\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label118;
                    }
                    if ((temp133 == 1)) {
                        this.Manager.Comment("reaching state \'S1565\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1566\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1567\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1568\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1569\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1570\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label118;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1558\'.");
                label118:
;
                    goto label120;
                }
                if ((temp135 == 2)) {
                    this.Manager.Comment("reaching state \'S1571\'");
                    int temp134 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker144)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker145)));
                    if ((temp134 == 0)) {
                        this.Manager.Comment("reaching state \'S1572\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1573\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1574\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1575\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1576\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1577\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label119;
                    }
                    if ((temp134 == 1)) {
                        this.Manager.Comment("reaching state \'S1578\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1579\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1580\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1581\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1582\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            ResilientHandleDurableTestCaseS1488();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label119;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1571\'.");
                label119:
;
                    goto label120;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker5)));
            label120:
;
                goto label121;
            }
            if ((temp136 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label121;
            }
            throw new InvalidOperationException("never reached");
        label121:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1546ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1547");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1546ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1547");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1552");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1552");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1552");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1546ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1547");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker142() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1563");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker143() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1569");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1546IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker144() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1576");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker145() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1546ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1582");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1546ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1547");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1583
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1583() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1583");
            this.Manager.Comment("reaching state \'S1583\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp137;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp137);
            this.Manager.AddReturn(ReadConfigInfo, null, temp137);
            this.Manager.Comment("reaching state \'S1584\'");
            int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1583ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1583ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1583ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1583ReadConfigChecker3)));
            if ((temp141 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label125;
            }
            if ((temp141 == 1)) {
                this.Manager.Comment("reaching state \'S1585\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1586\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1587\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1588\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1589\'");
                int temp139 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker2)));
                if ((temp139 == 0)) {
                    ResilientHandleDurableTestCaseS1471();
                    goto label123;
                }
                if ((temp139 == 1)) {
                    ResilientHandleDurableTestCaseS1482();
                    goto label123;
                }
                if ((temp139 == 2)) {
                    ResilientHandleDurableTestCaseS1590();
                    goto label123;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker2)));
            label123:
;
                goto label125;
            }
            if ((temp141 == 2)) {
                this.Manager.Comment("reaching state \'S1601\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1602\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1603\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1604\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1605\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker3))) != -1)) {
                    this.Manager.Comment("reaching state \'S1606\'");
                    int temp140 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker148)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker149)));
                    if ((temp140 == 0)) {
                        this.Manager.Comment("reaching state \'S1607\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1608\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1609\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1610\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1611\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1612\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label124;
                    }
                    if ((temp140 == 1)) {
                        ResilientHandleDurableTestCaseS272();
                        goto label124;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1606\'.");
                label124:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker3)));
                }
                goto label125;
            }
            if ((temp141 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label125;
            }
            throw new InvalidOperationException("never reached");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1583ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1584");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1583ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1584");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1589");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1589");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1589");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1589");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1589");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1589");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1590() {
            this.Manager.Comment("reaching state \'S1590\'");
            int temp138 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker146)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker147)));
            if ((temp138 == 0)) {
                this.Manager.Comment("reaching state \'S1591\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1592\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1593\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1594\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1595\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS1507();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker)));
                }
                goto label122;
            }
            if ((temp138 == 1)) {
                this.Manager.Comment("reaching state \'S1596\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1597\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1598\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1599\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1600\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS1501();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker1)));
                }
                goto label122;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1590\'.");
        label122:
;
        }
        
        private void PreConstraintChecker146() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1595");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker147() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1583ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1584");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1583IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1605");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1605");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker148() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1583ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1611");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker149() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1583ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1584");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1613
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1613() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1613");
            this.Manager.Comment("reaching state \'S1613\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp142;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp142);
            this.Manager.AddReturn(ReadConfigInfo, null, temp142);
            this.Manager.Comment("reaching state \'S1614\'");
            int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1613ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1613ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1613ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1613ReadConfigChecker3)));
            if ((temp144 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label127;
            }
            if ((temp144 == 1)) {
                this.Manager.Comment("reaching state \'S1615\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1616\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1617\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1618\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1619\'");
                int temp143 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker1)));
                if ((temp143 == 0)) {
                    ResilientHandleDurableTestCaseS1471();
                    goto label126;
                }
                if ((temp143 == 1)) {
                    ResilientHandleDurableTestCaseS1527();
                    goto label126;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker1)));
            label126:
;
                goto label127;
            }
            if ((temp144 == 2)) {
                this.Manager.Comment("reaching state \'S1620\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1621\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1622\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1623\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1624\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker2)));
                }
                goto label127;
            }
            if ((temp144 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1613ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1613ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1619");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1619");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1613ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1613IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1624");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1624");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1613ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1625
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1625() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1625");
            this.Manager.Comment("reaching state \'S1625\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp145;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp145);
            this.Manager.AddReturn(ReadConfigInfo, null, temp145);
            this.Manager.Comment("reaching state \'S1626\'");
            int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1625ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1625ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1625ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1625ReadConfigChecker3)));
            if ((temp149 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label131;
            }
            if ((temp149 == 1)) {
                this.Manager.Comment("reaching state \'S1627\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1628\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1629\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1630\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1631\'");
                int temp147 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker1)));
                if ((temp147 == 0)) {
                    ResilientHandleDurableTestCaseS1471();
                    goto label129;
                }
                if ((temp147 == 1)) {
                    this.Manager.Comment("reaching state \'S1632\'");
                    int temp146 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker150)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker151)));
                    if ((temp146 == 0)) {
                        this.Manager.Comment("reaching state \'S1633\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1634\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1635\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1636\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1637\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1638\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label128;
                    }
                    if ((temp146 == 1)) {
                        ResilientHandleDurableTestCaseS739();
                        goto label128;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1632\'.");
                label128:
;
                    goto label129;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker1)));
            label129:
;
                goto label131;
            }
            if ((temp149 == 2)) {
                this.Manager.Comment("reaching state \'S1639\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1640\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1641\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1642\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1643\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S1644\'");
                    int temp148 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker152)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker153)));
                    if ((temp148 == 0)) {
                        this.Manager.Comment("reaching state \'S1645\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1646\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1647\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1648\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1649\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1650\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label130;
                    }
                    if ((temp148 == 1)) {
                        ResilientHandleDurableTestCaseS277();
                        goto label130;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1644\'.");
                label130:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker2)));
                }
                goto label131;
            }
            if ((temp149 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label131;
            }
            throw new InvalidOperationException("never reached");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1625ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1625ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1631");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1631");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1631");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1631");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker150() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1637");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker151() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS739() {
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S740\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S741\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S742\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S743\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S744\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S743");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1625ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1625IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1643");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1643");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker152() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1625ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker153() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1625ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1651
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1651() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1651");
            this.Manager.Comment("reaching state \'S1651\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp150;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp150);
            this.Manager.AddReturn(ReadConfigInfo, null, temp150);
            this.Manager.Comment("reaching state \'S1652\'");
            int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1651ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1651ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1651ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1651ReadConfigChecker3)));
            if ((temp153 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label134;
            }
            if ((temp153 == 1)) {
                this.Manager.Comment("reaching state \'S1653\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1654\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1655\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1656\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1657\'");
                int temp152 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker1)));
                if ((temp152 == 0)) {
                    ResilientHandleDurableTestCaseS1527();
                    goto label133;
                }
                if ((temp152 == 1)) {
                    this.Manager.Comment("reaching state \'S1658\'");
                    int temp151 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker154)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker155)));
                    if ((temp151 == 0)) {
                        this.Manager.Comment("reaching state \'S1659\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1660\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1661\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1662\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1663\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1651ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1664\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1651ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label132;
                    }
                    if ((temp151 == 1)) {
                        ResilientHandleDurableTestCaseS746();
                        goto label132;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1658\'.");
                label132:
;
                    goto label133;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker1)));
            label133:
;
                goto label134;
            }
            if ((temp153 == 2)) {
                this.Manager.Comment("reaching state \'S1665\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1666\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1667\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1668\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1669\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker2)));
                }
                goto label134;
            }
            if ((temp153 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label134;
            }
            throw new InvalidOperationException("never reached");
        label134:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1651ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1652");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1651ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1652");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1657");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1657");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1657");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1657");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker154() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1651ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1663");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker155() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS746() {
            this.Manager.Comment("reaching state \'S746\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S747\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S748\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S749\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S750\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1651ReEstablishResilientOpenResponseChecker1))) != -1)) {
                ResilientHandleDurableTestCaseS751();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1651ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1651ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S750");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1651ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1652");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1651IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1669");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1669");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1651ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1652");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1670() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1670");
            this.Manager.Comment("reaching state \'S1670\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp154;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp154);
            this.Manager.AddReturn(ReadConfigInfo, null, temp154);
            this.Manager.Comment("reaching state \'S1671\'");
            int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1670ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1670ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1670ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1670ReadConfigChecker3)));
            if ((temp157 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label137;
            }
            if ((temp157 == 1)) {
                this.Manager.Comment("reaching state \'S1672\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1673\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1674\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1675\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1676\'");
                int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker2)));
                if ((temp156 == 0)) {
                    ResilientHandleDurableTestCaseS1471();
                    goto label136;
                }
                if ((temp156 == 1)) {
                    ResilientHandleDurableTestCaseS1590();
                    goto label136;
                }
                if ((temp156 == 2)) {
                    this.Manager.Comment("reaching state \'S1677\'");
                    int temp155 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker156)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker157)));
                    if ((temp155 == 0)) {
                        this.Manager.Comment("reaching state \'S1678\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1679\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1680\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1681\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1682\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1670ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS1494();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1670ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label135;
                    }
                    if ((temp155 == 1)) {
                        this.Manager.Comment("reaching state \'S1683\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1684\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1685\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1686\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1687\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1670ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1688\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1670ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label135;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1677\'.");
                label135:
;
                    goto label136;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker2)));
            label136:
;
                goto label137;
            }
            if ((temp157 == 2)) {
                this.Manager.Comment("reaching state \'S1689\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1690\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1691\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1692\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1693\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker3)));
                }
                goto label137;
            }
            if ((temp157 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label137;
            }
            throw new InvalidOperationException("never reached");
        label137:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1670ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1671");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1670ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1671");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1676");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1676");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1676");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker156() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1670ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1682");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker157() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1670ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1670ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1671");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1670IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1670ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1671");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1694() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1694");
            this.Manager.Comment("reaching state \'S1694\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp158;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp158);
            this.Manager.AddReturn(ReadConfigInfo, null, temp158);
            this.Manager.Comment("reaching state \'S1695\'");
            int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1694ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1694ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1694ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1694ReadConfigChecker3)));
            if ((temp162 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label141;
            }
            if ((temp162 == 1)) {
                this.Manager.Comment("reaching state \'S1696\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1697\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1698\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1699\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1700\'");
                int temp161 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker1)));
                if ((temp161 == 0)) {
                    this.Manager.Comment("reaching state \'S1701\'");
                    int temp159 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker158)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker159)));
                    if ((temp159 == 0)) {
                        this.Manager.Comment("reaching state \'S1702\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1703\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1704\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1705\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1706\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1707\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label138;
                    }
                    if ((temp159 == 1)) {
                        ResilientHandleDurableTestCaseS920();
                        goto label138;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1701\'.");
                label138:
;
                    goto label140;
                }
                if ((temp161 == 1)) {
                    this.Manager.Comment("reaching state \'S1708\'");
                    int temp160 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker160)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker161)));
                    if ((temp160 == 0)) {
                        this.Manager.Comment("reaching state \'S1709\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1710\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1711\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1712\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1713\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS1714();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label139;
                    }
                    if ((temp160 == 1)) {
                        ResilientHandleDurableTestCaseS1715();
                        goto label139;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1708\'.");
                label139:
;
                    goto label140;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker1)));
            label140:
;
                goto label141;
            }
            if ((temp162 == 2)) {
                this.Manager.Comment("reaching state \'S1721\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1722\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1723\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1724\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1725\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker2)));
                }
                goto label141;
            }
            if ((temp162 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label141;
            }
            throw new InvalidOperationException("never reached");
        label141:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1694ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1695");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1694ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1695");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1700");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1700");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker158() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1706");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker159() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS920() {
            this.Manager.Comment("reaching state \'S920\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S921\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S922\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S923\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S924\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker1))) != -1)) {
                ResilientHandleDurableTestCaseS925();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S924");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS925() {
            this.Manager.Comment("reaching state \'S925\'");
        }
        
        private void ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1700");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1700");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker160() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1713");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1714() {
            this.Manager.Comment("reaching state \'S1714\'");
        }
        
        private void PreConstraintChecker161() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1715() {
            this.Manager.Comment("reaching state \'S1715\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S1716\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S1717\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S1718\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S1719\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S1720\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1694ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S1719");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1694ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1695");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1694IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1725");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1725");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1694ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1695");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1726
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1726() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1726");
            this.Manager.Comment("reaching state \'S1726\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp163;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp163);
            this.Manager.AddReturn(ReadConfigInfo, null, temp163);
            this.Manager.Comment("reaching state \'S1727\'");
            int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1726ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1726ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1726ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1726ReadConfigChecker3)));
            if ((temp168 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label146;
            }
            if ((temp168 == 1)) {
                this.Manager.Comment("reaching state \'S1728\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1729\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1730\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1731\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1732\'");
                int temp167 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker2)));
                if ((temp167 == 0)) {
                    ResilientHandleDurableTestCaseS1733();
                    goto label145;
                }
                if ((temp167 == 1)) {
                    ResilientHandleDurableTestCaseS1744();
                    goto label145;
                }
                if ((temp167 == 2)) {
                    this.Manager.Comment("reaching state \'S1756\'");
                    int temp166 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker166)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker167)));
                    if ((temp166 == 0)) {
                        this.Manager.Comment("reaching state \'S1757\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1758\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1759\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1760\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1761\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S1762\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label144;
                    }
                    if ((temp166 == 1)) {
                        ResilientHandleDurableTestCaseS907();
                        goto label144;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1756\'.");
                label144:
;
                    goto label145;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker2)));
            label145:
;
                goto label146;
            }
            if ((temp168 == 2)) {
                this.Manager.Comment("reaching state \'S1763\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1764\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1765\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1766\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1767\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker3)));
                }
                goto label146;
            }
            if ((temp168 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label146;
            }
            throw new InvalidOperationException("never reached");
        label146:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1726ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1727");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1726ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1727");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1732");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1732");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1733() {
            this.Manager.Comment("reaching state \'S1733\'");
            int temp164 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker162)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker163)));
            if ((temp164 == 0)) {
                this.Manager.Comment("reaching state \'S1734\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1735\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1736\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1737\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1738\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS931();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker)));
                }
                goto label142;
            }
            if ((temp164 == 1)) {
                this.Manager.Comment("reaching state \'S1739\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1740\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1741\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1742\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1743\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS925();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker1)));
                }
                goto label142;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1733\'.");
        label142:
;
        }
        
        private void PreConstraintChecker162() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1738");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS931() {
            this.Manager.Comment("reaching state \'S931\'");
        }
        
        private void PreConstraintChecker163() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1743");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1732");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1732");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1744() {
            this.Manager.Comment("reaching state \'S1744\'");
            int temp165 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker164)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker165)));
            if ((temp165 == 0)) {
                this.Manager.Comment("reaching state \'S1745\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1746\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1747\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1748\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1749\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS1750();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker2)));
                }
                goto label143;
            }
            if ((temp165 == 1)) {
                this.Manager.Comment("reaching state \'S1751\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1752\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1753\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1754\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1755\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS905();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker3)));
                }
                goto label143;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1744\'.");
        label143:
;
        }
        
        private void PreConstraintChecker164() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1749");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1750() {
            this.Manager.Comment("reaching state \'S1750\'");
        }
        
        private void PreConstraintChecker165() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1755");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS905() {
            this.Manager.Comment("reaching state \'S905\'");
        }
        
        private void ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1732");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1732");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker166() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1761");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker167() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS907() {
            this.Manager.Comment("reaching state \'S907\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S908\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S909\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S910\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S911\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker5))) != -1)) {
                ResilientHandleDurableTestCaseS912();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker5)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1726ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S911");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS912() {
            this.Manager.Comment("reaching state \'S912\'");
        }
        
        private void ResilientHandleDurableTestCaseS1726ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1727");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1726IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1767");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1767");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1726ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1727");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1768
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1768() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1768");
            this.Manager.Comment("reaching state \'S1768\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp169;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp169);
            this.Manager.AddReturn(ReadConfigInfo, null, temp169);
            this.Manager.Comment("reaching state \'S1769\'");
            int temp173 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1768ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1768ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1768ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1768ReadConfigChecker3)));
            if ((temp173 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label150;
            }
            if ((temp173 == 1)) {
                this.Manager.Comment("reaching state \'S1770\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1771\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1772\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1773\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1774\'");
                int temp172 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker1)));
                if ((temp172 == 0)) {
                    ResilientHandleDurableTestCaseS1775();
                    goto label149;
                }
                if ((temp172 == 1)) {
                    this.Manager.Comment("reaching state \'S1781\'");
                    int temp171 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker170)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker171)));
                    if ((temp171 == 0)) {
                        this.Manager.Comment("reaching state \'S1782\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1783\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1784\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1785\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1786\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1787\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label148;
                    }
                    if ((temp171 == 1)) {
                        ResilientHandleDurableTestCaseS926();
                        goto label148;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1781\'.");
                label148:
;
                    goto label149;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker1)));
            label149:
;
                goto label150;
            }
            if ((temp173 == 2)) {
                this.Manager.Comment("reaching state \'S1788\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1789\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1790\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1791\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1792\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS191();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker2)));
                }
                goto label150;
            }
            if ((temp173 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label150;
            }
            throw new InvalidOperationException("never reached");
        label150:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1768ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1769");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1768ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1769");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1774");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1774");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1775() {
            this.Manager.Comment("reaching state \'S1775\'");
            int temp170 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker168)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker169)));
            if ((temp170 == 0)) {
                ResilientHandleDurableTestCaseS1715();
                goto label147;
            }
            if ((temp170 == 1)) {
                this.Manager.Comment("reaching state \'S1776\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1777\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1778\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1779\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1780\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS1714();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker)));
                }
                goto label147;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1775\'.");
        label147:
;
        }
        
        private void PreConstraintChecker168() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void PreConstraintChecker169() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1774");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1774");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker170() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1786");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker171() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS926() {
            this.Manager.Comment("reaching state \'S926\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S927\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S928\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S929\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S930\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker2))) != -1)) {
                ResilientHandleDurableTestCaseS931();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker2)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1768ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S930");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1768ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1769");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS1768IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of IoCtlResiliencyResponse, state S1792");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1792");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[TestInfo] The server only supports SMB 2.002."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : c.MaxSmbVersionSupported == 514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 514");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server only supports SMB 2.002.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1768ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1769");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1793
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1793() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1793");
            this.Manager.Comment("reaching state \'S1793\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp174;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp174);
            this.Manager.AddReturn(ReadConfigInfo, null, temp174);
            this.Manager.Comment("reaching state \'S1794\'");
            int temp181 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1793ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1793ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1793ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1793ReadConfigChecker3)));
            if ((temp181 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label157;
            }
            if ((temp181 == 1)) {
                this.Manager.Comment("reaching state \'S1795\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1796\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1797\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1798\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1799\'");
                int temp175 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker1)));
                if ((temp175 == 0)) {
                    ResilientHandleDurableTestCaseS1733();
                    goto label151;
                }
                if ((temp175 == 1)) {
                    ResilientHandleDurableTestCaseS1775();
                    goto label151;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker1)));
            label151:
;
                goto label157;
            }
            if ((temp181 == 2)) {
                this.Manager.Comment("reaching state \'S1800\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1801\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1802\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1803\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1804\'");
                int temp180 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker5)));
                if ((temp180 == 0)) {
                    ResilientHandleDurableTestCaseS1805();
                    goto label156;
                }
                if ((temp180 == 1)) {
                    this.Manager.Comment("reaching state \'S1817\'");
                    int temp177 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker174)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker175)));
                    if ((temp177 == 0)) {
                        this.Manager.Comment("reaching state \'S1818\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1819\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1820\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1821\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1822\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1823\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label153;
                    }
                    if ((temp177 == 1)) {
                        this.Manager.Comment("reaching state \'S1824\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1825\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1826\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1827\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1828\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S1829\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label153;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1817\'.");
                label153:
;
                    goto label156;
                }
                if ((temp180 == 2)) {
                    this.Manager.Comment("reaching state \'S1830\'");
                    int temp178 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker176)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker177)));
                    if ((temp178 == 0)) {
                        this.Manager.Comment("reaching state \'S1831\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1832\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1833\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1834\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1835\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S1836\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label154;
                    }
                    if ((temp178 == 1)) {
                        ResilientHandleDurableTestCaseS310();
                        goto label154;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1830\'.");
                label154:
;
                    goto label156;
                }
                if ((temp180 == 3)) {
                    this.Manager.Comment("reaching state \'S1837\'");
                    int temp179 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker178)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker179)));
                    if ((temp179 == 0)) {
                        this.Manager.Comment("reaching state \'S1838\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1839\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1840\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1841\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1842\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S1843\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label155;
                    }
                    if ((temp179 == 1)) {
                        ResilientHandleDurableTestCaseS321();
                        goto label155;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1837\'.");
                label155:
;
                    goto label156;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker5)));
            label156:
;
                goto label157;
            }
            if ((temp181 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label157;
            }
            throw new InvalidOperationException("never reached");
        label157:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1793ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1794");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1794");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1799");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1799");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1799");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1799");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1793ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1794");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1804");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1805() {
            this.Manager.Comment("reaching state \'S1805\'");
            int temp176 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker172)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker173)));
            if ((temp176 == 0)) {
                this.Manager.Comment("reaching state \'S1806\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1807\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1808\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1809\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1810\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS527();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker)));
                }
                goto label152;
            }
            if ((temp176 == 1)) {
                this.Manager.Comment("reaching state \'S1811\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S1812\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S1813\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S1814\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1815\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1816\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker1)));
                }
                goto label152;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1805\'.");
        label152:
;
        }
        
        private void PreConstraintChecker172() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1810");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS527() {
            this.Manager.Comment("reaching state \'S527\'");
        }
        
        private void PreConstraintChecker173() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1815");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1804");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker174() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1822");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker175() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1828");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1804");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker176() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1835");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker177() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1793IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1804");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker178() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1842");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker179() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1793ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1794");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1844
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1844() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1844");
            this.Manager.Comment("reaching state \'S1844\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp182;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp182);
            this.Manager.AddReturn(ReadConfigInfo, null, temp182);
            this.Manager.Comment("reaching state \'S1845\'");
            int temp187 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1844ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1844ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1844ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1844ReadConfigChecker3)));
            if ((temp187 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label162;
            }
            if ((temp187 == 1)) {
                this.Manager.Comment("reaching state \'S1846\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1847\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1848\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1849\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1850\'");
                int temp184 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker2)));
                if ((temp184 == 0)) {
                    ResilientHandleDurableTestCaseS1733();
                    goto label159;
                }
                if ((temp184 == 1)) {
                    ResilientHandleDurableTestCaseS1744();
                    goto label159;
                }
                if ((temp184 == 2)) {
                    ResilientHandleDurableTestCaseS1851();
                    goto label159;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker2)));
            label159:
;
                goto label162;
            }
            if ((temp187 == 2)) {
                this.Manager.Comment("reaching state \'S1862\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1863\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1864\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1865\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1866\'");
                int temp186 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker6)));
                if ((temp186 == 0)) {
                    ResilientHandleDurableTestCaseS121();
                    goto label161;
                }
                if ((temp186 == 1)) {
                    ResilientHandleDurableTestCaseS134();
                    goto label161;
                }
                if ((temp186 == 2)) {
                    ResilientHandleDurableTestCaseS1805();
                    goto label161;
                }
                if ((temp186 == 3)) {
                    ResilientHandleDurableTestCaseS1867();
                    goto label161;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker6)));
            label161:
;
                goto label162;
            }
            if ((temp187 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label162;
            }
            throw new InvalidOperationException("never reached");
        label162:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1844ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1845");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1844ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1845");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1850");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1850");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1850");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1850");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1850");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1850");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1851() {
            this.Manager.Comment("reaching state \'S1851\'");
            int temp183 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker180)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker181)));
            if ((temp183 == 0)) {
                this.Manager.Comment("reaching state \'S1852\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1853\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1854\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1855\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1856\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS918();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker)));
                }
                goto label158;
            }
            if ((temp183 == 1)) {
                this.Manager.Comment("reaching state \'S1857\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1858\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1859\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1860\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1861\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS912();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker1)));
                }
                goto label158;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1851\'.");
        label158:
;
        }
        
        private void PreConstraintChecker180() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1856");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS918() {
            this.Manager.Comment("reaching state \'S918\'");
        }
        
        private void PreConstraintChecker181() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1861");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1844ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1845");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1844IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1867() {
            this.Manager.Comment("reaching state \'S1867\'");
            int temp185 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker182)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker183)));
            if ((temp185 == 0)) {
                this.Manager.Comment("reaching state \'S1868\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1869\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1870\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1871\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1872\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS540();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker2)));
                }
                goto label160;
            }
            if ((temp185 == 1)) {
                ResilientHandleDurableTestCaseS541();
                goto label160;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1867\'.");
        label160:
;
        }
        
        private void PreConstraintChecker182() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1872");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS540() {
            this.Manager.Comment("reaching state \'S540\'");
        }
        
        private void PreConstraintChecker183() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS541() {
            this.Manager.Comment("reaching state \'S541\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S542\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S543\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S544\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S545\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S546\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1844ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S545");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1844ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1845");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1873
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1873() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1873");
            this.Manager.Comment("reaching state \'S1873\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp188;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp188);
            this.Manager.AddReturn(ReadConfigInfo, null, temp188);
            this.Manager.Comment("reaching state \'S1874\'");
            int temp196 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1873ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1873ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1873ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1873ReadConfigChecker3)));
            if ((temp196 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label170;
            }
            if ((temp196 == 1)) {
                this.Manager.Comment("reaching state \'S1875\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1876\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1877\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1878\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1879\'");
                int temp190 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker1)));
                if ((temp190 == 0)) {
                    ResilientHandleDurableTestCaseS1733();
                    goto label164;
                }
                if ((temp190 == 1)) {
                    this.Manager.Comment("reaching state \'S1880\'");
                    int temp189 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker184)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker185)));
                    if ((temp189 == 0)) {
                        this.Manager.Comment("reaching state \'S1881\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1882\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1883\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1884\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1885\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1886\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label163;
                    }
                    if ((temp189 == 1)) {
                        this.Manager.Comment("reaching state \'S1887\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1888\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1889\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1890\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1891\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1892\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label163;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1880\'.");
                label163:
;
                    goto label164;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker1)));
            label164:
;
                goto label170;
            }
            if ((temp196 == 2)) {
                this.Manager.Comment("reaching state \'S1893\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1894\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1895\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1896\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1897\'");
                int temp195 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker6)));
                if ((temp195 == 0)) {
                    ResilientHandleDurableTestCaseS134();
                    goto label169;
                }
                if ((temp195 == 1)) {
                    ResilientHandleDurableTestCaseS1898();
                    goto label169;
                }
                if ((temp195 == 2)) {
                    this.Manager.Comment("reaching state \'S1909\'");
                    int temp192 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker188)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker189)));
                    if ((temp192 == 0)) {
                        this.Manager.Comment("reaching state \'S1910\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1911\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1912\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1913\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1914\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S1915\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label166;
                    }
                    if ((temp192 == 1)) {
                        ResilientHandleDurableTestCaseS288();
                        goto label166;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1909\'.");
                label166:
;
                    goto label169;
                }
                if ((temp195 == 3)) {
                    this.Manager.Comment("reaching state \'S1916\'");
                    int temp193 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker190)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker191)));
                    if ((temp193 == 0)) {
                        this.Manager.Comment("reaching state \'S1917\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1918\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1919\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1920\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1921\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S1922\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label167;
                    }
                    if ((temp193 == 1)) {
                        ResilientHandleDurableTestCaseS299();
                        goto label167;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1916\'.");
                label167:
;
                    goto label169;
                }
                if ((temp195 == 4)) {
                    this.Manager.Comment("reaching state \'S1923\'");
                    int temp194 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker192)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker193)));
                    if ((temp194 == 0)) {
                        this.Manager.Comment("reaching state \'S1924\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1925\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1926\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1927\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1928\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker6))) != -1)) {
                            this.Manager.Comment("reaching state \'S1929\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker6)));
                        }
                        goto label168;
                    }
                    if ((temp194 == 1)) {
                        ResilientHandleDurableTestCaseS326();
                        goto label168;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1923\'.");
                label168:
;
                    goto label169;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker6)));
            label169:
;
                goto label170;
            }
            if ((temp196 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label170;
            }
            throw new InvalidOperationException("never reached");
        label170:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1873ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1874");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1874");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1879");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1879");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker184() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1885");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker185() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1873ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1874");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1897");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1897");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1898() {
            this.Manager.Comment("reaching state \'S1898\'");
            int temp191 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker186)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker187)));
            if ((temp191 == 0)) {
                this.Manager.Comment("reaching state \'S1899\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1900\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1901\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1902\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1903\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS337();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker2)));
                }
                goto label165;
            }
            if ((temp191 == 1)) {
                this.Manager.Comment("reaching state \'S1904\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S1905\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S1906\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S1907\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S1908\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS185();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker3)));
                }
                goto label165;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1898\'.");
        label165:
;
        }
        
        private void PreConstraintChecker186() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker187() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1897");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker188() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb21 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1914");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker189() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1897");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker190() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1921");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker191() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1873IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1897");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker192() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1928");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker193() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1873ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1874");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1930
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1930() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1930");
            this.Manager.Comment("reaching state \'S1930\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp197;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp197);
            this.Manager.AddReturn(ReadConfigInfo, null, temp197);
            this.Manager.Comment("reaching state \'S1931\'");
            int temp204 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1930ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1930ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1930ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1930ReadConfigChecker3)));
            if ((temp204 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label177;
            }
            if ((temp204 == 1)) {
                this.Manager.Comment("reaching state \'S1932\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1933\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1934\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1935\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1936\'");
                int temp200 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker2)));
                if ((temp200 == 0)) {
                    ResilientHandleDurableTestCaseS1733();
                    goto label173;
                }
                if ((temp200 == 1)) {
                    this.Manager.Comment("reaching state \'S1937\'");
                    int temp198 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker194)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker195)));
                    if ((temp198 == 0)) {
                        this.Manager.Comment("reaching state \'S1938\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1939\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1940\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1941\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1942\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1943\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label171;
                    }
                    if ((temp198 == 1)) {
                        ResilientHandleDurableTestCaseS913();
                        goto label171;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1937\'.");
                label171:
;
                    goto label173;
                }
                if ((temp200 == 2)) {
                    this.Manager.Comment("reaching state \'S1944\'");
                    int temp199 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker196)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker197)));
                    if ((temp199 == 0)) {
                        this.Manager.Comment("reaching state \'S1945\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1946\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1947\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1948\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1949\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1950\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label172;
                    }
                    if ((temp199 == 1)) {
                        this.Manager.Comment("reaching state \'S1951\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S1952\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S1953\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1954\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1955\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            ResilientHandleDurableTestCaseS1750();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label172;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1944\'.");
                label172:
;
                    goto label173;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker2)));
            label173:
;
                goto label177;
            }
            if ((temp204 == 2)) {
                this.Manager.Comment("reaching state \'S1956\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1957\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1958\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1959\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1960\'");
                int temp203 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker6)));
                if ((temp203 == 0)) {
                    ResilientHandleDurableTestCaseS121();
                    goto label176;
                }
                if ((temp203 == 1)) {
                    ResilientHandleDurableTestCaseS134();
                    goto label176;
                }
                if ((temp203 == 2)) {
                    this.Manager.Comment("reaching state \'S1961\'");
                    int temp201 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker198)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker199)));
                    if ((temp201 == 0)) {
                        this.Manager.Comment("reaching state \'S1962\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1963\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1964\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1965\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1966\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S1967\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label174;
                    }
                    if ((temp201 == 1)) {
                        ResilientHandleDurableTestCaseS528();
                        goto label174;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1961\'.");
                label174:
;
                    goto label176;
                }
                if ((temp203 == 3)) {
                    ResilientHandleDurableTestCaseS534();
                    goto label176;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker6)));
            label176:
;
                goto label177;
            }
            if ((temp204 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label177;
            }
            throw new InvalidOperationException("never reached");
        label177:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1930ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1931");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1930ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1931");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker194() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1942");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker195() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS913() {
            this.Manager.Comment("reaching state \'S913\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S914\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S915\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S916\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S917\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker1))) != -1)) {
                ResilientHandleDurableTestCaseS918();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S917");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker196() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker197() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1955");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1930ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1931");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1960");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1960");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1960");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker198() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1966");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker199() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS528() {
            this.Manager.Comment("reaching state \'S528\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S529\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S530\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S531\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S532\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker5))) != -1)) {
                this.Manager.Comment("reaching state \'S533\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker5)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S532");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1930IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1960");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS534() {
            this.Manager.Comment("reaching state \'S534\'");
            int temp202 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker200)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker201)));
            if ((temp202 == 0)) {
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S536\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S537\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S538\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S539\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker6))) != -1)) {
                    ResilientHandleDurableTestCaseS540();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker6)));
                }
                goto label175;
            }
            if ((temp202 == 1)) {
                ResilientHandleDurableTestCaseS541();
                goto label175;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S534\'.");
        label175:
;
        }
        
        private void PreConstraintChecker200() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1930ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S539");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker201() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1930ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1931");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1968
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1968() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1968");
            this.Manager.Comment("reaching state \'S1968\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp205;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp205);
            this.Manager.AddReturn(ReadConfigInfo, null, temp205);
            this.Manager.Comment("reaching state \'S1969\'");
            int temp209 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1968ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1968ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1968ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1968ReadConfigChecker3)));
            if ((temp209 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label181;
            }
            if ((temp209 == 1)) {
                this.Manager.Comment("reaching state \'S1970\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1971\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1972\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1973\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1974\'");
                int temp206 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker2)));
                if ((temp206 == 0)) {
                    ResilientHandleDurableTestCaseS1733();
                    goto label178;
                }
                if ((temp206 == 1)) {
                    ResilientHandleDurableTestCaseS1744();
                    goto label178;
                }
                if ((temp206 == 2)) {
                    ResilientHandleDurableTestCaseS1851();
                    goto label178;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker2)));
            label178:
;
                goto label181;
            }
            if ((temp209 == 2)) {
                this.Manager.Comment("reaching state \'S1975\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1976\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1977\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1978\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1979\'");
                int temp208 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker7)));
                if ((temp208 == 0)) {
                    ResilientHandleDurableTestCaseS121();
                    goto label180;
                }
                if ((temp208 == 1)) {
                    ResilientHandleDurableTestCaseS134();
                    goto label180;
                }
                if ((temp208 == 2)) {
                    ResilientHandleDurableTestCaseS147();
                    goto label180;
                }
                if ((temp208 == 3)) {
                    ResilientHandleDurableTestCaseS160();
                    goto label180;
                }
                if ((temp208 == 4)) {
                    this.Manager.Comment("reaching state \'S1980\'");
                    int temp207 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker202)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker203)));
                    if ((temp207 == 0)) {
                        this.Manager.Comment("reaching state \'S1981\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1982\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1983\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1984\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1985\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1968ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1986\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1968ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label179;
                    }
                    if ((temp207 == 1)) {
                        ResilientHandleDurableTestCaseS332();
                        goto label179;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1980\'.");
                label179:
;
                    goto label180;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker7)));
            label180:
;
                goto label181;
            }
            if ((temp209 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label181;
            }
            throw new InvalidOperationException("never reached");
        label181:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1968ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1969");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1968ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1969");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1974");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1974");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1974");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1974");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1974");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1974");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1968ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1969");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1979");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1979");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1979");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1979");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1979");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1979");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1979");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1979");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1968IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1979");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1979");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker202() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1968ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1985");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker203() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1968ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1969");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S1987
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS1987() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS1987");
            this.Manager.Comment("reaching state \'S1987\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp210;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp210);
            this.Manager.AddReturn(ReadConfigInfo, null, temp210);
            this.Manager.Comment("reaching state \'S1988\'");
            int temp217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1987ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1987ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1987ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS1987ReadConfigChecker3)));
            if ((temp217 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label188;
            }
            if ((temp217 == 1)) {
                this.Manager.Comment("reaching state \'S1989\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1990\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1991\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1992\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1993\'");
                int temp211 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker4)));
                if ((temp211 == 0)) {
                    ResilientHandleDurableTestCaseS121();
                    goto label182;
                }
                if ((temp211 == 1)) {
                    ResilientHandleDurableTestCaseS134();
                    goto label182;
                }
                if ((temp211 == 2)) {
                    ResilientHandleDurableTestCaseS147();
                    goto label182;
                }
                if ((temp211 == 3)) {
                    ResilientHandleDurableTestCaseS160();
                    goto label182;
                }
                if ((temp211 == 4)) {
                    ResilientHandleDurableTestCaseS1898();
                    goto label182;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker4)));
            label182:
;
                goto label188;
            }
            if ((temp217 == 2)) {
                this.Manager.Comment("reaching state \'S1994\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1995\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1996\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S1997\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1998\'");
                int temp216 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker9)));
                if ((temp216 == 0)) {
                    ResilientHandleDurableTestCaseS1999();
                    goto label187;
                }
                if ((temp216 == 1)) {
                    ResilientHandleDurableTestCaseS2010();
                    goto label187;
                }
                if ((temp216 == 2)) {
                    ResilientHandleDurableTestCaseS2021();
                    goto label187;
                }
                if ((temp216 == 3)) {
                    this.Manager.Comment("reaching state \'S2032\'");
                    int temp215 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker210)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker211)));
                    if ((temp215 == 0)) {
                        this.Manager.Comment("reaching state \'S2033\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2034\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2035\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2036\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2037\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker6))) != -1)) {
                            this.Manager.Comment("reaching state \'S2038\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker6)));
                        }
                        goto label186;
                    }
                    if ((temp215 == 1)) {
                        ResilientHandleDurableTestCaseS440();
                        goto label186;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2032\'.");
                label186:
;
                    goto label187;
                }
                if ((temp216 == 4)) {
                    ResilientHandleDurableTestCaseS64();
                    goto label187;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker9)));
            label187:
;
                goto label188;
            }
            if ((temp217 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label188;
            }
            throw new InvalidOperationException("never reached");
        label188:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS1987ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1988");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1988");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1993");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1993");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1993");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1993");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1993");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1988");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1998");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1999() {
            this.Manager.Comment("reaching state \'S1999\'");
            int temp212 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker204)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker205)));
            if ((temp212 == 0)) {
                this.Manager.Comment("reaching state \'S2000\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2001\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2002\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2003\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2004\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS438();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker)));
                }
                goto label183;
            }
            if ((temp212 == 1)) {
                this.Manager.Comment("reaching state \'S2005\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2006\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2007\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2008\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2009\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS115();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker1)));
                }
                goto label183;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1999\'.");
        label183:
;
        }
        
        private void PreConstraintChecker204() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker205() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2009");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1998");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2010() {
            this.Manager.Comment("reaching state \'S2010\'");
            int temp213 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker206)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker207)));
            if ((temp213 == 0)) {
                this.Manager.Comment("reaching state \'S2011\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2012\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2013\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2014\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2015\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    ResilientHandleDurableTestCaseS89();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker2)));
                }
                goto label184;
            }
            if ((temp213 == 1)) {
                this.Manager.Comment("reaching state \'S2016\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2017\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2018\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2019\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2020\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS456();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker3)));
                }
                goto label184;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2010\'.");
        label184:
;
        }
        
        private void PreConstraintChecker206() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2015");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker207() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2020");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1998");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2021() {
            this.Manager.Comment("reaching state \'S2021\'");
            int temp214 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker208)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker209)));
            if ((temp214 == 0)) {
                this.Manager.Comment("reaching state \'S2022\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2023\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2024\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2025\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2026\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker4))) != -1)) {
                    ResilientHandleDurableTestCaseS425();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker4)));
                }
                goto label185;
            }
            if ((temp214 == 1)) {
                this.Manager.Comment("reaching state \'S2027\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2028\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2029\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2030\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2031\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker5))) != -1)) {
                    ResilientHandleDurableTestCaseS431();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker5)));
                }
                goto label185;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2021\'.");
        label185:
;
        }
        
        private void PreConstraintChecker208() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2026");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker209() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2031");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1998");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker210() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS1987ReEstablishResilientOpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2037");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker211() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS1987IoCtlResiliencyResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1998");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS1987ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S1988");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S2039
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2039() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2039");
            this.Manager.Comment("reaching state \'S2039\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp218;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp218);
            this.Manager.AddReturn(ReadConfigInfo, null, temp218);
            this.Manager.Comment("reaching state \'S2040\'");
            int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2039ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2039ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2039ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2039ReadConfigChecker3)));
            if ((temp222 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label192;
            }
            if ((temp222 == 1)) {
                this.Manager.Comment("reaching state \'S2041\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2042\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2043\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2044\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2045\'");
                int temp219 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker4)));
                if ((temp219 == 0)) {
                    ResilientHandleDurableTestCaseS121();
                    goto label189;
                }
                if ((temp219 == 1)) {
                    ResilientHandleDurableTestCaseS134();
                    goto label189;
                }
                if ((temp219 == 2)) {
                    ResilientHandleDurableTestCaseS147();
                    goto label189;
                }
                if ((temp219 == 3)) {
                    ResilientHandleDurableTestCaseS160();
                    goto label189;
                }
                if ((temp219 == 4)) {
                    ResilientHandleDurableTestCaseS1898();
                    goto label189;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker4)));
            label189:
;
                goto label192;
            }
            if ((temp222 == 2)) {
                this.Manager.Comment("reaching state \'S2046\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2047\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2048\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2049\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2050\'");
                int temp221 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker9)));
                if ((temp221 == 0)) {
                    ResilientHandleDurableTestCaseS2010();
                    goto label191;
                }
                if ((temp221 == 1)) {
                    ResilientHandleDurableTestCaseS2021();
                    goto label191;
                }
                if ((temp221 == 2)) {
                    this.Manager.Comment("reaching state \'S2051\'");
                    int temp220 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker212)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker213)));
                    if ((temp220 == 0)) {
                        this.Manager.Comment("reaching state \'S2052\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2053\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2054\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2055\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2056\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2039ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S2057\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2039ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label190;
                    }
                    if ((temp220 == 1)) {
                        ResilientHandleDurableTestCaseS433();
                        goto label190;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2051\'.");
                label190:
;
                    goto label191;
                }
                if ((temp221 == 3)) {
                    ResilientHandleDurableTestCaseS51();
                    goto label191;
                }
                if ((temp221 == 4)) {
                    ResilientHandleDurableTestCaseS64();
                    goto label191;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker8)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker9)));
            label191:
;
                goto label192;
            }
            if ((temp222 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label192;
            }
            throw new InvalidOperationException("never reached");
        label192:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2039ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2040");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2039ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2040");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2045");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2045");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2045");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2045");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2045");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2040");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2050");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2050");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2050");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2050");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2050");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2050");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker212() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2039ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2056");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker213() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2050");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2050");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039IoCtlResiliencyResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2050");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2050");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2039ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2040");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS204() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS204");
            this.Manager.Comment("reaching state \'S204\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp223;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp223);
            this.Manager.AddReturn(ReadConfigInfo, null, temp223);
            this.Manager.Comment("reaching state \'S205\'");
            int temp230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS204ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS204ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS204ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS204ReadConfigChecker3)));
            if ((temp230 == 0)) {
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S210\'");
                int temp226 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker1)));
                if ((temp226 == 0)) {
                    this.Manager.Comment("reaching state \'S211\'");
                    int temp224 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker214)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker215)));
                    if ((temp224 == 0)) {
                        this.Manager.Comment("reaching state \'S212\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S213\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S214\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S215\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S216\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S217\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label193;
                    }
                    if ((temp224 == 1)) {
                        this.Manager.Comment("reaching state \'S218\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S219\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S220\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S221\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S222\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS223();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label193;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S211\'.");
                label193:
;
                    goto label195;
                }
                if ((temp226 == 1)) {
                    this.Manager.Comment("reaching state \'S224\'");
                    int temp225 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker216)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker217)));
                    if ((temp225 == 0)) {
                        ResilientHandleDurableTestCaseS225();
                        goto label194;
                    }
                    if ((temp225 == 1)) {
                        ResilientHandleDurableTestCaseS231();
                        goto label194;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S224\'.");
                label194:
;
                    goto label195;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker1)));
            label195:
;
                goto label199;
            }
            if ((temp230 == 1)) {
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S241\'");
                int temp229 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker3)));
                if ((temp229 == 0)) {
                    this.Manager.Comment("reaching state \'S242\'");
                    int temp227 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker218)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker219)));
                    if ((temp227 == 0)) {
                        this.Manager.Comment("reaching state \'S243\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S244\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S245\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S246\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S247\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS248();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label196;
                    }
                    if ((temp227 == 1)) {
                        ResilientHandleDurableTestCaseS249();
                        goto label196;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S242\'.");
                label196:
;
                    goto label198;
                }
                if ((temp229 == 1)) {
                    ResilientHandleDurableTestCaseS255();
                    goto label198;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker3)));
            label198:
;
                goto label199;
            }
            if ((temp230 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label199;
            }
            if ((temp230 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label199;
            }
            throw new InvalidOperationException("never reached");
        label199:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS204ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S205");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S210");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker214() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S216");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker215() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S222");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S210");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker216() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void PreConstraintChecker217() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS204ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S205");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S241");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker218() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S247");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS248() {
            this.Manager.Comment("reaching state \'S248\'");
        }
        
        private void PreConstraintChecker219() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS249() {
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S250\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S251\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S252\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S253\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S254\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS204IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S241");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS255() {
            this.Manager.Comment("reaching state \'S255\'");
            int temp228 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker220)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker221)));
            if ((temp228 == 0)) {
                ResilientHandleDurableTestCaseS256();
                goto label197;
            }
            if ((temp228 == 1)) {
                ResilientHandleDurableTestCaseS261();
                goto label197;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S255\'.");
        label197:
;
        }
        
        private void PreConstraintChecker220() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS256() {
            this.Manager.Comment("reaching state \'S256\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S258\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S260\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker4))) != -1)) {
                ResilientHandleDurableTestCaseS13();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker4)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S260");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker221() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS261() {
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                    " Open is to be preserved for reconnect. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                    "tate is equal to Held, and Open.IsDurable is TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S264\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S265\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker5))) != -1)) {
                ResilientHandleDurableTestCaseS19();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker5)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS204ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S265");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS204ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S205");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS204ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S205");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2058
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2058() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2058");
            this.Manager.Comment("reaching state \'S2058\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp231;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp231);
            this.Manager.AddReturn(ReadConfigInfo, null, temp231);
            this.Manager.Comment("reaching state \'S2059\'");
            int temp238 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2058ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2058ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2058ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2058ReadConfigChecker3)));
            if ((temp238 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label206;
            }
            if ((temp238 == 1)) {
                this.Manager.Comment("reaching state \'S2060\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2061\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2062\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2063\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2064\'");
                int temp233 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker3)));
                if ((temp233 == 0)) {
                    ResilientHandleDurableTestCaseS121();
                    goto label201;
                }
                if ((temp233 == 1)) {
                    ResilientHandleDurableTestCaseS1805();
                    goto label201;
                }
                if ((temp233 == 2)) {
                    ResilientHandleDurableTestCaseS1867();
                    goto label201;
                }
                if ((temp233 == 3)) {
                    this.Manager.Comment("reaching state \'S2065\'");
                    int temp232 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker222)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker223)));
                    if ((temp232 == 0)) {
                        this.Manager.Comment("reaching state \'S2066\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2067\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2068\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S2069\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2070\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S2071\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label200;
                    }
                    if ((temp232 == 1)) {
                        ResilientHandleDurableTestCaseS315();
                        goto label200;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2065\'.");
                label200:
;
                    goto label201;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker3)));
            label201:
;
                goto label206;
            }
            if ((temp238 == 2)) {
                this.Manager.Comment("reaching state \'S2072\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2073\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2074\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2075\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2076\'");
                int temp237 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker7)));
                if ((temp237 == 0)) {
                    ResilientHandleDurableTestCaseS1999();
                    goto label205;
                }
                if ((temp237 == 1)) {
                    ResilientHandleDurableTestCaseS2077();
                    goto label205;
                }
                if ((temp237 == 2)) {
                    ResilientHandleDurableTestCaseS2089();
                    goto label205;
                }
                if ((temp237 == 3)) {
                    this.Manager.Comment("reaching state \'S2102\'");
                    int temp236 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker228)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker229)));
                    if ((temp236 == 0)) {
                        this.Manager.Comment("reaching state \'S2103\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2104\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2105\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S2106\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2107\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S2108\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label204;
                    }
                    if ((temp236 == 1)) {
                        ResilientHandleDurableTestCaseS445();
                        goto label204;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2102\'.");
                label204:
;
                    goto label205;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker7)));
            label205:
;
                goto label206;
            }
            if ((temp238 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label206;
            }
            throw new InvalidOperationException("never reached");
        label206:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2058ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2059");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2059");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker222() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2070");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker223() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2059");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2076");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2076");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2076");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2076");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2077() {
            this.Manager.Comment("reaching state \'S2077\'");
            int temp234 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker224)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker225)));
            if ((temp234 == 0)) {
                this.Manager.Comment("reaching state \'S2078\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2079\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2080\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2081\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2082\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS831();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker1)));
                }
                goto label202;
            }
            if ((temp234 == 1)) {
                this.Manager.Comment("reaching state \'S2083\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S2084\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S2085\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S2086\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2087\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S2088\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker2)));
                }
                goto label202;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2077\'.");
        label202:
;
        }
        
        private void PreConstraintChecker224() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2082");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS831() {
            this.Manager.Comment("reaching state \'S831\'");
        }
        
        private void PreConstraintChecker225() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2087");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2076");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2076");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2089() {
            this.Manager.Comment("reaching state \'S2089\'");
            int temp235 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker226)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker227)));
            if ((temp235 == 0)) {
                this.Manager.Comment("reaching state \'S2090\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2091\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2092\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2093\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2094\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker3))) != -1)) {
                    ResilientHandleDurableTestCaseS2095();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker3)));
                }
                goto label203;
            }
            if ((temp235 == 1)) {
                this.Manager.Comment("reaching state \'S2096\'");
                this.Manager.Comment("executing step \'call LogOff()\'");
                this.IResilientHandleAdapterInstance.LogOff();
                this.Manager.Comment("reaching state \'S2097\'");
                this.Manager.Comment("checking step \'return LogOff\'");
                this.Manager.Comment("reaching state \'S2098\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                this.Manager.Comment("reaching state \'S2099\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2100\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker4))) != -1)) {
                    this.Manager.Comment("reaching state \'S2101\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker4)));
                }
                goto label203;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2089\'.");
        label203:
;
        }
        
        private void PreConstraintChecker226() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2094");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2095() {
            this.Manager.Comment("reaching state \'S2095\'");
        }
        
        private void PreConstraintChecker227() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2100");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2058IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2076");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2076");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker228() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker229() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2058ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2059");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S2109
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2109() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2109");
            this.Manager.Comment("reaching state \'S2109\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp239;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp239);
            this.Manager.AddReturn(ReadConfigInfo, null, temp239);
            this.Manager.Comment("reaching state \'S2110\'");
            int temp243 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2109ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2109ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2109ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2109ReadConfigChecker3)));
            if ((temp243 == 0)) {
                ResilientHandleDurableTestCaseS1508();
                goto label210;
            }
            if ((temp243 == 1)) {
                this.Manager.Comment("reaching state \'S2111\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2112\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2113\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2114\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2115\'");
                int temp240 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker2)));
                if ((temp240 == 0)) {
                    ResilientHandleDurableTestCaseS1301();
                    goto label207;
                }
                if ((temp240 == 1)) {
                    ResilientHandleDurableTestCaseS1369();
                    goto label207;
                }
                if ((temp240 == 2)) {
                    ResilientHandleDurableTestCaseS1413();
                    goto label207;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker2)));
            label207:
;
                goto label210;
            }
            if ((temp243 == 2)) {
                this.Manager.Comment("reaching state \'S2116\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2117\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2118\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2119\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2120\'");
                int temp242 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker6)));
                if ((temp242 == 0)) {
                    ResilientHandleDurableTestCaseS1999();
                    goto label209;
                }
                if ((temp242 == 1)) {
                    ResilientHandleDurableTestCaseS2089();
                    goto label209;
                }
                if ((temp242 == 2)) {
                    this.Manager.Comment("reaching state \'S2121\'");
                    int temp241 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker230)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker231)));
                    if ((temp241 == 0)) {
                        this.Manager.Comment("reaching state \'S2122\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2123\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2124\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S2125\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2126\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2109ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S2127\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2109ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label208;
                    }
                    if ((temp241 == 1)) {
                        ResilientHandleDurableTestCaseS832();
                        goto label208;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2121\'.");
                label208:
;
                    goto label209;
                }
                if ((temp242 == 3)) {
                    ResilientHandleDurableTestCaseS51();
                    goto label209;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker6)));
            label209:
;
                goto label210;
            }
            if ((temp243 == 3)) {
                ResilientHandleDurableTestCaseS266();
                goto label210;
            }
            throw new InvalidOperationException("never reached");
        label210:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2109ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2109ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2109ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker230() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2109ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker231() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS832() {
            this.Manager.Comment("reaching state \'S832\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S834\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S835\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S836\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2109ReEstablishResilientOpenResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S837\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2109ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS2109ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S836");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2109IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2109ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S2128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2128() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2128");
            this.Manager.Comment("reaching state \'S2128\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp244;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp244);
            this.Manager.AddReturn(ReadConfigInfo, null, temp244);
            this.Manager.Comment("reaching state \'S2129\'");
            int temp249 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2128ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2128ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2128ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2128ReadConfigChecker3)));
            if ((temp249 == 0)) {
                this.Manager.Comment("reaching state \'S2130\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2131\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2132\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2133\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2134\'");
                int temp246 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker4)));
                if ((temp246 == 0)) {
                    ResilientHandleDurableTestCaseS1999();
                    goto label212;
                }
                if ((temp246 == 1)) {
                    ResilientHandleDurableTestCaseS2010();
                    goto label212;
                }
                if ((temp246 == 2)) {
                    this.Manager.Comment("reaching state \'S2135\'");
                    int temp245 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker232)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker233)));
                    if ((temp245 == 0)) {
                        this.Manager.Comment("reaching state \'S2136\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2137\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2138\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2139\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2140\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S2141\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label211;
                    }
                    if ((temp245 == 1)) {
                        ResilientHandleDurableTestCaseS409();
                        goto label211;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2135\'.");
                label211:
;
                    goto label212;
                }
                if ((temp246 == 3)) {
                    ResilientHandleDurableTestCaseS419();
                    goto label212;
                }
                if ((temp246 == 4)) {
                    ResilientHandleDurableTestCaseS51();
                    goto label212;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker4)));
            label212:
;
                goto label215;
            }
            if ((temp249 == 1)) {
                this.Manager.Comment("reaching state \'S2142\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2143\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2144\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2145\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2146\'");
                int temp248 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker6)));
                if ((temp248 == 0)) {
                    this.Manager.Comment("reaching state \'S2147\'");
                    int temp247 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker234)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker235)));
                    if ((temp247 == 0)) {
                        this.Manager.Comment("reaching state \'S2148\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2149\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2150\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2151\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2152\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S2153\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label213;
                    }
                    if ((temp247 == 1)) {
                        this.Manager.Comment("reaching state \'S2154\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2155\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2156\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S2157\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2158\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S2159\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label213;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2147\'.");
                label213:
;
                    goto label214;
                }
                if ((temp248 == 1)) {
                    ResilientHandleDurableTestCaseS7();
                    goto label214;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker6)));
            label214:
;
                goto label215;
            }
            if ((temp249 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label215;
            }
            if ((temp249 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label215;
            }
            throw new InvalidOperationException("never reached");
        label215:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2128ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2129");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker232() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2140");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker233() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2128ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2129");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker234() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2152");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker235() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2128ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2128IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2128ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2129");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2128ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2129");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2160() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2160");
            this.Manager.Comment("reaching state \'S2160\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp250;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp250);
            this.Manager.AddReturn(ReadConfigInfo, null, temp250);
            this.Manager.Comment("reaching state \'S2161\'");
            int temp255 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2160ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2160ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2160ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2160ReadConfigChecker3)));
            if ((temp255 == 0)) {
                this.Manager.Comment("reaching state \'S2162\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2163\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2164\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2165\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2166\'");
                int temp251 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker4)));
                if ((temp251 == 0)) {
                    ResilientHandleDurableTestCaseS1999();
                    goto label216;
                }
                if ((temp251 == 1)) {
                    ResilientHandleDurableTestCaseS2010();
                    goto label216;
                }
                if ((temp251 == 2)) {
                    ResilientHandleDurableTestCaseS2021();
                    goto label216;
                }
                if ((temp251 == 3)) {
                    ResilientHandleDurableTestCaseS51();
                    goto label216;
                }
                if ((temp251 == 4)) {
                    ResilientHandleDurableTestCaseS64();
                    goto label216;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker4)));
            label216:
;
                goto label220;
            }
            if ((temp255 == 1)) {
                this.Manager.Comment("reaching state \'S2167\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2168\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2169\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2170\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2171\'");
                int temp254 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker6)));
                if ((temp254 == 0)) {
                    ResilientHandleDurableTestCaseS2172();
                    goto label219;
                }
                if ((temp254 == 1)) {
                    this.Manager.Comment("reaching state \'S2178\'");
                    int temp253 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker238)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker239)));
                    if ((temp253 == 0)) {
                        this.Manager.Comment("reaching state \'S2179\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2180\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2181\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S2182\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2183\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2160ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S2184\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2160ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label218;
                    }
                    if ((temp253 == 1)) {
                        ResilientHandleDurableTestCaseS261();
                        goto label218;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2178\'.");
                label218:
;
                    goto label219;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker6)));
            label219:
;
                goto label220;
            }
            if ((temp255 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label220;
            }
            if ((temp255 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label220;
            }
            throw new InvalidOperationException("never reached");
        label220:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2160ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2160ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2171");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2172() {
            this.Manager.Comment("reaching state \'S2172\'");
            int temp252 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker236)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker237)));
            if ((temp252 == 0)) {
                this.Manager.Comment("reaching state \'S2173\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S2174\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S2175\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S2176\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S2177\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2160ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS248();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2160ReEstablishResilientOpenResponseChecker)));
                }
                goto label217;
            }
            if ((temp252 == 1)) {
                ResilientHandleDurableTestCaseS249();
                goto label217;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2172\'.");
        label217:
;
        }
        
        private void PreConstraintChecker236() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2160ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker237() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2160IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2171");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker238() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2160ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker239() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2160ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2160ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2161");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2185
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2185() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2185");
            this.Manager.Comment("reaching state \'S2185\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp256;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp256);
            this.Manager.AddReturn(ReadConfigInfo, null, temp256);
            this.Manager.Comment("reaching state \'S2186\'");
            int temp261 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2185ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2185ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2185ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2185ReadConfigChecker3)));
            if ((temp261 == 0)) {
                this.Manager.Comment("reaching state \'S2187\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2188\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2189\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S2190\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2191\'");
                int temp258 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker3)));
                if ((temp258 == 0)) {
                    ResilientHandleDurableTestCaseS1999();
                    goto label222;
                }
                if ((temp258 == 1)) {
                    ResilientHandleDurableTestCaseS2077();
                    goto label222;
                }
                if ((temp258 == 2)) {
                    this.Manager.Comment("reaching state \'S2192\'");
                    int temp257 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker240)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker241)));
                    if ((temp257 == 0)) {
                        this.Manager.Comment("reaching state \'S2193\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S2194\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S2195\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2196\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2197\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS2095();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label221;
                    }
                    if ((temp257 == 1)) {
                        ResilientHandleDurableTestCaseS819();
                        goto label221;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2192\'.");
                label221:
;
                    goto label222;
                }
                if ((temp258 == 3)) {
                    ResilientHandleDurableTestCaseS51();
                    goto label222;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker3)));
            label222:
;
                goto label225;
            }
            if ((temp261 == 1)) {
                this.Manager.Comment("reaching state \'S2198\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2199\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2200\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S2201\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2202\'");
                int temp260 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker5)));
                if ((temp260 == 0)) {
                    ResilientHandleDurableTestCaseS2172();
                    goto label224;
                }
                if ((temp260 == 1)) {
                    this.Manager.Comment("reaching state \'S2203\'");
                    int temp259 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker242)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker243)));
                    if ((temp259 == 0)) {
                        this.Manager.Comment("reaching state \'S2204\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2205\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2206\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2207\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2208\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S2209\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label223;
                    }
                    if ((temp259 == 1)) {
                        ResilientHandleDurableTestCaseS256();
                        goto label223;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2203\'.");
                label223:
;
                    goto label224;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker5)));
            label224:
;
                goto label225;
            }
            if ((temp261 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label225;
            }
            if ((temp261 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label225;
            }
            throw new InvalidOperationException("never reached");
        label225:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2185ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker240() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2197");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker241() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS819() {
            this.Manager.Comment("reaching state \'S819\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S820\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S821\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S822\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S823\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S824\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker1)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S823");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2185ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2202");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2185IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2202");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker242() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2185ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2208");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker243() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2185ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2185ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2210() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2210");
            this.Manager.Comment("reaching state \'S2210\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp262;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp262);
            this.Manager.AddReturn(ReadConfigInfo, null, temp262);
            this.Manager.Comment("reaching state \'S2211\'");
            int temp266 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2210ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2210ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2210ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2210ReadConfigChecker3)));
            if ((temp266 == 0)) {
                this.Manager.Comment("reaching state \'S2212\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2213\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2214\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ValidTim" +
                        "eout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S2215\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2216\'");
                int temp263 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker3)));
                if ((temp263 == 0)) {
                    ResilientHandleDurableTestCaseS1999();
                    goto label226;
                }
                if ((temp263 == 1)) {
                    ResilientHandleDurableTestCaseS2077();
                    goto label226;
                }
                if ((temp263 == 2)) {
                    ResilientHandleDurableTestCaseS2089();
                    goto label226;
                }
                if ((temp263 == 3)) {
                    ResilientHandleDurableTestCaseS51();
                    goto label226;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker3)));
            label226:
;
                goto label229;
            }
            if ((temp266 == 1)) {
                this.Manager.Comment("reaching state \'S2217\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2218\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2219\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2220\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2221\'");
                int temp265 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker6)));
                if ((temp265 == 0)) {
                    this.Manager.Comment("reaching state \'S2222\'");
                    int temp264 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker244)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker245)));
                    if ((temp264 == 0)) {
                        this.Manager.Comment("reaching state \'S2223\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S2224\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S2225\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2226\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2227\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2210ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS32();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2210ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label227;
                    }
                    if ((temp264 == 1)) {
                        this.Manager.Comment("reaching state \'S2228\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2229\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2230\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S2231\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2232\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2210ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S2233\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2210ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label227;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2222\'.");
                label227:
;
                    goto label228;
                }
                if ((temp265 == 1)) {
                    ResilientHandleDurableTestCaseS33();
                    goto label228;
                }
                if ((temp265 == 2)) {
                    ResilientHandleDurableTestCaseS7();
                    goto label228;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker6)));
            label228:
;
                goto label229;
            }
            if ((temp266 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label229;
            }
            if ((temp266 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label229;
            }
            throw new InvalidOperationException("never reached");
        label229:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2210ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2211");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2211");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker244() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2210ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2227");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker245() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2210ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2211");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2210ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2211");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2234() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2234");
            this.Manager.Comment("reaching state \'S2234\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp267;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp267);
            this.Manager.AddReturn(ReadConfigInfo, null, temp267);
            this.Manager.Comment("reaching state \'S2235\'");
            int temp271 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2234ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2234ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2234ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2234ReadConfigChecker3)));
            if ((temp271 == 0)) {
                this.Manager.Comment("reaching state \'S2236\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2237\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2238\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2239\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2240\'");
                int temp268 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker2)));
                if ((temp268 == 0)) {
                    ResilientHandleDurableTestCaseS1065();
                    goto label230;
                }
                if ((temp268 == 1)) {
                    ResilientHandleDurableTestCaseS1167();
                    goto label230;
                }
                if ((temp268 == 2)) {
                    ResilientHandleDurableTestCaseS972();
                    goto label230;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker2)));
            label230:
;
                goto label233;
            }
            if ((temp271 == 1)) {
                this.Manager.Comment("reaching state \'S2241\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2242\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2243\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S2244\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2245\'");
                int temp270 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker5)));
                if ((temp270 == 0)) {
                    ResilientHandleDurableTestCaseS20();
                    goto label232;
                }
                if ((temp270 == 1)) {
                    this.Manager.Comment("reaching state \'S2246\'");
                    int temp269 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker246)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker247)));
                    if ((temp269 == 0)) {
                        this.Manager.Comment("reaching state \'S2247\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S2248\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S2249\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2250\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2251\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2234ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S2252\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2234ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label231;
                    }
                    if ((temp269 == 1)) {
                        this.Manager.Comment("reaching state \'S2253\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S2254\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S2255\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2256\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2257\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2234ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS39();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2234ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label231;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2246\'.");
                label231:
;
                    goto label232;
                }
                if ((temp270 == 2)) {
                    ResilientHandleDurableTestCaseS7();
                    goto label232;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker5)));
            label232:
;
                goto label233;
            }
            if ((temp271 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label233;
            }
            if ((temp271 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label233;
            }
            throw new InvalidOperationException("never reached");
        label233:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2234ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2235");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2234ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2235");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2245");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2245");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker246() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2234ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2251");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker247() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS2234ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2257");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2234IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2245");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2234ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2235");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2234ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2235");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2258() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2258");
            this.Manager.Comment("reaching state \'S2258\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp272;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp272);
            this.Manager.AddReturn(ReadConfigInfo, null, temp272);
            this.Manager.Comment("reaching state \'S2259\'");
            int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2258ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2258ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2258ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2258ReadConfigChecker3)));
            if ((temp275 == 0)) {
                this.Manager.Comment("reaching state \'S2260\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2261\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2262\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2263\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2264\'");
                int temp273 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker2)));
                if ((temp273 == 0)) {
                    ResilientHandleDurableTestCaseS1471();
                    goto label234;
                }
                if ((temp273 == 1)) {
                    ResilientHandleDurableTestCaseS1482();
                    goto label234;
                }
                if ((temp273 == 2)) {
                    ResilientHandleDurableTestCaseS1590();
                    goto label234;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker2)));
            label234:
;
                goto label236;
            }
            if ((temp275 == 1)) {
                this.Manager.Comment("reaching state \'S2265\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2266\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2267\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2268\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2269\'");
                int temp274 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker5)));
                if ((temp274 == 0)) {
                    ResilientHandleDurableTestCaseS20();
                    goto label235;
                }
                if ((temp274 == 1)) {
                    ResilientHandleDurableTestCaseS33();
                    goto label235;
                }
                if ((temp274 == 2)) {
                    ResilientHandleDurableTestCaseS7();
                    goto label235;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker5)));
            label235:
;
                goto label236;
            }
            if ((temp275 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label236;
            }
            if ((temp275 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label236;
            }
            throw new InvalidOperationException("never reached");
        label236:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2258ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2259");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2258ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2259");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2269");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2269");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2269");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2269");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2258IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2269");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2269");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2258ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2259");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2258ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2259");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2270() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2270");
            this.Manager.Comment("reaching state \'S2270\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp276;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp276);
            this.Manager.AddReturn(ReadConfigInfo, null, temp276);
            this.Manager.Comment("reaching state \'S2271\'");
            int temp279 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2270ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2270ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2270ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2270ReadConfigChecker3)));
            if ((temp279 == 0)) {
                this.Manager.Comment("reaching state \'S2272\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2273\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2274\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S2275\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2276\'");
                int temp277 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker2)));
                if ((temp277 == 0)) {
                    ResilientHandleDurableTestCaseS1733();
                    goto label237;
                }
                if ((temp277 == 1)) {
                    ResilientHandleDurableTestCaseS1744();
                    goto label237;
                }
                if ((temp277 == 2)) {
                    ResilientHandleDurableTestCaseS1851();
                    goto label237;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker2)));
            label237:
;
                goto label239;
            }
            if ((temp279 == 1)) {
                this.Manager.Comment("reaching state \'S2277\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2278\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2279\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S2280\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2281\'");
                int temp278 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker4)));
                if ((temp278 == 0)) {
                    ResilientHandleDurableTestCaseS2172();
                    goto label238;
                }
                if ((temp278 == 1)) {
                    ResilientHandleDurableTestCaseS7();
                    goto label238;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker4)));
            label238:
;
                goto label239;
            }
            if ((temp279 == 2)) {
                ResilientHandleDurableTestCaseS266();
                goto label239;
            }
            if ((temp279 == 3)) {
                ResilientHandleDurableTestCaseS282();
                goto label239;
            }
            throw new InvalidOperationException("never reached");
        label239:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2270ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2271");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2276");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2276");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2276");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2270ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2271");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S2281");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2270IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2281");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2270ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2271");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2270ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2271");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S2282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2282() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2282");
            this.Manager.Comment("reaching state \'S2282\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp280;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp280);
            this.Manager.AddReturn(ReadConfigInfo, null, temp280);
            this.Manager.Comment("reaching state \'S2283\'");
            int temp282 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2282ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2282ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2282ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2282ReadConfigChecker3)));
            if ((temp282 == 0)) {
                this.Manager.Comment("reaching state \'S2284\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2285\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2286\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,InvalidT" +
                        "imeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2287\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2288\'");
                int temp281 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker2)));
                if ((temp281 == 0)) {
                    ResilientHandleDurableTestCaseS20();
                    goto label240;
                }
                if ((temp281 == 1)) {
                    ResilientHandleDurableTestCaseS33();
                    goto label240;
                }
                if ((temp281 == 2)) {
                    ResilientHandleDurableTestCaseS7();
                    goto label240;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker2)));
            label240:
;
                goto label241;
            }
            if ((temp282 == 1)) {
                ResilientHandleDurableTestCaseS266();
                goto label241;
            }
            if ((temp282 == 2)) {
                ResilientHandleDurableTestCaseS282();
                goto label241;
            }
            if ((temp282 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label241;
            }
            throw new InvalidOperationException("never reached");
        label241:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2282ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2283");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2282IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2282ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2283");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2282ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2283");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS2282ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2283");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S2289
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2289() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2289");
            this.Manager.Comment("reaching state \'S2289\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp283;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp283);
            this.Manager.AddReturn(ReadConfigInfo, null, temp283);
            this.Manager.Comment("reaching state \'S2290\'");
            int temp286 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2289ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2289ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2289ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2289ReadConfigChecker3)));
            if ((temp286 == 0)) {
                this.Manager.Comment("reaching state \'S2291\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2292\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2293\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2294\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2295\'");
                int temp285 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker4)));
                if ((temp285 == 0)) {
                    ResilientHandleDurableTestCaseS763();
                    goto label243;
                }
                if ((temp285 == 1)) {
                    ResilientHandleDurableTestCaseS787();
                    goto label243;
                }
                if ((temp285 == 2)) {
                    ResilientHandleDurableTestCaseS843();
                    goto label243;
                }
                if ((temp285 == 3)) {
                    ResilientHandleDurableTestCaseS855();
                    goto label243;
                }
                if ((temp285 == 4)) {
                    ResilientHandleDurableTestCaseS937();
                    goto label243;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker4)));
            label243:
;
                goto label244;
            }
            if ((temp286 == 1)) {
                ResilientHandleDurableTestCaseS266();
                goto label244;
            }
            if ((temp286 == 2)) {
                ResilientHandleDurableTestCaseS282();
                goto label244;
            }
            if ((temp286 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label244;
            }
            throw new InvalidOperationException("never reached");
        label244:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2289ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S2295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS855() {
            this.Manager.Comment("reaching state \'S855\'");
            int temp284 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker248)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker249)));
            if ((temp284 == 0)) {
                this.Manager.Comment("reaching state \'S856\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S857\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S858\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S859\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S860\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2289ReEstablishResilientOpenResponseChecker))) != -1)) {
                    ResilientHandleDurableTestCaseS680();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2289ReEstablishResilientOpenResponseChecker)));
                }
                goto label242;
            }
            if ((temp284 == 1)) {
                this.Manager.Comment("reaching state \'S861\'");
                this.Manager.Comment("executing step \'call Disconnect()\'");
                this.IResilientHandleAdapterInstance.Disconnect();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                        " Open is to be preserved for reconnect. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                        "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                this.Manager.Comment("reaching state \'S862\'");
                this.Manager.Comment("checking step \'return Disconnect\'");
                this.Manager.Comment("reaching state \'S863\'");
                this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                this.Manager.Comment("reaching state \'S864\'");
                this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                this.Manager.Comment("reaching state \'S865\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2289ReEstablishResilientOpenResponseChecker1))) != -1)) {
                    ResilientHandleDurableTestCaseS686();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2289ReEstablishResilientOpenResponseChecker1)));
                }
                goto label242;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S855\'.");
        label242:
;
        }
        
        private void PreConstraintChecker248() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2289ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S860");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker249() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2289ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2289IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2289ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2289ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS2289ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S2296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS2296() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS2296");
            this.Manager.Comment("reaching state \'S2296\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp287;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp287);
            this.Manager.AddReturn(ReadConfigInfo, null, temp287);
            this.Manager.Comment("reaching state \'S2297\'");
            int temp290 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2296ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2296ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2296ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS2296ReadConfigChecker3)));
            if ((temp290 == 0)) {
                this.Manager.Comment("reaching state \'S2298\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S2299\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S2300\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S2301\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S2302\'");
                int temp289 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker2)));
                if ((temp289 == 0)) {
                    ResilientHandleDurableTestCaseS1203();
                    goto label246;
                }
                if ((temp289 == 1)) {
                    ResilientHandleDurableTestCaseS1216();
                    goto label246;
                }
                if ((temp289 == 2)) {
                    this.Manager.Comment("reaching state \'S2303\'");
                    int temp288 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker250)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker251)));
                    if ((temp288 == 0)) {
                        this.Manager.Comment("reaching state \'S2304\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S2305\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S2306\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S2307\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2308\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2296ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS351();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2296ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label245;
                    }
                    if ((temp288 == 1)) {
                        this.Manager.Comment("reaching state \'S2309\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S2310\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S2311\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S2312\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S2313\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2296ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS1196();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS2296ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label245;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S2303\'.");
                label245:
;
                    goto label246;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker2)));
            label246:
;
                goto label247;
            }
            if ((temp290 == 1)) {
                ResilientHandleDurableTestCaseS266();
                goto label247;
            }
            if ((temp290 == 2)) {
                ResilientHandleDurableTestCaseS282();
                goto label247;
            }
            if ((temp290 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label247;
            }
            throw new InvalidOperationException("never reached");
        label247:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS2296ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2297");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2302");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2302");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S2302");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2302");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2296IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S2302");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S2302");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is not smaller than the size of the NETWORK_RESILIENCY_REQ" +
                    "UEST request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker250() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS2296ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S2308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS351() {
            this.Manager.Comment("reaching state \'S351\'");
        }
        
        private void PreConstraintChecker251() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2296ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S2313");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS2296ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2297");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS2296ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2297");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS2296ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S2297");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S338
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS338() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS338");
            this.Manager.Comment("reaching state \'S338\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp291;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp291);
            this.Manager.AddReturn(ReadConfigInfo, null, temp291);
            this.Manager.Comment("reaching state \'S339\'");
            int temp299 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS338ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS338ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS338ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS338ReadConfigChecker3)));
            if ((temp299 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label255;
            }
            if ((temp299 == 1)) {
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S344\'");
                int temp295 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker2)));
                if ((temp295 == 0)) {
                    this.Manager.Comment("reaching state \'S345\'");
                    int temp292 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker252)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker253)));
                    if ((temp292 == 0)) {
                        this.Manager.Comment("reaching state \'S346\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S347\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S348\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S349\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S350\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS351();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label248;
                    }
                    if ((temp292 == 1)) {
                        this.Manager.Comment("reaching state \'S352\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S353\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S354\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S355\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S356\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S357\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label248;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S345\'.");
                label248:
;
                    goto label251;
                }
                if ((temp295 == 1)) {
                    this.Manager.Comment("reaching state \'S358\'");
                    int temp293 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker254)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker255)));
                    if ((temp293 == 0)) {
                        this.Manager.Comment("reaching state \'S359\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S360\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S361\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S362\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S363\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS364();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label249;
                    }
                    if ((temp293 == 1)) {
                        this.Manager.Comment("reaching state \'S365\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S366\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S367\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S368\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S369\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S370\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label249;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S358\'.");
                label249:
;
                    goto label251;
                }
                if ((temp295 == 2)) {
                    ResilientHandleDurableTestCaseS371();
                    goto label251;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker2)));
            label251:
;
                goto label255;
            }
            if ((temp299 == 2)) {
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S388\'");
                int temp298 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker7)));
                if ((temp298 == 0)) {
                    ResilientHandleDurableTestCaseS309();
                    goto label254;
                }
                if ((temp298 == 1)) {
                    ResilientHandleDurableTestCaseS320();
                    goto label254;
                }
                if ((temp298 == 2)) {
                    ResilientHandleDurableTestCaseS331();
                    goto label254;
                }
                if ((temp298 == 3)) {
                    this.Manager.Comment("reaching state \'S389\'");
                    int temp296 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker258)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker259)));
                    if ((temp296 == 0)) {
                        ResilientHandleDurableTestCaseS293();
                        goto label252;
                    }
                    if ((temp296 == 1)) {
                        this.Manager.Comment("reaching state \'S390\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S391\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S392\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S393\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S394\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S395\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label252;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S389\'.");
                label252:
;
                    goto label254;
                }
                if ((temp298 == 4)) {
                    this.Manager.Comment("reaching state \'S396\'");
                    int temp297 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker260)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker261)));
                    if ((temp297 == 0)) {
                        ResilientHandleDurableTestCaseS304();
                        goto label253;
                    }
                    if ((temp297 == 1)) {
                        this.Manager.Comment("reaching state \'S397\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S398\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S399\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S400\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S401\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S402\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label253;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S396\'.");
                label253:
;
                    goto label254;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker7)));
            label254:
;
                goto label255;
            }
            if ((temp299 == 3)) {
                ResilientHandleDurableTestCaseS403();
                goto label255;
            }
            throw new InvalidOperationException("never reached");
        label255:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS338ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S339");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS338ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S339");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker252() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S350");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker253() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S356");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker254() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S363");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker255() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S369");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS371() {
            this.Manager.Comment("reaching state \'S371\'");
            int temp294 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker256)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker257)));
            if ((temp294 == 0)) {
                ResilientHandleDurableTestCaseS372();
                goto label250;
            }
            if ((temp294 == 1)) {
                ResilientHandleDurableTestCaseS378();
                goto label250;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S371\'.");
        label250:
;
        }
        
        private void PreConstraintChecker256() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void PreConstraintChecker257() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS338ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S339");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S388");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S388");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S388");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S388");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker258() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb21 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker259() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S388");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker260() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker261() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS338ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S401");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS338ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S339");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S457
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS457() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS457");
            this.Manager.Comment("reaching state \'S457\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp300;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp300);
            this.Manager.AddReturn(ReadConfigInfo, null, temp300);
            this.Manager.Comment("reaching state \'S458\'");
            int temp306 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS457ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS457ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS457ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS457ReadConfigChecker3)));
            if ((temp306 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label261;
            }
            if ((temp306 == 1)) {
                ResilientHandleDurableTestCaseS403();
                goto label261;
            }
            if ((temp306 == 2)) {
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S461\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S462\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S463\'");
                int temp303 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker3)));
                if ((temp303 == 0)) {
                    this.Manager.Comment("reaching state \'S464\'");
                    int temp301 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker262)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker263)));
                    if ((temp301 == 0)) {
                        this.Manager.Comment("reaching state \'S465\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S466\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S467\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S468\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S469\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S470\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label256;
                    }
                    if ((temp301 == 1)) {
                        this.Manager.Comment("reaching state \'S471\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S472\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S473\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S474\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S475\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S476\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label256;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S464\'.");
                label256:
;
                    goto label258;
                }
                if ((temp303 == 1)) {
                    this.Manager.Comment("reaching state \'S477\'");
                    int temp302 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker264)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker265)));
                    if ((temp302 == 0)) {
                        this.Manager.Comment("reaching state \'S478\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S479\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S480\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S481\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S482\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS483();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label257;
                    }
                    if ((temp302 == 1)) {
                        ResilientHandleDurableTestCaseS484();
                        goto label257;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S477\'.");
                label257:
;
                    goto label258;
                }
                if ((temp303 == 2)) {
                    ResilientHandleDurableTestCaseS490();
                    goto label258;
                }
                if ((temp303 == 3)) {
                    ResilientHandleDurableTestCaseS503();
                    goto label258;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker3)));
            label258:
;
                goto label261;
            }
            if ((temp306 == 3)) {
                this.Manager.Comment("reaching state \'S516\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S517\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S520\'");
                int temp305 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker7)));
                if ((temp305 == 0)) {
                    ResilientHandleDurableTestCaseS309();
                    goto label260;
                }
                if ((temp305 == 1)) {
                    ResilientHandleDurableTestCaseS320();
                    goto label260;
                }
                if ((temp305 == 2)) {
                    this.Manager.Comment("reaching state \'S521\'");
                    int temp304 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker266)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker267)));
                    if ((temp304 == 0)) {
                        this.Manager.Comment("reaching state \'S522\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S523\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S524\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S525\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S526\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            ResilientHandleDurableTestCaseS527();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label259;
                    }
                    if ((temp304 == 1)) {
                        ResilientHandleDurableTestCaseS528();
                        goto label259;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S521\'.");
                label259:
;
                    goto label260;
                }
                if ((temp305 == 3)) {
                    ResilientHandleDurableTestCaseS534();
                    goto label260;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker7)));
            label260:
;
                goto label261;
            }
            throw new InvalidOperationException("never reached");
        label261:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS457ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS457ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS457ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S463");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker262() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S469");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker263() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S475");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S463");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker264() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S482");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker265() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS484() {
            this.Manager.Comment("reaching state \'S484\'");
            this.Manager.Comment("executing step \'call Disconnect()\'");
            this.IResilientHandleAdapterInstance.Disconnect();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                    "e the Open as specified in section 3.3.4.17.\"");
            this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
            this.Manager.Comment("reaching state \'S485\'");
            this.Manager.Comment("checking step \'return Disconnect\'");
            this.Manager.Comment("reaching state \'S486\'");
            this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
            this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
            this.Manager.Comment("reaching state \'S487\'");
            this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
            this.Manager.Comment("reaching state \'S488\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S489\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker3)));
            }
        }
        
        private void ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_OBJECT_NAME_NOT_FOUN" +
                    "D)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ReEstablishResilientOpenResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The lookup fails."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 1. The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The lookup fails.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S463");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S463");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS457ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S520");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S520");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S520");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker266() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS457ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S526");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker267() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS457IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S520");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S547
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS547() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS547");
            this.Manager.Comment("reaching state \'S547\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp307;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp307);
            this.Manager.AddReturn(ReadConfigInfo, null, temp307);
            this.Manager.Comment("reaching state \'S548\'");
            int temp314 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS547ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS547ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS547ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS547ReadConfigChecker3)));
            if ((temp314 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label268;
            }
            if ((temp314 == 1)) {
                ResilientHandleDurableTestCaseS282();
                goto label268;
            }
            if ((temp314 == 2)) {
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S552\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S553\'");
                int temp310 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker2)));
                if ((temp310 == 0)) {
                    ResilientHandleDurableTestCaseS255();
                    goto label264;
                }
                if ((temp310 == 1)) {
                    this.Manager.Comment("reaching state \'S554\'");
                    int temp308 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker268)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker269)));
                    if ((temp308 == 0)) {
                        this.Manager.Comment("reaching state \'S555\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S556\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S557\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S558\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S559\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S560\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label262;
                    }
                    if ((temp308 == 1)) {
                        this.Manager.Comment("reaching state \'S561\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S562\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S563\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S564\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S565\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS26();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label262;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S554\'.");
                label262:
;
                    goto label264;
                }
                if ((temp310 == 2)) {
                    this.Manager.Comment("reaching state \'S566\'");
                    int temp309 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker270)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker271)));
                    if ((temp309 == 0)) {
                        this.Manager.Comment("reaching state \'S567\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S568\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S569\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S570\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S571\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS45();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label263;
                    }
                    if ((temp309 == 1)) {
                        this.Manager.Comment("reaching state \'S572\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S573\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S574\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S575\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S576\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S577\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label263;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S566\'.");
                label263:
;
                    goto label264;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker2)));
            label264:
;
                goto label268;
            }
            if ((temp314 == 3)) {
                this.Manager.Comment("reaching state \'S578\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S582\'");
                int temp313 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker7)));
                if ((temp313 == 0)) {
                    ResilientHandleDurableTestCaseS419();
                    goto label267;
                }
                if ((temp313 == 1)) {
                    ResilientHandleDurableTestCaseS432();
                    goto label267;
                }
                if ((temp313 == 2)) {
                    ResilientHandleDurableTestCaseS439();
                    goto label267;
                }
                if ((temp313 == 3)) {
                    this.Manager.Comment("reaching state \'S583\'");
                    int temp311 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker272)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker273)));
                    if ((temp311 == 0)) {
                        ResilientHandleDurableTestCaseS451();
                        goto label265;
                    }
                    if ((temp311 == 1)) {
                        this.Manager.Comment("reaching state \'S584\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S585\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S586\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S587\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S588\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S589\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label265;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S583\'.");
                label265:
;
                    goto label267;
                }
                if ((temp313 == 4)) {
                    this.Manager.Comment("reaching state \'S590\'");
                    int temp312 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker274)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker275)));
                    if ((temp312 == 0)) {
                        ResilientHandleDurableTestCaseS414();
                        goto label266;
                    }
                    if ((temp312 == 1)) {
                        this.Manager.Comment("reaching state \'S591\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S592\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S593\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S594\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S595\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S596\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label266;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S590\'.");
                label266:
;
                    goto label267;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker7)));
            label267:
;
                goto label268;
            }
            throw new InvalidOperationException("never reached");
        label268:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS547ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS547ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS547ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S553");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S553");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker268() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S559");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker269() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S565");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S553");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker270() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S571");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker271() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S582");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S582");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S582");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S582");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker272() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker273() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S588");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S582");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker274() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker275() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS547ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S595");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S597
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS597() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS597");
            this.Manager.Comment("reaching state \'S597\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp315;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp315);
            this.Manager.AddReturn(ReadConfigInfo, null, temp315);
            this.Manager.Comment("reaching state \'S598\'");
            int temp323 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS597ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS597ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS597ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS597ReadConfigChecker3)));
            if ((temp323 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label276;
            }
            if ((temp323 == 1)) {
                ResilientHandleDurableTestCaseS403();
                goto label276;
            }
            if ((temp323 == 2)) {
                this.Manager.Comment("reaching state \'S599\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S600\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S601\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S602\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S603\'");
                int temp319 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker2)));
                if ((temp319 == 0)) {
                    this.Manager.Comment("reaching state \'S604\'");
                    int temp316 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker276)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker277)));
                    if ((temp316 == 0)) {
                        this.Manager.Comment("reaching state \'S605\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S606\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S607\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S608\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S609\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS610();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label269;
                    }
                    if ((temp316 == 1)) {
                        this.Manager.Comment("reaching state \'S611\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S612\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S613\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S614\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S615\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S616\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label269;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S604\'.");
                label269:
;
                    goto label272;
                }
                if ((temp319 == 1)) {
                    this.Manager.Comment("reaching state \'S617\'");
                    int temp317 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker278)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker279)));
                    if ((temp317 == 0)) {
                        this.Manager.Comment("reaching state \'S618\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S619\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S620\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S621\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S622\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            ResilientHandleDurableTestCaseS623();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label270;
                    }
                    if ((temp317 == 1)) {
                        this.Manager.Comment("reaching state \'S624\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S625\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S626\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S627\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S628\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            ResilientHandleDurableTestCaseS629();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label270;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S617\'.");
                label270:
;
                    goto label272;
                }
                if ((temp319 == 2)) {
                    ResilientHandleDurableTestCaseS630();
                    goto label272;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker2)));
            label272:
;
                goto label276;
            }
            if ((temp323 == 3)) {
                this.Manager.Comment("reaching state \'S643\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S644\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S647\'");
                int temp322 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker7)));
                if ((temp322 == 0)) {
                    ResilientHandleDurableTestCaseS490();
                    goto label275;
                }
                if ((temp322 == 1)) {
                    ResilientHandleDurableTestCaseS503();
                    goto label275;
                }
                if ((temp322 == 2)) {
                    this.Manager.Comment("reaching state \'S648\'");
                    int temp320 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker282)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker283)));
                    if ((temp320 == 0)) {
                        this.Manager.Comment("reaching state \'S649\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S650\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S651\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S652\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S653\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S654\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker4)));
                        }
                        goto label273;
                    }
                    if ((temp320 == 1)) {
                        ResilientHandleDurableTestCaseS655();
                        goto label273;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S648\'.");
                label273:
;
                    goto label275;
                }
                if ((temp322 == 3)) {
                    this.Manager.Comment("reaching state \'S661\'");
                    int temp321 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker284)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker285)));
                    if ((temp321 == 0)) {
                        this.Manager.Comment("reaching state \'S662\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S663\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S664\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S665\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S666\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S667\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker5)));
                        }
                        goto label274;
                    }
                    if ((temp321 == 1)) {
                        ResilientHandleDurableTestCaseS668();
                        goto label274;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S661\'.");
                label274:
;
                    goto label275;
                }
                if ((temp322 == 4)) {
                    ResilientHandleDurableTestCaseS674();
                    goto label275;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker7)));
            label275:
;
                goto label276;
            }
            throw new InvalidOperationException("never reached");
        label276:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS597ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S598");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS597ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S598");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS597ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S598");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S603");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker276() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S609");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker277() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S615");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S603");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker278() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb21 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S622");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker279() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S628");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S603");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS630() {
            this.Manager.Comment("reaching state \'S630\'");
            int temp318 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker280)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker281)));
            if ((temp318 == 0)) {
                ResilientHandleDurableTestCaseS631();
                goto label271;
            }
            if ((temp318 == 1)) {
                ResilientHandleDurableTestCaseS637();
                goto label271;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S630\'.");
        label271:
;
        }
        
        private void PreConstraintChecker280() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void PreConstraintChecker281() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS597ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S598");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S647");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S647");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S647");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S647");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S647");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S647");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker282() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S653");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker283() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S647");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S647");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker284() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS597ReEstablishResilientOpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S666");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker285() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS597IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S647");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S647");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S687
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS687() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS687");
            this.Manager.Comment("reaching state \'S687\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp324;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp324);
            this.Manager.AddReturn(ReadConfigInfo, null, temp324);
            this.Manager.Comment("reaching state \'S688\'");
            int temp329 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS687ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS687ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS687ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS687ReadConfigChecker3)));
            if ((temp329 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label281;
            }
            if ((temp329 == 1)) {
                ResilientHandleDurableTestCaseS403();
                goto label281;
            }
            if ((temp329 == 2)) {
                this.Manager.Comment("reaching state \'S689\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S690\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S691\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S692\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S693\'");
                int temp326 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker1)));
                if ((temp326 == 0)) {
                    ResilientHandleDurableTestCaseS371();
                    goto label278;
                }
                if ((temp326 == 1)) {
                    this.Manager.Comment("reaching state \'S694\'");
                    int temp325 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker286)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker287)));
                    if ((temp325 == 0)) {
                        this.Manager.Comment("reaching state \'S695\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S696\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S697\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S698\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S699\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS687ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S700\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS687ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label277;
                    }
                    if ((temp325 == 1)) {
                        ResilientHandleDurableTestCaseS701();
                        goto label277;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S694\'.");
                label277:
;
                    goto label278;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker1)));
            label278:
;
                goto label281;
            }
            if ((temp329 == 3)) {
                this.Manager.Comment("reaching state \'S707\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S708\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S709\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S710\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S711\'");
                int temp328 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker3)));
                if ((temp328 == 0)) {
                    ResilientHandleDurableTestCaseS630();
                    goto label280;
                }
                if ((temp328 == 1)) {
                    this.Manager.Comment("reaching state \'S712\'");
                    int temp327 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker288)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker289)));
                    if ((temp327 == 0)) {
                        this.Manager.Comment("reaching state \'S713\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S714\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S715\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S716\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S717\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS687ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS718();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS687ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label279;
                    }
                    if ((temp327 == 1)) {
                        ResilientHandleDurableTestCaseS719();
                        goto label279;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S712\'.");
                label279:
;
                    goto label280;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker3)));
            label280:
;
                goto label281;
            }
            throw new InvalidOperationException("never reached");
        label281:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS687ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S688");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS687ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S688");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS687ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S688");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker286() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS687ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S699");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker287() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS687ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S688");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S711");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S711");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS687IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S711");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S711");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 528");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker288() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS687ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S717");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker289() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        #endregion
        
        #region Test Starting in S725
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS725() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS725");
            this.Manager.Comment("reaching state \'S725\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp330;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp330);
            this.Manager.AddReturn(ReadConfigInfo, null, temp330);
            this.Manager.Comment("reaching state \'S726\'");
            int temp336 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS725ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS725ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS725ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS725ReadConfigChecker3)));
            if ((temp336 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label287;
            }
            if ((temp336 == 1)) {
                ResilientHandleDurableTestCaseS282();
                goto label287;
            }
            if ((temp336 == 2)) {
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S729\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S730\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S731\'");
                int temp333 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker1)));
                if ((temp333 == 0)) {
                    this.Manager.Comment("reaching state \'S732\'");
                    int temp331 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker290)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker291)));
                    if ((temp331 == 0)) {
                        this.Manager.Comment("reaching state \'S733\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S734\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S735\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S736\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S737\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS725ReEstablishResilientOpenResponseChecker))) != -1)) {
                            ResilientHandleDurableTestCaseS738();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS725ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label282;
                    }
                    if ((temp331 == 1)) {
                        ResilientHandleDurableTestCaseS739();
                        goto label282;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S732\'.");
                label282:
;
                    goto label284;
                }
                if ((temp333 == 1)) {
                    this.Manager.Comment("reaching state \'S745\'");
                    int temp332 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker292)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker293)));
                    if ((temp332 == 0)) {
                        ResilientHandleDurableTestCaseS746();
                        goto label283;
                    }
                    if ((temp332 == 1)) {
                        ResilientHandleDurableTestCaseS752();
                        goto label283;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S745\'.");
                label283:
;
                    goto label284;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker1)));
            label284:
;
                goto label287;
            }
            if ((temp336 == 3)) {
                this.Manager.Comment("reaching state \'S758\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S759\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S760\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S761\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S762\'");
                int temp335 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker5)));
                if ((temp335 == 0)) {
                    ResilientHandleDurableTestCaseS763();
                    goto label286;
                }
                if ((temp335 == 1)) {
                    ResilientHandleDurableTestCaseS774();
                    goto label286;
                }
                if ((temp335 == 2)) {
                    ResilientHandleDurableTestCaseS787();
                    goto label286;
                }
                if ((temp335 == 3)) {
                    this.Manager.Comment("reaching state \'S798\'");
                    int temp334 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker294)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker295)));
                    if ((temp334 == 0)) {
                        ResilientHandleDurableTestCaseS484();
                        goto label285;
                    }
                    if ((temp334 == 1)) {
                        this.Manager.Comment("reaching state \'S799\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S800\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S801\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S802\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S803\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS725ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S804\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS725ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label285;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S798\'.");
                label285:
;
                    goto label286;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker5)));
            label286:
;
                goto label287;
            }
            throw new InvalidOperationException("never reached");
        label287:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS725ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S726");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS725ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S726");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS725ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S726");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S731");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S731");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker290() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS725ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S737");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker291() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S731");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S731");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker292() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void PreConstraintChecker293() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS725ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S726");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S762");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S762");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S762");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS725IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S762");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker294() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void PreConstraintChecker295() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS725ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S803");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S805
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS805() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS805");
            this.Manager.Comment("reaching state \'S805\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp337;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp337);
            this.Manager.AddReturn(ReadConfigInfo, null, temp337);
            this.Manager.Comment("reaching state \'S806\'");
            int temp344 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS805ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS805ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS805ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS805ReadConfigChecker3)));
            if ((temp344 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label294;
            }
            if ((temp344 == 1)) {
                ResilientHandleDurableTestCaseS282();
                goto label294;
            }
            if ((temp344 == 2)) {
                this.Manager.Comment("reaching state \'S807\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S808\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S809\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S810\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S811\'");
                int temp340 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker3)));
                if ((temp340 == 0)) {
                    ResilientHandleDurableTestCaseS432();
                    goto label290;
                }
                if ((temp340 == 1)) {
                    ResilientHandleDurableTestCaseS439();
                    goto label290;
                }
                if ((temp340 == 2)) {
                    this.Manager.Comment("reaching state \'S812\'");
                    int temp338 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker296)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker297)));
                    if ((temp338 == 0)) {
                        this.Manager.Comment("reaching state \'S813\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S814\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S815\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S816\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S817\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S818\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label288;
                    }
                    if ((temp338 == 1)) {
                        ResilientHandleDurableTestCaseS819();
                        goto label288;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S812\'.");
                label288:
;
                    goto label290;
                }
                if ((temp340 == 3)) {
                    this.Manager.Comment("reaching state \'S825\'");
                    int temp339 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker298)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker299)));
                    if ((temp339 == 0)) {
                        this.Manager.Comment("reaching state \'S826\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tThe server supports leasing and Open.IsResilient is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S827\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S828\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S829\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S830\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS831();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label289;
                    }
                    if ((temp339 == 1)) {
                        ResilientHandleDurableTestCaseS832();
                        goto label289;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S825\'.");
                label289:
;
                    goto label290;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker3)));
            label290:
;
                goto label294;
            }
            if ((temp344 == 3)) {
                this.Manager.Comment("reaching state \'S838\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S839\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S840\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Vali" +
                        "dTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(1)));
                this.Manager.Comment("reaching state \'S841\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S842\'");
                int temp343 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker8)));
                if ((temp343 == 0)) {
                    ResilientHandleDurableTestCaseS787();
                    goto label293;
                }
                if ((temp343 == 1)) {
                    ResilientHandleDurableTestCaseS843();
                    goto label293;
                }
                if ((temp343 == 2)) {
                    ResilientHandleDurableTestCaseS855();
                    goto label293;
                }
                if ((temp343 == 3)) {
                    this.Manager.Comment("reaching state \'S866\'");
                    int temp341 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker300)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker301)));
                    if ((temp341 == 0)) {
                        this.Manager.Comment("reaching state \'S867\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S868\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S869\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S870\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S871\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S872\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label291;
                    }
                    if ((temp341 == 1)) {
                        ResilientHandleDurableTestCaseS873();
                        goto label291;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S866\'.");
                label291:
;
                    goto label293;
                }
                if ((temp343 == 4)) {
                    this.Manager.Comment("reaching state \'S879\'");
                    int temp342 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker302)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker303)));
                    if ((temp342 == 0)) {
                        ResilientHandleDurableTestCaseS504();
                        goto label292;
                    }
                    if ((temp342 == 1)) {
                        this.Manager.Comment("reaching state \'S880\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S881\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S882\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S883\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S884\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S885\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label292;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S879\'.");
                label292:
;
                    goto label293;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker7)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker8)));
            label293:
;
                goto label294;
            }
            throw new InvalidOperationException("never reached");
        label294:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS805ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S806");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS805ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S806");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS805ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S806");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S811");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S811");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S811");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S811");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S811");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S811");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker296() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S817");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker297() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S811");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S811");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker298() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S830");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker299() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS805ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S806");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker300() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S871");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker301() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS805IoCtlResiliencyResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker302() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker303() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS805ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S884");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S886
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS886() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS886");
            this.Manager.Comment("reaching state \'S886\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp345;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp345);
            this.Manager.AddReturn(ReadConfigInfo, null, temp345);
            this.Manager.Comment("reaching state \'S887\'");
            int temp351 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS886ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS886ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS886ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS886ReadConfigChecker3)));
            if ((temp351 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label300;
            }
            if ((temp351 == 1)) {
                ResilientHandleDurableTestCaseS282();
                goto label300;
            }
            if ((temp351 == 2)) {
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S891\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S892\'");
                int temp349 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker2)));
                if ((temp349 == 0)) {
                    this.Manager.Comment("reaching state \'S893\'");
                    int temp346 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker304)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker305)));
                    if ((temp346 == 0)) {
                        this.Manager.Comment("reaching state \'S894\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S895\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S896\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S897\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S898\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS886ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S899\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS886ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label295;
                    }
                    if ((temp346 == 1)) {
                        this.Manager.Comment("reaching state \'S900\'");
                        this.Manager.Comment("executing step \'call Disconnect()\'");
                        this.IResilientHandleAdapterInstance.Disconnect();
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1 Handling Loss of a Connection\"");
                        this.Manager.Checkpoint("\"[MS-SMB2] If any of the following conditions is satisfied, it indicates that the" +
                                " Open is to be preserved for reconnect. \"");
                        this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                                "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
                        this.Manager.Checkpoint("\"[TestInfo] The Open is preserved.\"");
                        this.Manager.Comment("reaching state \'S901\'");
                        this.Manager.Comment("checking step \'return Disconnect\'");
                        this.Manager.Comment("reaching state \'S902\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S903\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S904\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS886ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            ResilientHandleDurableTestCaseS905();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS886ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label295;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S893\'.");
                label295:
;
                    goto label298;
                }
                if ((temp349 == 1)) {
                    this.Manager.Comment("reaching state \'S906\'");
                    int temp347 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker306)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker307)));
                    if ((temp347 == 0)) {
                        ResilientHandleDurableTestCaseS907();
                        goto label296;
                    }
                    if ((temp347 == 1)) {
                        ResilientHandleDurableTestCaseS913();
                        goto label296;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S906\'.");
                label296:
;
                    goto label298;
                }
                if ((temp349 == 2)) {
                    this.Manager.Comment("reaching state \'S919\'");
                    int temp348 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker308)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker309)));
                    if ((temp348 == 0)) {
                        ResilientHandleDurableTestCaseS920();
                        goto label297;
                    }
                    if ((temp348 == 1)) {
                        ResilientHandleDurableTestCaseS926();
                        goto label297;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S919\'.");
                label297:
;
                    goto label298;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker2)));
            label298:
;
                goto label300;
            }
            if ((temp351 == 3)) {
                this.Manager.Comment("reaching state \'S932\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S933\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S934\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S935\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S936\'");
                int temp350 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker7)));
                if ((temp350 == 0)) {
                    ResilientHandleDurableTestCaseS763();
                    goto label299;
                }
                if ((temp350 == 1)) {
                    ResilientHandleDurableTestCaseS787();
                    goto label299;
                }
                if ((temp350 == 2)) {
                    ResilientHandleDurableTestCaseS843();
                    goto label299;
                }
                if ((temp350 == 3)) {
                    ResilientHandleDurableTestCaseS855();
                    goto label299;
                }
                if ((temp350 == 4)) {
                    ResilientHandleDurableTestCaseS937();
                    goto label299;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker6)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker7)));
            label299:
;
                goto label300;
            }
            throw new InvalidOperationException("never reached");
        label300:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS886ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S887");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS886ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S887");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS886ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S887");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker304() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb302 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppo" +
                    "rted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS886ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S898");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker305() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsIoCt" +
                    "lCodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindo" +
                    "ws \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS886ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S904");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker306() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker307() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker308() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void PreConstraintChecker309() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS886ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S887");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS886IoCtlResiliencyResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is not  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S948
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS948() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS948");
            this.Manager.Comment("reaching state \'S948\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp352;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp352);
            this.Manager.AddReturn(ReadConfigInfo, null, temp352);
            this.Manager.Comment("reaching state \'S949\'");
            int temp356 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS948ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS948ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS948ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS948ReadConfigChecker3)));
            if ((temp356 == 0)) {
                ResilientHandleDurableTestCaseS266();
                goto label304;
            }
            if ((temp356 == 1)) {
                ResilientHandleDurableTestCaseS282();
                goto label304;
            }
            if ((temp356 == 2)) {
                this.Manager.Comment("reaching state \'S950\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S951\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S952\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S953\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S954\'");
                int temp353 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker3)));
                if ((temp353 == 0)) {
                    ResilientHandleDurableTestCaseS763();
                    goto label301;
                }
                if ((temp353 == 1)) {
                    ResilientHandleDurableTestCaseS774();
                    goto label301;
                }
                if ((temp353 == 2)) {
                    ResilientHandleDurableTestCaseS787();
                    goto label301;
                }
                if ((temp353 == 3)) {
                    ResilientHandleDurableTestCaseS955();
                    goto label301;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker1)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker3)));
            label301:
;
                goto label304;
            }
            if ((temp356 == 3)) {
                this.Manager.Comment("reaching state \'S967\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S968\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S969\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountEqualToRequestSize,ZeroTime" +
                        "out)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S970\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S971\'");
                int temp355 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker5)));
                if ((temp355 == 0)) {
                    ResilientHandleDurableTestCaseS972();
                    goto label303;
                }
                if ((temp355 == 1)) {
                    this.Manager.Comment("reaching state \'S983\'");
                    int temp354 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker310)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker311)));
                    if ((temp354 == 0)) {
                        this.Manager.Comment("reaching state \'S984\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S985\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S986\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S987\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S988\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS948ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S989\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS948ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label302;
                    }
                    if ((temp354 == 1)) {
                        ResilientHandleDurableTestCaseS990();
                        goto label302;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S983\'.");
                label302:
;
                    goto label303;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker5)));
            label303:
;
                goto label304;
            }
            throw new InvalidOperationException("never reached");
        label304:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS948ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S949");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS948ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S949");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS948ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S949");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S954");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S954");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S954");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S954");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S954");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S954");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S954");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S954");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS948ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S949");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S971");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S971");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS948IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S971");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S971");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker310() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS948ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S988");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker311() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        #endregion
        
        #region Test Starting in S996
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlLmrRequestResiliency)]
        public void ResilientHandleDurableTestCaseS996() {
            this.Manager.BeginTest("ResilientHandleDurableTestCaseS996");
            this.Manager.Comment("reaching state \'S996\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig temp357;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IResilientHandleAdapterInstance.ReadConfig(out temp357);
            this.Manager.AddReturn(ReadConfigInfo, null, temp357);
            this.Manager.Comment("reaching state \'S997\'");
            int temp363 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS996ReadConfigChecker)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS996ReadConfigChecker1)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS996ReadConfigChecker2)), new ExpectedReturn(ResilientHandleDurableTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ResilientHandleDurableTestCaseS996ReadConfigChecker3)));
            if ((temp363 == 0)) {
                this.Manager.Comment("reaching state \'S1035\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S1036\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1037\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountGreaterThanRequestSize,Zero" +
                        "Timeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount.InputCountGreaterThanRequestSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout)(0)));
                this.Manager.Comment("reaching state \'S1038\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1039\'");
                int temp358 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker1)));
                if ((temp358 == 0)) {
                    ResilientHandleDurableTestCaseS1040();
                    goto label305;
                }
                if ((temp358 == 1)) {
                    ResilientHandleDurableTestCaseS972();
                    goto label305;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker1)));
            label305:
;
                goto label310;
            }
            if ((temp363 == 1)) {
                ResilientHandleDurableTestCaseS266();
                goto label310;
            }
            if ((temp363 == 2)) {
                ResilientHandleDurableTestCaseS282();
                goto label310;
            }
            if ((temp363 == 3)) {
                this.Manager.Comment("reaching state \'S998\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb2002,DurableHandle)\'");
                this.IResilientHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.DurableHandle)(0)));
                this.Manager.Comment("reaching state \'S999\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S1000\'");
                this.Manager.Comment("executing step \'call IoCtlResiliencyRequest(InputCountSmallerThanRequestSize,Inva" +
                        "lidTimeout)\'");
                this.IResilientHandleAdapterInstance.IoCtlResiliencyRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.IoCtlInputCount)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientTimeout.InvalidTimeout);
                this.Manager.Comment("reaching state \'S1001\'");
                this.Manager.Comment("checking step \'return IoCtlResiliencyRequest\'");
                this.Manager.Comment("reaching state \'S1002\'");
                int temp362 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker6)));
                if ((temp362 == 0)) {
                    this.Manager.Comment("reaching state \'S1003\'");
                    int temp359 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker312)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker313)));
                    if ((temp359 == 0)) {
                        this.Manager.Comment("reaching state \'S1004\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1005\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1006\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1007\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1008\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1009\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker)));
                        }
                        goto label306;
                    }
                    if ((temp359 == 1)) {
                        this.Manager.Comment("reaching state \'S1010\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1011\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1012\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1013\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1014\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S1015\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker1)));
                        }
                        goto label306;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1003\'.");
                label306:
;
                    goto label309;
                }
                if ((temp362 == 1)) {
                    this.Manager.Comment("reaching state \'S1016\'");
                    int temp360 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker314)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker315)));
                    if ((temp360 == 0)) {
                        this.Manager.Comment("reaching state \'S1017\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1018\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1019\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DefaultUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)));
                        this.Manager.Comment("reaching state \'S1020\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1021\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1022\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker2)));
                        }
                        goto label307;
                    }
                    if ((temp360 == 1)) {
                        ResilientHandleDurableTestCaseS1023();
                        goto label307;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1016\'.");
                label307:
;
                    goto label309;
                }
                if ((temp362 == 2)) {
                    this.Manager.Comment("reaching state \'S1028\'");
                    int temp361 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker316)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker317)));
                    if ((temp361 == 0)) {
                        this.Manager.Comment("reaching state \'S1029\'");
                        this.Manager.Comment("executing step \'call LogOff()\'");
                        this.IResilientHandleAdapterInstance.LogOff();
                        this.Manager.Comment("reaching state \'S1030\'");
                        this.Manager.Comment("checking step \'return LogOff\'");
                        this.Manager.Comment("reaching state \'S1031\'");
                        this.Manager.Comment("executing step \'call ReEstablishResilientOpenRequest(DiffUser)\'");
                        this.IResilientHandleAdapterInstance.ReEstablishResilientOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(1)));
                        this.Manager.Comment("reaching state \'S1032\'");
                        this.Manager.Comment("checking step \'return ReEstablishResilientOpenRequest\'");
                        this.Manager.Comment("reaching state \'S1033\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S1034\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.ReEstablishResilientOpenResponseInfo, null, new ReEstablishResilientOpenResponseDelegate1(this.ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker3)));
                        }
                        goto label308;
                    }
                    if ((temp361 == 1)) {
                        ResilientHandleDurableTestCaseS510();
                        goto label308;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S1028\'.");
                label308:
;
                    goto label309;
                }
                if ((temp362 == 3)) {
                    ResilientHandleDurableTestCaseS787();
                    goto label309;
                }
                if ((temp362 == 4)) {
                    ResilientHandleDurableTestCaseS937();
                    goto label309;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker2)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker3)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker4)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker5)), new ExpectedEvent(ResilientHandleDurableTestCase.IoCtlResiliencyResponseInfo, null, new IoCtlResiliencyResponseDelegate1(this.ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker6)));
            label309:
;
                goto label310;
            }
            throw new InvalidOperationException("never reached");
        label310:
;
            this.Manager.EndTest();
        }
        
        private void ResilientHandleDurableTestCaseS996ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S997");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of IoCtlResiliencyResponse, state S1039");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1039");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to TRUE. "", ""[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE."", ""[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.DurableOwner is set to default user.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.IsDurable MUST be set to FALSE. Open.IsResilient MUST be set to T" +
                    "RUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to FALSE. Open.IsResilient is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.DurableOwner MUST be set to a security descriptor accessible only" +
                    " by the user represented by Open.Session.SecurityContext.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableOwner is set to default user.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1039");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1039");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS996ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S997");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void ResilientHandleDurableTestCaseS996ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S997");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void ResilientHandleDurableTestCaseS996ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig config) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, config, "config of ReadConfig, state S997");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1002");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker312() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                    "MaxSmbVersionSupported",
                    "IsIoCtlCodeResiliencySupported",
                    "IsLeasingSupported",
                    "Platform"}, new object[] {
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                    false,
                    false,
                    Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}))))) 
                            == false), "Fail to check preconstraint : !(c == ResilientHandleServerConfig State: \r\nMaxSmbV" +
                    "ersionSupported: Smb30 \r\nIsIoCtlCodeResiliencySupported: False \r\nIsLeasingSuppor" +
                    "ted: False \r\nPlatform: NonWindows \r\n)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1008");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker313() {
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsIoCtlCodeResiliencySupported",
                            "IsLeasingSupported",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == ResilientHandleServerConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsIoCtl" +
                    "CodeResiliencySupported: False \r\nIsLeasingSupported: False \r\nPlatform: NonWindow" +
                    "s \r\n");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1014");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1002");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker314() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_SUCCESS)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ReEstablishResilientOpenResponse, state S1021");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker315() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of IoCtlResiliencyResponse, state S1002");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED."", ""[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : c.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(0))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, if the server does not support FSCTL_LMR_REQUEST_RESILIENCY" +
                    " requests, the server SHOULD fail the request with STATUS_NOT_SUPPORTED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The server does not support FSCTL_LMR_REQUEST_RESILIENCY requests.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void PreConstraintChecker316() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsLeasingSupported == 0)");
        }
        
        private void ResilientHandleDurableTestCaseS996ReEstablishResilientOpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status) {
            this.Manager.Comment("checking step \'event ReEstablishResilientOpenResponse(STATUS_ACCESS_DENIED)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_ACCESS_DENIED, status, "status of ReEstablishResilientOpenResponse, state S1033");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The user is different."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.7: 9. If the user represented by Session.SecurityContext is not the same user denoted by Open.DurableOwner, the server MUST fail the request with STATUS_ACCESS_DENIED and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] The user is different.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker317() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check preconstraint : c.IsLeasingSupported == 0");
        }
        
        private void ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_DEVICE_REQUEST,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_REQUEST, status, "status of IoCtlResiliencyResponse, state S1002");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ResilientHandleDurableTestCaseS996IoCtlResiliencyResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig c) {
            this.Manager.Comment("checking step \'event IoCtlResiliencyResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of IoCtlResiliencyResponse, state S1002");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.c1, c, "c of IoCtlResiliencyResponse, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request"", ""[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the SMB 3.x dialect family."", ""[MS-SMB2] If Open.Connection.Dialect is ""2.002"", the server MAY<320> fail the request with STATUS_INVALID_DEVICE_REQUEST."", ""[TestInfo] Open.Connection.Dialect is ""2.002""."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is Windows."", ""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER."", ""[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request."", ""[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsIoCtlCodeResiliencySupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ResilientHandle.ResilientHandleServerConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsIoCtlCodeResiliencySupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsIoCtlCodeResiliencySupported)))), "Fail to check the assumption : v1.IsIoCtlCodeResiliencySupported == c.IsIoCtlCode" +
                    "ResiliencySupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.9 Handling a Resiliency Request\"");
            this.Manager.Checkpoint("\"[MS-SMB2] This section applies only to servers that implement the SMB 2.1 or the" +
                    " SMB 3.x dialect family.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Connection.Dialect is \"2.002\", the server MAY<320> fail the re" +
                    "quest with STATUS_INVALID_DEVICE_REQUEST.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Connection.Dialect is \"2.002\".\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST request as specified in section 2.2.31.3, or if the requested Timeout in seconds is greater than MaxResiliencyTimeout in seconds, the request MUST be failed with STATUS_INVALID_PARAMETER.""");
            this.Manager.Checkpoint("\"[TestInfo] InputCount is smaller than the size of the NETWORK_RESILIENCY_REQUEST" +
                    " request.\"");
            this.Manager.Checkpoint("\"[TestInfo] The requested Timeout is  greater than MaxResiliencyTimeout.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
    }
}
